// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: pro/flange_type_snp_api.proto

package flange_type_snp_api

import (
	flange_type_snp_model "github.com/Alexander272/sealur_proto/api/pro/models/flange_type_snp_model"
	response_model "github.com/Alexander272/sealur_proto/api/pro/models/response_model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetFlangeTypeSnp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StandardId string `protobuf:"bytes,1,opt,name=standardId,proto3" json:"standardId,omitempty"`
}

func (x *GetFlangeTypeSnp) Reset() {
	*x = GetFlangeTypeSnp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pro_flange_type_snp_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlangeTypeSnp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlangeTypeSnp) ProtoMessage() {}

func (x *GetFlangeTypeSnp) ProtoReflect() protoreflect.Message {
	mi := &file_pro_flange_type_snp_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlangeTypeSnp.ProtoReflect.Descriptor instead.
func (*GetFlangeTypeSnp) Descriptor() ([]byte, []int) {
	return file_pro_flange_type_snp_api_proto_rawDescGZIP(), []int{0}
}

func (x *GetFlangeTypeSnp) GetStandardId() string {
	if x != nil {
		return x.StandardId
	}
	return ""
}

type CreateFlangeTypeSnp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Code       string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	StandardId string `protobuf:"bytes,3,opt,name=standardId,proto3" json:"standardId,omitempty"`
}

func (x *CreateFlangeTypeSnp) Reset() {
	*x = CreateFlangeTypeSnp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pro_flange_type_snp_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlangeTypeSnp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlangeTypeSnp) ProtoMessage() {}

func (x *CreateFlangeTypeSnp) ProtoReflect() protoreflect.Message {
	mi := &file_pro_flange_type_snp_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlangeTypeSnp.ProtoReflect.Descriptor instead.
func (*CreateFlangeTypeSnp) Descriptor() ([]byte, []int) {
	return file_pro_flange_type_snp_api_proto_rawDescGZIP(), []int{1}
}

func (x *CreateFlangeTypeSnp) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateFlangeTypeSnp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CreateFlangeTypeSnp) GetStandardId() string {
	if x != nil {
		return x.StandardId
	}
	return ""
}

type CreateSeveralFlangeTypeSnp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlangeTypeSnp []*CreateFlangeTypeSnp `protobuf:"bytes,1,rep,name=flangeTypeSnp,proto3" json:"flangeTypeSnp,omitempty"`
}

func (x *CreateSeveralFlangeTypeSnp) Reset() {
	*x = CreateSeveralFlangeTypeSnp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pro_flange_type_snp_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSeveralFlangeTypeSnp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSeveralFlangeTypeSnp) ProtoMessage() {}

func (x *CreateSeveralFlangeTypeSnp) ProtoReflect() protoreflect.Message {
	mi := &file_pro_flange_type_snp_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSeveralFlangeTypeSnp.ProtoReflect.Descriptor instead.
func (*CreateSeveralFlangeTypeSnp) Descriptor() ([]byte, []int) {
	return file_pro_flange_type_snp_api_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSeveralFlangeTypeSnp) GetFlangeTypeSnp() []*CreateFlangeTypeSnp {
	if x != nil {
		return x.FlangeTypeSnp
	}
	return nil
}

type UpdateFlangeTypeSnp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title      string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Code       string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	StandardId string `protobuf:"bytes,4,opt,name=standardId,proto3" json:"standardId,omitempty"`
}

func (x *UpdateFlangeTypeSnp) Reset() {
	*x = UpdateFlangeTypeSnp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pro_flange_type_snp_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlangeTypeSnp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlangeTypeSnp) ProtoMessage() {}

func (x *UpdateFlangeTypeSnp) ProtoReflect() protoreflect.Message {
	mi := &file_pro_flange_type_snp_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlangeTypeSnp.ProtoReflect.Descriptor instead.
func (*UpdateFlangeTypeSnp) Descriptor() ([]byte, []int) {
	return file_pro_flange_type_snp_api_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateFlangeTypeSnp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateFlangeTypeSnp) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateFlangeTypeSnp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UpdateFlangeTypeSnp) GetStandardId() string {
	if x != nil {
		return x.StandardId
	}
	return ""
}

type DeleteFlangeTypeSnp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteFlangeTypeSnp) Reset() {
	*x = DeleteFlangeTypeSnp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pro_flange_type_snp_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlangeTypeSnp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlangeTypeSnp) ProtoMessage() {}

func (x *DeleteFlangeTypeSnp) ProtoReflect() protoreflect.Message {
	mi := &file_pro_flange_type_snp_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlangeTypeSnp.ProtoReflect.Descriptor instead.
func (*DeleteFlangeTypeSnp) Descriptor() ([]byte, []int) {
	return file_pro_flange_type_snp_api_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteFlangeTypeSnp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FlangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlangeTypeSnp []*flange_type_snp_model.FlangeTypeSnp `protobuf:"bytes,1,rep,name=flangeTypeSnp,proto3" json:"flangeTypeSnp,omitempty"`
}

func (x *FlangeType) Reset() {
	*x = FlangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pro_flange_type_snp_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlangeType) ProtoMessage() {}

func (x *FlangeType) ProtoReflect() protoreflect.Message {
	mi := &file_pro_flange_type_snp_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlangeType.ProtoReflect.Descriptor instead.
func (*FlangeType) Descriptor() ([]byte, []int) {
	return file_pro_flange_type_snp_api_proto_rawDescGZIP(), []int{5}
}

func (x *FlangeType) GetFlangeTypeSnp() []*flange_type_snp_model.FlangeTypeSnp {
	if x != nil {
		return x.FlangeTypeSnp
	}
	return nil
}

var File_pro_flange_type_snp_api_proto protoreflect.FileDescriptor

var file_pro_flange_type_snp_api_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x2f, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x73, 0x6e, 0x70, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x13, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x6e, 0x70,
	0x5f, 0x61, 0x70, 0x69, 0x1a, 0x1f, 0x70, 0x72, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x72, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x6e,
	0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x6e,
	0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x22, 0x5f, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x6e, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x22, 0x6c, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x6e, 0x70,
	0x12, 0x4e, 0x0a, 0x0d, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x6e,
	0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x6e, 0x70, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x6e,
	0x70, 0x52, 0x0d, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x6e, 0x70,
	0x22, 0x6f, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x6e, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x6e, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x58, 0x0a, 0x0a, 0x46, 0x6c, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x6e, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x6e, 0x70, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x6e, 0x70, 0x52, 0x0d, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x6e, 0x70, 0x32, 0xab, 0x03, 0x0a, 0x14, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x6e, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x25, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x73, 0x6e, 0x70, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x6e, 0x70, 0x1a, 0x1f, 0x2e, 0x66, 0x6c, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x6e, 0x70, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x73, 0x6e, 0x70, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x6e, 0x70, 0x1a, 0x18,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x2f, 0x2e, 0x66, 0x6c, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x6e, 0x70, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x6e, 0x70, 0x1a, 0x18, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x28,
	0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x6e, 0x70,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x6e, 0x70, 0x1a, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x66,
	0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x6e, 0x70, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x6e, 0x70, 0x1a, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x1d, 0x5a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x2f, 0x66, 0x6c, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x6e, 0x70, 0x5f, 0x61, 0x70, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pro_flange_type_snp_api_proto_rawDescOnce sync.Once
	file_pro_flange_type_snp_api_proto_rawDescData = file_pro_flange_type_snp_api_proto_rawDesc
)

func file_pro_flange_type_snp_api_proto_rawDescGZIP() []byte {
	file_pro_flange_type_snp_api_proto_rawDescOnce.Do(func() {
		file_pro_flange_type_snp_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_pro_flange_type_snp_api_proto_rawDescData)
	})
	return file_pro_flange_type_snp_api_proto_rawDescData
}

var file_pro_flange_type_snp_api_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_pro_flange_type_snp_api_proto_goTypes = []interface{}{
	(*GetFlangeTypeSnp)(nil),                    // 0: flange_type_snp_api.GetFlangeTypeSnp
	(*CreateFlangeTypeSnp)(nil),                 // 1: flange_type_snp_api.CreateFlangeTypeSnp
	(*CreateSeveralFlangeTypeSnp)(nil),          // 2: flange_type_snp_api.CreateSeveralFlangeTypeSnp
	(*UpdateFlangeTypeSnp)(nil),                 // 3: flange_type_snp_api.UpdateFlangeTypeSnp
	(*DeleteFlangeTypeSnp)(nil),                 // 4: flange_type_snp_api.DeleteFlangeTypeSnp
	(*FlangeType)(nil),                          // 5: flange_type_snp_api.FlangeType
	(*flange_type_snp_model.FlangeTypeSnp)(nil), // 6: flange_type_snp_model.FlangeTypeSnp
	(*response_model.Response)(nil),             // 7: response_model.Response
}
var file_pro_flange_type_snp_api_proto_depIdxs = []int32{
	1, // 0: flange_type_snp_api.CreateSeveralFlangeTypeSnp.flangeTypeSnp:type_name -> flange_type_snp_api.CreateFlangeTypeSnp
	6, // 1: flange_type_snp_api.FlangeType.flangeTypeSnp:type_name -> flange_type_snp_model.FlangeTypeSnp
	0, // 2: flange_type_snp_api.FlangeTypeSnpService.Get:input_type -> flange_type_snp_api.GetFlangeTypeSnp
	1, // 3: flange_type_snp_api.FlangeTypeSnpService.Create:input_type -> flange_type_snp_api.CreateFlangeTypeSnp
	2, // 4: flange_type_snp_api.FlangeTypeSnpService.CreateSeveral:input_type -> flange_type_snp_api.CreateSeveralFlangeTypeSnp
	3, // 5: flange_type_snp_api.FlangeTypeSnpService.Update:input_type -> flange_type_snp_api.UpdateFlangeTypeSnp
	4, // 6: flange_type_snp_api.FlangeTypeSnpService.Delete:input_type -> flange_type_snp_api.DeleteFlangeTypeSnp
	5, // 7: flange_type_snp_api.FlangeTypeSnpService.Get:output_type -> flange_type_snp_api.FlangeType
	7, // 8: flange_type_snp_api.FlangeTypeSnpService.Create:output_type -> response_model.Response
	7, // 9: flange_type_snp_api.FlangeTypeSnpService.CreateSeveral:output_type -> response_model.Response
	7, // 10: flange_type_snp_api.FlangeTypeSnpService.Update:output_type -> response_model.Response
	7, // 11: flange_type_snp_api.FlangeTypeSnpService.Delete:output_type -> response_model.Response
	7, // [7:12] is the sub-list for method output_type
	2, // [2:7] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pro_flange_type_snp_api_proto_init() }
func file_pro_flange_type_snp_api_proto_init() {
	if File_pro_flange_type_snp_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pro_flange_type_snp_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlangeTypeSnp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pro_flange_type_snp_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlangeTypeSnp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pro_flange_type_snp_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSeveralFlangeTypeSnp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pro_flange_type_snp_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlangeTypeSnp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pro_flange_type_snp_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlangeTypeSnp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pro_flange_type_snp_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pro_flange_type_snp_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pro_flange_type_snp_api_proto_goTypes,
		DependencyIndexes: file_pro_flange_type_snp_api_proto_depIdxs,
		MessageInfos:      file_pro_flange_type_snp_api_proto_msgTypes,
	}.Build()
	File_pro_flange_type_snp_api_proto = out.File
	file_pro_flange_type_snp_api_proto_rawDesc = nil
	file_pro_flange_type_snp_api_proto_goTypes = nil
	file_pro_flange_type_snp_api_proto_depIdxs = nil
}
