// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pro/flange_type_snp_api.proto

package flange_type_snp_api

import (
	context "context"
	response_model "github.com/Alexander272/sealur_proto/api/pro/models/response_model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FlangeTypeSnpService_Get_FullMethodName           = "/flange_type_snp_api.FlangeTypeSnpService/Get"
	FlangeTypeSnpService_Create_FullMethodName        = "/flange_type_snp_api.FlangeTypeSnpService/Create"
	FlangeTypeSnpService_CreateSeveral_FullMethodName = "/flange_type_snp_api.FlangeTypeSnpService/CreateSeveral"
	FlangeTypeSnpService_Update_FullMethodName        = "/flange_type_snp_api.FlangeTypeSnpService/Update"
	FlangeTypeSnpService_Delete_FullMethodName        = "/flange_type_snp_api.FlangeTypeSnpService/Delete"
)

// FlangeTypeSnpServiceClient is the client API for FlangeTypeSnpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlangeTypeSnpServiceClient interface {
	Get(ctx context.Context, in *GetFlangeTypeSnp, opts ...grpc.CallOption) (*FlangeType, error)
	Create(ctx context.Context, in *CreateFlangeTypeSnp, opts ...grpc.CallOption) (*response_model.Response, error)
	CreateSeveral(ctx context.Context, in *CreateSeveralFlangeTypeSnp, opts ...grpc.CallOption) (*response_model.Response, error)
	Update(ctx context.Context, in *UpdateFlangeTypeSnp, opts ...grpc.CallOption) (*response_model.Response, error)
	Delete(ctx context.Context, in *DeleteFlangeTypeSnp, opts ...grpc.CallOption) (*response_model.Response, error)
}

type flangeTypeSnpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlangeTypeSnpServiceClient(cc grpc.ClientConnInterface) FlangeTypeSnpServiceClient {
	return &flangeTypeSnpServiceClient{cc}
}

func (c *flangeTypeSnpServiceClient) Get(ctx context.Context, in *GetFlangeTypeSnp, opts ...grpc.CallOption) (*FlangeType, error) {
	out := new(FlangeType)
	err := c.cc.Invoke(ctx, FlangeTypeSnpService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeTypeSnpServiceClient) Create(ctx context.Context, in *CreateFlangeTypeSnp, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, FlangeTypeSnpService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeTypeSnpServiceClient) CreateSeveral(ctx context.Context, in *CreateSeveralFlangeTypeSnp, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, FlangeTypeSnpService_CreateSeveral_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeTypeSnpServiceClient) Update(ctx context.Context, in *UpdateFlangeTypeSnp, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, FlangeTypeSnpService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeTypeSnpServiceClient) Delete(ctx context.Context, in *DeleteFlangeTypeSnp, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, FlangeTypeSnpService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlangeTypeSnpServiceServer is the server API for FlangeTypeSnpService service.
// All implementations must embed UnimplementedFlangeTypeSnpServiceServer
// for forward compatibility
type FlangeTypeSnpServiceServer interface {
	Get(context.Context, *GetFlangeTypeSnp) (*FlangeType, error)
	Create(context.Context, *CreateFlangeTypeSnp) (*response_model.Response, error)
	CreateSeveral(context.Context, *CreateSeveralFlangeTypeSnp) (*response_model.Response, error)
	Update(context.Context, *UpdateFlangeTypeSnp) (*response_model.Response, error)
	Delete(context.Context, *DeleteFlangeTypeSnp) (*response_model.Response, error)
	mustEmbedUnimplementedFlangeTypeSnpServiceServer()
}

// UnimplementedFlangeTypeSnpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlangeTypeSnpServiceServer struct {
}

func (UnimplementedFlangeTypeSnpServiceServer) Get(context.Context, *GetFlangeTypeSnp) (*FlangeType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFlangeTypeSnpServiceServer) Create(context.Context, *CreateFlangeTypeSnp) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFlangeTypeSnpServiceServer) CreateSeveral(context.Context, *CreateSeveralFlangeTypeSnp) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeveral not implemented")
}
func (UnimplementedFlangeTypeSnpServiceServer) Update(context.Context, *UpdateFlangeTypeSnp) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFlangeTypeSnpServiceServer) Delete(context.Context, *DeleteFlangeTypeSnp) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFlangeTypeSnpServiceServer) mustEmbedUnimplementedFlangeTypeSnpServiceServer() {}

// UnsafeFlangeTypeSnpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlangeTypeSnpServiceServer will
// result in compilation errors.
type UnsafeFlangeTypeSnpServiceServer interface {
	mustEmbedUnimplementedFlangeTypeSnpServiceServer()
}

func RegisterFlangeTypeSnpServiceServer(s grpc.ServiceRegistrar, srv FlangeTypeSnpServiceServer) {
	s.RegisterService(&FlangeTypeSnpService_ServiceDesc, srv)
}

func _FlangeTypeSnpService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlangeTypeSnp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeTypeSnpServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlangeTypeSnpService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeTypeSnpServiceServer).Get(ctx, req.(*GetFlangeTypeSnp))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeTypeSnpService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlangeTypeSnp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeTypeSnpServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlangeTypeSnpService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeTypeSnpServiceServer).Create(ctx, req.(*CreateFlangeTypeSnp))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeTypeSnpService_CreateSeveral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeveralFlangeTypeSnp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeTypeSnpServiceServer).CreateSeveral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlangeTypeSnpService_CreateSeveral_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeTypeSnpServiceServer).CreateSeveral(ctx, req.(*CreateSeveralFlangeTypeSnp))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeTypeSnpService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlangeTypeSnp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeTypeSnpServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlangeTypeSnpService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeTypeSnpServiceServer).Update(ctx, req.(*UpdateFlangeTypeSnp))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeTypeSnpService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlangeTypeSnp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeTypeSnpServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlangeTypeSnpService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeTypeSnpServiceServer).Delete(ctx, req.(*DeleteFlangeTypeSnp))
	}
	return interceptor(ctx, in, info, handler)
}

// FlangeTypeSnpService_ServiceDesc is the grpc.ServiceDesc for FlangeTypeSnpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlangeTypeSnpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flange_type_snp_api.FlangeTypeSnpService",
	HandlerType: (*FlangeTypeSnpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _FlangeTypeSnpService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _FlangeTypeSnpService_Create_Handler,
		},
		{
			MethodName: "CreateSeveral",
			Handler:    _FlangeTypeSnpService_CreateSeveral_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FlangeTypeSnpService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FlangeTypeSnpService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pro/flange_type_snp_api.proto",
}
