// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pro/flange_standard_api.proto

package flange_standard_api

import (
	context "context"
	response_model "github.com/Alexander272/sealur_proto/api/pro/models/response_model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlangeStandardServiceClient is the client API for FlangeStandardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlangeStandardServiceClient interface {
	GetAll(ctx context.Context, in *GetAllFlangeStandards, opts ...grpc.CallOption) (*FlangeStandards, error)
	Create(ctx context.Context, in *CreateFlangeStandard, opts ...grpc.CallOption) (*response_model.Response, error)
	CreateSeveral(ctx context.Context, in *CreateSeveralFlangeStandard, opts ...grpc.CallOption) (*response_model.Response, error)
	Update(ctx context.Context, in *UpdateFlangeStandard, opts ...grpc.CallOption) (*response_model.Response, error)
	Delete(ctx context.Context, in *DeleteFlangeStandard, opts ...grpc.CallOption) (*response_model.Response, error)
}

type flangeStandardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlangeStandardServiceClient(cc grpc.ClientConnInterface) FlangeStandardServiceClient {
	return &flangeStandardServiceClient{cc}
}

func (c *flangeStandardServiceClient) GetAll(ctx context.Context, in *GetAllFlangeStandards, opts ...grpc.CallOption) (*FlangeStandards, error) {
	out := new(FlangeStandards)
	err := c.cc.Invoke(ctx, "/flange_standard_api.FlangeStandardService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeStandardServiceClient) Create(ctx context.Context, in *CreateFlangeStandard, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/flange_standard_api.FlangeStandardService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeStandardServiceClient) CreateSeveral(ctx context.Context, in *CreateSeveralFlangeStandard, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/flange_standard_api.FlangeStandardService/CreateSeveral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeStandardServiceClient) Update(ctx context.Context, in *UpdateFlangeStandard, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/flange_standard_api.FlangeStandardService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeStandardServiceClient) Delete(ctx context.Context, in *DeleteFlangeStandard, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/flange_standard_api.FlangeStandardService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlangeStandardServiceServer is the server API for FlangeStandardService service.
// All implementations must embed UnimplementedFlangeStandardServiceServer
// for forward compatibility
type FlangeStandardServiceServer interface {
	GetAll(context.Context, *GetAllFlangeStandards) (*FlangeStandards, error)
	Create(context.Context, *CreateFlangeStandard) (*response_model.Response, error)
	CreateSeveral(context.Context, *CreateSeveralFlangeStandard) (*response_model.Response, error)
	Update(context.Context, *UpdateFlangeStandard) (*response_model.Response, error)
	Delete(context.Context, *DeleteFlangeStandard) (*response_model.Response, error)
	mustEmbedUnimplementedFlangeStandardServiceServer()
}

// UnimplementedFlangeStandardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlangeStandardServiceServer struct {
}

func (UnimplementedFlangeStandardServiceServer) GetAll(context.Context, *GetAllFlangeStandards) (*FlangeStandards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedFlangeStandardServiceServer) Create(context.Context, *CreateFlangeStandard) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFlangeStandardServiceServer) CreateSeveral(context.Context, *CreateSeveralFlangeStandard) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeveral not implemented")
}
func (UnimplementedFlangeStandardServiceServer) Update(context.Context, *UpdateFlangeStandard) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFlangeStandardServiceServer) Delete(context.Context, *DeleteFlangeStandard) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFlangeStandardServiceServer) mustEmbedUnimplementedFlangeStandardServiceServer() {}

// UnsafeFlangeStandardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlangeStandardServiceServer will
// result in compilation errors.
type UnsafeFlangeStandardServiceServer interface {
	mustEmbedUnimplementedFlangeStandardServiceServer()
}

func RegisterFlangeStandardServiceServer(s grpc.ServiceRegistrar, srv FlangeStandardServiceServer) {
	s.RegisterService(&FlangeStandardService_ServiceDesc, srv)
}

func _FlangeStandardService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFlangeStandards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeStandardServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flange_standard_api.FlangeStandardService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeStandardServiceServer).GetAll(ctx, req.(*GetAllFlangeStandards))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeStandardService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlangeStandard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeStandardServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flange_standard_api.FlangeStandardService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeStandardServiceServer).Create(ctx, req.(*CreateFlangeStandard))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeStandardService_CreateSeveral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeveralFlangeStandard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeStandardServiceServer).CreateSeveral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flange_standard_api.FlangeStandardService/CreateSeveral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeStandardServiceServer).CreateSeveral(ctx, req.(*CreateSeveralFlangeStandard))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeStandardService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlangeStandard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeStandardServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flange_standard_api.FlangeStandardService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeStandardServiceServer).Update(ctx, req.(*UpdateFlangeStandard))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeStandardService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlangeStandard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeStandardServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flange_standard_api.FlangeStandardService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeStandardServiceServer).Delete(ctx, req.(*DeleteFlangeStandard))
	}
	return interceptor(ctx, in, info, handler)
}

// FlangeStandardService_ServiceDesc is the grpc.ServiceDesc for FlangeStandardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlangeStandardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flange_standard_api.FlangeStandardService",
	HandlerType: (*FlangeStandardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _FlangeStandardService_GetAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _FlangeStandardService_Create_Handler,
		},
		{
			MethodName: "CreateSeveral",
			Handler:    _FlangeStandardService_CreateSeveral_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FlangeStandardService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FlangeStandardService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pro/flange_standard_api.proto",
}
