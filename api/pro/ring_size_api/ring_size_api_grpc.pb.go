// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pro/ring_size_api.proto

package ring_size_api

import (
	context "context"
	response_model "github.com/Alexander272/sealur_proto/api/pro/models/response_model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RingSizeService_GetAll_FullMethodName = "/ring_size_api.RingSizeService/GetAll"
	RingSizeService_Create_FullMethodName = "/ring_size_api.RingSizeService/Create"
	RingSizeService_Update_FullMethodName = "/ring_size_api.RingSizeService/Update"
	RingSizeService_Delete_FullMethodName = "/ring_size_api.RingSizeService/Delete"
)

// RingSizeServiceClient is the client API for RingSizeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RingSizeServiceClient interface {
	GetAll(ctx context.Context, in *GetRingSize, opts ...grpc.CallOption) (*RingSize, error)
	Create(ctx context.Context, in *CreateRingSize, opts ...grpc.CallOption) (*response_model.Response, error)
	Update(ctx context.Context, in *UpdateRingSize, opts ...grpc.CallOption) (*response_model.Response, error)
	Delete(ctx context.Context, in *DeleteRingSize, opts ...grpc.CallOption) (*response_model.Response, error)
}

type ringSizeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRingSizeServiceClient(cc grpc.ClientConnInterface) RingSizeServiceClient {
	return &ringSizeServiceClient{cc}
}

func (c *ringSizeServiceClient) GetAll(ctx context.Context, in *GetRingSize, opts ...grpc.CallOption) (*RingSize, error) {
	out := new(RingSize)
	err := c.cc.Invoke(ctx, RingSizeService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringSizeServiceClient) Create(ctx context.Context, in *CreateRingSize, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, RingSizeService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringSizeServiceClient) Update(ctx context.Context, in *UpdateRingSize, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, RingSizeService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringSizeServiceClient) Delete(ctx context.Context, in *DeleteRingSize, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, RingSizeService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RingSizeServiceServer is the server API for RingSizeService service.
// All implementations must embed UnimplementedRingSizeServiceServer
// for forward compatibility
type RingSizeServiceServer interface {
	GetAll(context.Context, *GetRingSize) (*RingSize, error)
	Create(context.Context, *CreateRingSize) (*response_model.Response, error)
	Update(context.Context, *UpdateRingSize) (*response_model.Response, error)
	Delete(context.Context, *DeleteRingSize) (*response_model.Response, error)
	mustEmbedUnimplementedRingSizeServiceServer()
}

// UnimplementedRingSizeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRingSizeServiceServer struct {
}

func (UnimplementedRingSizeServiceServer) GetAll(context.Context, *GetRingSize) (*RingSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedRingSizeServiceServer) Create(context.Context, *CreateRingSize) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRingSizeServiceServer) Update(context.Context, *UpdateRingSize) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRingSizeServiceServer) Delete(context.Context, *DeleteRingSize) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRingSizeServiceServer) mustEmbedUnimplementedRingSizeServiceServer() {}

// UnsafeRingSizeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RingSizeServiceServer will
// result in compilation errors.
type UnsafeRingSizeServiceServer interface {
	mustEmbedUnimplementedRingSizeServiceServer()
}

func RegisterRingSizeServiceServer(s grpc.ServiceRegistrar, srv RingSizeServiceServer) {
	s.RegisterService(&RingSizeService_ServiceDesc, srv)
}

func _RingSizeService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRingSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingSizeServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingSizeService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingSizeServiceServer).GetAll(ctx, req.(*GetRingSize))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingSizeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRingSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingSizeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingSizeService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingSizeServiceServer).Create(ctx, req.(*CreateRingSize))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingSizeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRingSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingSizeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingSizeService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingSizeServiceServer).Update(ctx, req.(*UpdateRingSize))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingSizeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRingSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingSizeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingSizeService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingSizeServiceServer).Delete(ctx, req.(*DeleteRingSize))
	}
	return interceptor(ctx, in, info, handler)
}

// RingSizeService_ServiceDesc is the grpc.ServiceDesc for RingSizeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RingSizeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ring_size_api.RingSizeService",
	HandlerType: (*RingSizeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _RingSizeService_GetAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RingSizeService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RingSizeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RingSizeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pro/ring_size_api.proto",
}
