// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.12.4
// source: pro/snp_standard_api.proto

package snp_standard_api

import (
	response_model "github.com/Alexander272/sealur_proto/api/pro/models/response_model"
	snp_standard_model "github.com/Alexander272/sealur_proto/api/pro/models/snp_standard_model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetAllSnpStandards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllSnpStandards) Reset() {
	*x = GetAllSnpStandards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pro_snp_standard_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllSnpStandards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSnpStandards) ProtoMessage() {}

func (x *GetAllSnpStandards) ProtoReflect() protoreflect.Message {
	mi := &file_pro_snp_standard_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSnpStandards.ProtoReflect.Descriptor instead.
func (*GetAllSnpStandards) Descriptor() ([]byte, []int) {
	return file_pro_snp_standard_api_proto_rawDescGZIP(), []int{0}
}

type CreateSnpStandard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StandardId       string `protobuf:"bytes,1,opt,name=standardId,proto3" json:"standardId,omitempty"`
	FlangeStandardId string `protobuf:"bytes,2,opt,name=flangeStandardId,proto3" json:"flangeStandardId,omitempty"`
	DnTitle          string `protobuf:"bytes,3,opt,name=dnTitle,proto3" json:"dnTitle,omitempty"`
	PnTitle          string `protobuf:"bytes,4,opt,name=pnTitle,proto3" json:"pnTitle,omitempty"`
	HasD2            bool   `protobuf:"varint,5,opt,name=hasD2,proto3" json:"hasD2,omitempty"`
}

func (x *CreateSnpStandard) Reset() {
	*x = CreateSnpStandard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pro_snp_standard_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSnpStandard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSnpStandard) ProtoMessage() {}

func (x *CreateSnpStandard) ProtoReflect() protoreflect.Message {
	mi := &file_pro_snp_standard_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSnpStandard.ProtoReflect.Descriptor instead.
func (*CreateSnpStandard) Descriptor() ([]byte, []int) {
	return file_pro_snp_standard_api_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSnpStandard) GetStandardId() string {
	if x != nil {
		return x.StandardId
	}
	return ""
}

func (x *CreateSnpStandard) GetFlangeStandardId() string {
	if x != nil {
		return x.FlangeStandardId
	}
	return ""
}

func (x *CreateSnpStandard) GetDnTitle() string {
	if x != nil {
		return x.DnTitle
	}
	return ""
}

func (x *CreateSnpStandard) GetPnTitle() string {
	if x != nil {
		return x.PnTitle
	}
	return ""
}

func (x *CreateSnpStandard) GetHasD2() bool {
	if x != nil {
		return x.HasD2
	}
	return false
}

type CreateSeveralSnpStandard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnpStandards []*CreateSnpStandard `protobuf:"bytes,1,rep,name=snpStandards,proto3" json:"snpStandards,omitempty"`
}

func (x *CreateSeveralSnpStandard) Reset() {
	*x = CreateSeveralSnpStandard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pro_snp_standard_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSeveralSnpStandard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSeveralSnpStandard) ProtoMessage() {}

func (x *CreateSeveralSnpStandard) ProtoReflect() protoreflect.Message {
	mi := &file_pro_snp_standard_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSeveralSnpStandard.ProtoReflect.Descriptor instead.
func (*CreateSeveralSnpStandard) Descriptor() ([]byte, []int) {
	return file_pro_snp_standard_api_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSeveralSnpStandard) GetSnpStandards() []*CreateSnpStandard {
	if x != nil {
		return x.SnpStandards
	}
	return nil
}

type UpdateSnpStandard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StandardId       string `protobuf:"bytes,2,opt,name=standardId,proto3" json:"standardId,omitempty"`
	FlangeStandardId string `protobuf:"bytes,3,opt,name=flangeStandardId,proto3" json:"flangeStandardId,omitempty"`
	DnTitle          string `protobuf:"bytes,4,opt,name=dnTitle,proto3" json:"dnTitle,omitempty"`
	PnTitle          string `protobuf:"bytes,5,opt,name=pnTitle,proto3" json:"pnTitle,omitempty"`
	HasD2            bool   `protobuf:"varint,6,opt,name=hasD2,proto3" json:"hasD2,omitempty"`
}

func (x *UpdateSnpStandard) Reset() {
	*x = UpdateSnpStandard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pro_snp_standard_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSnpStandard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSnpStandard) ProtoMessage() {}

func (x *UpdateSnpStandard) ProtoReflect() protoreflect.Message {
	mi := &file_pro_snp_standard_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSnpStandard.ProtoReflect.Descriptor instead.
func (*UpdateSnpStandard) Descriptor() ([]byte, []int) {
	return file_pro_snp_standard_api_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateSnpStandard) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSnpStandard) GetStandardId() string {
	if x != nil {
		return x.StandardId
	}
	return ""
}

func (x *UpdateSnpStandard) GetFlangeStandardId() string {
	if x != nil {
		return x.FlangeStandardId
	}
	return ""
}

func (x *UpdateSnpStandard) GetDnTitle() string {
	if x != nil {
		return x.DnTitle
	}
	return ""
}

func (x *UpdateSnpStandard) GetPnTitle() string {
	if x != nil {
		return x.PnTitle
	}
	return ""
}

func (x *UpdateSnpStandard) GetHasD2() bool {
	if x != nil {
		return x.HasD2
	}
	return false
}

type DeleteSnpStandard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSnpStandard) Reset() {
	*x = DeleteSnpStandard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pro_snp_standard_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSnpStandard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSnpStandard) ProtoMessage() {}

func (x *DeleteSnpStandard) ProtoReflect() protoreflect.Message {
	mi := &file_pro_snp_standard_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSnpStandard.ProtoReflect.Descriptor instead.
func (*DeleteSnpStandard) Descriptor() ([]byte, []int) {
	return file_pro_snp_standard_api_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteSnpStandard) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SnpStandards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnpStandards []*snp_standard_model.SnpStandard `protobuf:"bytes,1,rep,name=snpStandards,proto3" json:"snpStandards,omitempty"`
}

func (x *SnpStandards) Reset() {
	*x = SnpStandards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pro_snp_standard_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnpStandards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnpStandards) ProtoMessage() {}

func (x *SnpStandards) ProtoReflect() protoreflect.Message {
	mi := &file_pro_snp_standard_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnpStandards.ProtoReflect.Descriptor instead.
func (*SnpStandards) Descriptor() ([]byte, []int) {
	return file_pro_snp_standard_api_proto_rawDescGZIP(), []int{5}
}

func (x *SnpStandards) GetSnpStandards() []*snp_standard_model.SnpStandard {
	if x != nil {
		return x.SnpStandards
	}
	return nil
}

var File_pro_snp_standard_api_proto protoreflect.FileDescriptor

var file_pro_snp_standard_api_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x2f, 0x73, 0x6e, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x73, 0x6e,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x1a, 0x1f,
	0x70, 0x72, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x23, 0x70, 0x72, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x6e, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x6e,
	0x70, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x70, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6c, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6e, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x68, 0x61, 0x73, 0x44, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x68, 0x61, 0x73, 0x44, 0x32, 0x22, 0x63, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x6e, 0x70, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x6e, 0x70, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6e, 0x70, 0x5f, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x6e, 0x70, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x73,
	0x6e, 0x70, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x70, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6e, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6e, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x61, 0x73, 0x44, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x68, 0x61, 0x73, 0x44, 0x32, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x6e, 0x70, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x0c,
	0x53, 0x6e, 0x70, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0c,
	0x73, 0x6e, 0x70, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x6e, 0x70, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x52, 0x0c, 0x73, 0x6e, 0x70, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x32, 0x96, 0x03, 0x0a, 0x12, 0x53, 0x6e, 0x70, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x12, 0x24, 0x2e, 0x73, 0x6e, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x6e, 0x70, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x1e, 0x2e, 0x73, 0x6e, 0x70, 0x5f, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x6e, 0x70, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x2e, 0x73, 0x6e, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x70, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x1a, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x55, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x12, 0x2a, 0x2e, 0x73, 0x6e, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x53, 0x6e, 0x70, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x1a, 0x18,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x2e, 0x73, 0x6e, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x70, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x1a, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x47, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x73, 0x6e,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6e, 0x70, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x1a, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1a, 0x5a, 0x18, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x72, 0x6f, 0x2f, 0x73, 0x6e, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pro_snp_standard_api_proto_rawDescOnce sync.Once
	file_pro_snp_standard_api_proto_rawDescData = file_pro_snp_standard_api_proto_rawDesc
)

func file_pro_snp_standard_api_proto_rawDescGZIP() []byte {
	file_pro_snp_standard_api_proto_rawDescOnce.Do(func() {
		file_pro_snp_standard_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_pro_snp_standard_api_proto_rawDescData)
	})
	return file_pro_snp_standard_api_proto_rawDescData
}

var file_pro_snp_standard_api_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_pro_snp_standard_api_proto_goTypes = []interface{}{
	(*GetAllSnpStandards)(nil),             // 0: snp_standard_api.GetAllSnpStandards
	(*CreateSnpStandard)(nil),              // 1: snp_standard_api.CreateSnpStandard
	(*CreateSeveralSnpStandard)(nil),       // 2: snp_standard_api.CreateSeveralSnpStandard
	(*UpdateSnpStandard)(nil),              // 3: snp_standard_api.UpdateSnpStandard
	(*DeleteSnpStandard)(nil),              // 4: snp_standard_api.DeleteSnpStandard
	(*SnpStandards)(nil),                   // 5: snp_standard_api.SnpStandards
	(*snp_standard_model.SnpStandard)(nil), // 6: snp_standard_model.SnpStandard
	(*response_model.Response)(nil),        // 7: response_model.Response
}
var file_pro_snp_standard_api_proto_depIdxs = []int32{
	1, // 0: snp_standard_api.CreateSeveralSnpStandard.snpStandards:type_name -> snp_standard_api.CreateSnpStandard
	6, // 1: snp_standard_api.SnpStandards.snpStandards:type_name -> snp_standard_model.SnpStandard
	0, // 2: snp_standard_api.SnpStandardService.GetAll:input_type -> snp_standard_api.GetAllSnpStandards
	1, // 3: snp_standard_api.SnpStandardService.Create:input_type -> snp_standard_api.CreateSnpStandard
	2, // 4: snp_standard_api.SnpStandardService.CreateSeveral:input_type -> snp_standard_api.CreateSeveralSnpStandard
	3, // 5: snp_standard_api.SnpStandardService.Update:input_type -> snp_standard_api.UpdateSnpStandard
	4, // 6: snp_standard_api.SnpStandardService.Delete:input_type -> snp_standard_api.DeleteSnpStandard
	5, // 7: snp_standard_api.SnpStandardService.GetAll:output_type -> snp_standard_api.SnpStandards
	7, // 8: snp_standard_api.SnpStandardService.Create:output_type -> response_model.Response
	7, // 9: snp_standard_api.SnpStandardService.CreateSeveral:output_type -> response_model.Response
	7, // 10: snp_standard_api.SnpStandardService.Update:output_type -> response_model.Response
	7, // 11: snp_standard_api.SnpStandardService.Delete:output_type -> response_model.Response
	7, // [7:12] is the sub-list for method output_type
	2, // [2:7] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pro_snp_standard_api_proto_init() }
func file_pro_snp_standard_api_proto_init() {
	if File_pro_snp_standard_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pro_snp_standard_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllSnpStandards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pro_snp_standard_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSnpStandard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pro_snp_standard_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSeveralSnpStandard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pro_snp_standard_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSnpStandard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pro_snp_standard_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSnpStandard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pro_snp_standard_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnpStandards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pro_snp_standard_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pro_snp_standard_api_proto_goTypes,
		DependencyIndexes: file_pro_snp_standard_api_proto_depIdxs,
		MessageInfos:      file_pro_snp_standard_api_proto_msgTypes,
	}.Build()
	File_pro_snp_standard_api_proto = out.File
	file_pro_snp_standard_api_proto_rawDesc = nil
	file_pro_snp_standard_api_proto_goTypes = nil
	file_pro_snp_standard_api_proto_depIdxs = nil
}
