// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pro/snp_standard_api.proto

package snp_standard_api

import (
	context "context"
	response_model "github.com/Alexander272/sealur_proto/api/pro/models/response_model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SnpStandardServiceClient is the client API for SnpStandardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnpStandardServiceClient interface {
	GetAll(ctx context.Context, in *GetAllSnpStandards, opts ...grpc.CallOption) (*SnpStandards, error)
	Create(ctx context.Context, in *CreateSnpStandard, opts ...grpc.CallOption) (*response_model.Response, error)
	CreateSeveral(ctx context.Context, in *CreateSeveralSnpStandard, opts ...grpc.CallOption) (*response_model.Response, error)
	Update(ctx context.Context, in *UpdateSnpStandard, opts ...grpc.CallOption) (*response_model.Response, error)
	Delete(ctx context.Context, in *DeleteSnpStandard, opts ...grpc.CallOption) (*response_model.Response, error)
}

type snpStandardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnpStandardServiceClient(cc grpc.ClientConnInterface) SnpStandardServiceClient {
	return &snpStandardServiceClient{cc}
}

func (c *snpStandardServiceClient) GetAll(ctx context.Context, in *GetAllSnpStandards, opts ...grpc.CallOption) (*SnpStandards, error) {
	out := new(SnpStandards)
	err := c.cc.Invoke(ctx, "/snp_standard_api.SnpStandardService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snpStandardServiceClient) Create(ctx context.Context, in *CreateSnpStandard, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/snp_standard_api.SnpStandardService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snpStandardServiceClient) CreateSeveral(ctx context.Context, in *CreateSeveralSnpStandard, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/snp_standard_api.SnpStandardService/CreateSeveral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snpStandardServiceClient) Update(ctx context.Context, in *UpdateSnpStandard, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/snp_standard_api.SnpStandardService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snpStandardServiceClient) Delete(ctx context.Context, in *DeleteSnpStandard, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/snp_standard_api.SnpStandardService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnpStandardServiceServer is the server API for SnpStandardService service.
// All implementations must embed UnimplementedSnpStandardServiceServer
// for forward compatibility
type SnpStandardServiceServer interface {
	GetAll(context.Context, *GetAllSnpStandards) (*SnpStandards, error)
	Create(context.Context, *CreateSnpStandard) (*response_model.Response, error)
	CreateSeveral(context.Context, *CreateSeveralSnpStandard) (*response_model.Response, error)
	Update(context.Context, *UpdateSnpStandard) (*response_model.Response, error)
	Delete(context.Context, *DeleteSnpStandard) (*response_model.Response, error)
	mustEmbedUnimplementedSnpStandardServiceServer()
}

// UnimplementedSnpStandardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSnpStandardServiceServer struct {
}

func (UnimplementedSnpStandardServiceServer) GetAll(context.Context, *GetAllSnpStandards) (*SnpStandards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedSnpStandardServiceServer) Create(context.Context, *CreateSnpStandard) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSnpStandardServiceServer) CreateSeveral(context.Context, *CreateSeveralSnpStandard) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeveral not implemented")
}
func (UnimplementedSnpStandardServiceServer) Update(context.Context, *UpdateSnpStandard) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSnpStandardServiceServer) Delete(context.Context, *DeleteSnpStandard) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSnpStandardServiceServer) mustEmbedUnimplementedSnpStandardServiceServer() {}

// UnsafeSnpStandardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnpStandardServiceServer will
// result in compilation errors.
type UnsafeSnpStandardServiceServer interface {
	mustEmbedUnimplementedSnpStandardServiceServer()
}

func RegisterSnpStandardServiceServer(s grpc.ServiceRegistrar, srv SnpStandardServiceServer) {
	s.RegisterService(&SnpStandardService_ServiceDesc, srv)
}

func _SnpStandardService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSnpStandards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnpStandardServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snp_standard_api.SnpStandardService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnpStandardServiceServer).GetAll(ctx, req.(*GetAllSnpStandards))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnpStandardService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnpStandard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnpStandardServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snp_standard_api.SnpStandardService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnpStandardServiceServer).Create(ctx, req.(*CreateSnpStandard))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnpStandardService_CreateSeveral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeveralSnpStandard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnpStandardServiceServer).CreateSeveral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snp_standard_api.SnpStandardService/CreateSeveral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnpStandardServiceServer).CreateSeveral(ctx, req.(*CreateSeveralSnpStandard))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnpStandardService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSnpStandard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnpStandardServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snp_standard_api.SnpStandardService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnpStandardServiceServer).Update(ctx, req.(*UpdateSnpStandard))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnpStandardService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSnpStandard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnpStandardServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snp_standard_api.SnpStandardService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnpStandardServiceServer).Delete(ctx, req.(*DeleteSnpStandard))
	}
	return interceptor(ctx, in, info, handler)
}

// SnpStandardService_ServiceDesc is the grpc.ServiceDesc for SnpStandardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnpStandardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snp_standard_api.SnpStandardService",
	HandlerType: (*SnpStandardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _SnpStandardService_GetAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SnpStandardService_Create_Handler,
		},
		{
			MethodName: "CreateSeveral",
			Handler:    _SnpStandardService_CreateSeveral_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SnpStandardService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SnpStandardService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pro/snp_standard_api.proto",
}
