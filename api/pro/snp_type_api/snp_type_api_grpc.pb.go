// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pro/snp_type_api.proto

package snp_type_api

import (
	context "context"
	response_model "github.com/Alexander272/sealur_proto/api/pro/models/response_model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SnpTypeService_Get_FullMethodName           = "/snp_type_api.SnpTypeService/Get"
	SnpTypeService_Create_FullMethodName        = "/snp_type_api.SnpTypeService/Create"
	SnpTypeService_CreateSeveral_FullMethodName = "/snp_type_api.SnpTypeService/CreateSeveral"
	SnpTypeService_Update_FullMethodName        = "/snp_type_api.SnpTypeService/Update"
	SnpTypeService_Delete_FullMethodName        = "/snp_type_api.SnpTypeService/Delete"
)

// SnpTypeServiceClient is the client API for SnpTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnpTypeServiceClient interface {
	Get(ctx context.Context, in *GetSnpTypes, opts ...grpc.CallOption) (*SnpTypes, error)
	Create(ctx context.Context, in *CreateSnpType, opts ...grpc.CallOption) (*response_model.Response, error)
	CreateSeveral(ctx context.Context, in *CreateSeveralSnpType, opts ...grpc.CallOption) (*response_model.Response, error)
	Update(ctx context.Context, in *UpdateSnpType, opts ...grpc.CallOption) (*response_model.Response, error)
	Delete(ctx context.Context, in *DeleteSnpType, opts ...grpc.CallOption) (*response_model.Response, error)
}

type snpTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnpTypeServiceClient(cc grpc.ClientConnInterface) SnpTypeServiceClient {
	return &snpTypeServiceClient{cc}
}

func (c *snpTypeServiceClient) Get(ctx context.Context, in *GetSnpTypes, opts ...grpc.CallOption) (*SnpTypes, error) {
	out := new(SnpTypes)
	err := c.cc.Invoke(ctx, SnpTypeService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snpTypeServiceClient) Create(ctx context.Context, in *CreateSnpType, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, SnpTypeService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snpTypeServiceClient) CreateSeveral(ctx context.Context, in *CreateSeveralSnpType, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, SnpTypeService_CreateSeveral_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snpTypeServiceClient) Update(ctx context.Context, in *UpdateSnpType, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, SnpTypeService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snpTypeServiceClient) Delete(ctx context.Context, in *DeleteSnpType, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, SnpTypeService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnpTypeServiceServer is the server API for SnpTypeService service.
// All implementations must embed UnimplementedSnpTypeServiceServer
// for forward compatibility
type SnpTypeServiceServer interface {
	Get(context.Context, *GetSnpTypes) (*SnpTypes, error)
	Create(context.Context, *CreateSnpType) (*response_model.Response, error)
	CreateSeveral(context.Context, *CreateSeveralSnpType) (*response_model.Response, error)
	Update(context.Context, *UpdateSnpType) (*response_model.Response, error)
	Delete(context.Context, *DeleteSnpType) (*response_model.Response, error)
	mustEmbedUnimplementedSnpTypeServiceServer()
}

// UnimplementedSnpTypeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSnpTypeServiceServer struct {
}

func (UnimplementedSnpTypeServiceServer) Get(context.Context, *GetSnpTypes) (*SnpTypes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSnpTypeServiceServer) Create(context.Context, *CreateSnpType) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSnpTypeServiceServer) CreateSeveral(context.Context, *CreateSeveralSnpType) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeveral not implemented")
}
func (UnimplementedSnpTypeServiceServer) Update(context.Context, *UpdateSnpType) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSnpTypeServiceServer) Delete(context.Context, *DeleteSnpType) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSnpTypeServiceServer) mustEmbedUnimplementedSnpTypeServiceServer() {}

// UnsafeSnpTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnpTypeServiceServer will
// result in compilation errors.
type UnsafeSnpTypeServiceServer interface {
	mustEmbedUnimplementedSnpTypeServiceServer()
}

func RegisterSnpTypeServiceServer(s grpc.ServiceRegistrar, srv SnpTypeServiceServer) {
	s.RegisterService(&SnpTypeService_ServiceDesc, srv)
}

func _SnpTypeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSnpTypes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnpTypeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnpTypeService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnpTypeServiceServer).Get(ctx, req.(*GetSnpTypes))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnpTypeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnpType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnpTypeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnpTypeService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnpTypeServiceServer).Create(ctx, req.(*CreateSnpType))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnpTypeService_CreateSeveral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeveralSnpType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnpTypeServiceServer).CreateSeveral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnpTypeService_CreateSeveral_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnpTypeServiceServer).CreateSeveral(ctx, req.(*CreateSeveralSnpType))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnpTypeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSnpType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnpTypeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnpTypeService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnpTypeServiceServer).Update(ctx, req.(*UpdateSnpType))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnpTypeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSnpType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnpTypeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnpTypeService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnpTypeServiceServer).Delete(ctx, req.(*DeleteSnpType))
	}
	return interceptor(ctx, in, info, handler)
}

// SnpTypeService_ServiceDesc is the grpc.ServiceDesc for SnpTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnpTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snp_type_api.SnpTypeService",
	HandlerType: (*SnpTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _SnpTypeService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SnpTypeService_Create_Handler,
		},
		{
			MethodName: "CreateSeveral",
			Handler:    _SnpTypeService_CreateSeveral_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SnpTypeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SnpTypeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pro/snp_type_api.proto",
}
