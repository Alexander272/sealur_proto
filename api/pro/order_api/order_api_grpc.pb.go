// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pro/order_api.proto

package order_api

import (
	context "context"
	analytic_model "github.com/Alexander272/sealur_proto/api/pro/models/analytic_model"
	order_model "github.com/Alexander272/sealur_proto/api/pro/models/order_model"
	response_model "github.com/Alexander272/sealur_proto/api/pro/models/response_model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderService_Get_FullMethodName             = "/order_api.OrderService/Get"
	OrderService_GetCurrent_FullMethodName      = "/order_api.OrderService/GetCurrent"
	OrderService_GetAll_FullMethodName          = "/order_api.OrderService/GetAll"
	OrderService_GetFile_FullMethodName         = "/order_api.OrderService/GetFile"
	OrderService_GetOpen_FullMethodName         = "/order_api.OrderService/GetOpen"
	OrderService_GetLast_FullMethodName         = "/order_api.OrderService/GetLast"
	OrderService_GetByNumber_FullMethodName     = "/order_api.OrderService/GetByNumber"
	OrderService_GetAllOpen_FullMethodName      = "/order_api.OrderService/GetAllOpen"
	OrderService_GetAnalytics_FullMethodName    = "/order_api.OrderService/GetAnalytics"
	OrderService_GetOrderCount_FullMethodName   = "/order_api.OrderService/GetOrderCount"
	OrderService_GetBidAnalytics_FullMethodName = "/order_api.OrderService/GetBidAnalytics"
	OrderService_Save_FullMethodName            = "/order_api.OrderService/Save"
	OrderService_Create_FullMethodName          = "/order_api.OrderService/Create"
	OrderService_Copy_FullMethodName            = "/order_api.OrderService/Copy"
	OrderService_SetInfo_FullMethodName         = "/order_api.OrderService/SetInfo"
	OrderService_SetStatus_FullMethodName       = "/order_api.OrderService/SetStatus"
	OrderService_SetManager_FullMethodName      = "/order_api.OrderService/SetManager"
	OrderService_Delete_FullMethodName          = "/order_api.OrderService/Delete"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	Get(ctx context.Context, in *GetOrder, opts ...grpc.CallOption) (*Order, error)
	GetCurrent(ctx context.Context, in *GetCurrentOrder, opts ...grpc.CallOption) (*order_model.CurrentOrder, error)
	GetAll(ctx context.Context, in *GetAllOrders, opts ...grpc.CallOption) (*Orders, error)
	GetFile(ctx context.Context, in *GetOrder, opts ...grpc.CallOption) (OrderService_GetFileClient, error)
	GetOpen(ctx context.Context, in *GetManagerOrders, opts ...grpc.CallOption) (*ManagerOrders, error)
	GetLast(ctx context.Context, in *GetLastOrders, opts ...grpc.CallOption) (*OrderAnalytics, error)
	GetByNumber(ctx context.Context, in *GetOrderByNumber, opts ...grpc.CallOption) (*analytic_model.FullOrder, error)
	GetAllOpen(ctx context.Context, in *GetAllManagerOrders, opts ...grpc.CallOption) (*ManagerOrders, error)
	GetAnalytics(ctx context.Context, in *GetOrderAnalytics, opts ...grpc.CallOption) (*Analytics, error)
	GetOrderCount(ctx context.Context, in *GetOrderCountAnalytics, opts ...grpc.CallOption) (*OrderCount, error)
	GetBidAnalytics(ctx context.Context, in *GetFullOrderAnalytics, opts ...grpc.CallOption) (*OrderAnalytics, error)
	Save(ctx context.Context, in *CreateOrder, opts ...grpc.CallOption) (*OrderNumber, error)
	Create(ctx context.Context, in *CreateOrder, opts ...grpc.CallOption) (*response_model.IdResponse, error)
	Copy(ctx context.Context, in *CopyOrder, opts ...grpc.CallOption) (*response_model.Response, error)
	SetInfo(ctx context.Context, in *Info, opts ...grpc.CallOption) (*response_model.Response, error)
	SetStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*response_model.Response, error)
	SetManager(ctx context.Context, in *Manager, opts ...grpc.CallOption) (*response_model.Response, error)
	Delete(ctx context.Context, in *DeleteOrder, opts ...grpc.CallOption) (*response_model.Response, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) Get(ctx context.Context, in *GetOrder, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, OrderService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetCurrent(ctx context.Context, in *GetCurrentOrder, opts ...grpc.CallOption) (*order_model.CurrentOrder, error) {
	out := new(order_model.CurrentOrder)
	err := c.cc.Invoke(ctx, OrderService_GetCurrent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAll(ctx context.Context, in *GetAllOrders, opts ...grpc.CallOption) (*Orders, error) {
	out := new(Orders)
	err := c.cc.Invoke(ctx, OrderService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetFile(ctx context.Context, in *GetOrder, opts ...grpc.CallOption) (OrderService_GetFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderService_ServiceDesc.Streams[0], OrderService_GetFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderService_GetFileClient interface {
	Recv() (*response_model.FileResponse, error)
	grpc.ClientStream
}

type orderServiceGetFileClient struct {
	grpc.ClientStream
}

func (x *orderServiceGetFileClient) Recv() (*response_model.FileResponse, error) {
	m := new(response_model.FileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderServiceClient) GetOpen(ctx context.Context, in *GetManagerOrders, opts ...grpc.CallOption) (*ManagerOrders, error) {
	out := new(ManagerOrders)
	err := c.cc.Invoke(ctx, OrderService_GetOpen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetLast(ctx context.Context, in *GetLastOrders, opts ...grpc.CallOption) (*OrderAnalytics, error) {
	out := new(OrderAnalytics)
	err := c.cc.Invoke(ctx, OrderService_GetLast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetByNumber(ctx context.Context, in *GetOrderByNumber, opts ...grpc.CallOption) (*analytic_model.FullOrder, error) {
	out := new(analytic_model.FullOrder)
	err := c.cc.Invoke(ctx, OrderService_GetByNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAllOpen(ctx context.Context, in *GetAllManagerOrders, opts ...grpc.CallOption) (*ManagerOrders, error) {
	out := new(ManagerOrders)
	err := c.cc.Invoke(ctx, OrderService_GetAllOpen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAnalytics(ctx context.Context, in *GetOrderAnalytics, opts ...grpc.CallOption) (*Analytics, error) {
	out := new(Analytics)
	err := c.cc.Invoke(ctx, OrderService_GetAnalytics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderCount(ctx context.Context, in *GetOrderCountAnalytics, opts ...grpc.CallOption) (*OrderCount, error) {
	out := new(OrderCount)
	err := c.cc.Invoke(ctx, OrderService_GetOrderCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetBidAnalytics(ctx context.Context, in *GetFullOrderAnalytics, opts ...grpc.CallOption) (*OrderAnalytics, error) {
	out := new(OrderAnalytics)
	err := c.cc.Invoke(ctx, OrderService_GetBidAnalytics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) Save(ctx context.Context, in *CreateOrder, opts ...grpc.CallOption) (*OrderNumber, error) {
	out := new(OrderNumber)
	err := c.cc.Invoke(ctx, OrderService_Save_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) Create(ctx context.Context, in *CreateOrder, opts ...grpc.CallOption) (*response_model.IdResponse, error) {
	out := new(response_model.IdResponse)
	err := c.cc.Invoke(ctx, OrderService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) Copy(ctx context.Context, in *CopyOrder, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, OrderService_Copy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) SetInfo(ctx context.Context, in *Info, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, OrderService_SetInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) SetStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, OrderService_SetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) SetManager(ctx context.Context, in *Manager, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, OrderService_SetManager_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) Delete(ctx context.Context, in *DeleteOrder, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, OrderService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	Get(context.Context, *GetOrder) (*Order, error)
	GetCurrent(context.Context, *GetCurrentOrder) (*order_model.CurrentOrder, error)
	GetAll(context.Context, *GetAllOrders) (*Orders, error)
	GetFile(*GetOrder, OrderService_GetFileServer) error
	GetOpen(context.Context, *GetManagerOrders) (*ManagerOrders, error)
	GetLast(context.Context, *GetLastOrders) (*OrderAnalytics, error)
	GetByNumber(context.Context, *GetOrderByNumber) (*analytic_model.FullOrder, error)
	GetAllOpen(context.Context, *GetAllManagerOrders) (*ManagerOrders, error)
	GetAnalytics(context.Context, *GetOrderAnalytics) (*Analytics, error)
	GetOrderCount(context.Context, *GetOrderCountAnalytics) (*OrderCount, error)
	GetBidAnalytics(context.Context, *GetFullOrderAnalytics) (*OrderAnalytics, error)
	Save(context.Context, *CreateOrder) (*OrderNumber, error)
	Create(context.Context, *CreateOrder) (*response_model.IdResponse, error)
	Copy(context.Context, *CopyOrder) (*response_model.Response, error)
	SetInfo(context.Context, *Info) (*response_model.Response, error)
	SetStatus(context.Context, *Status) (*response_model.Response, error)
	SetManager(context.Context, *Manager) (*response_model.Response, error)
	Delete(context.Context, *DeleteOrder) (*response_model.Response, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) Get(context.Context, *GetOrder) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedOrderServiceServer) GetCurrent(context.Context, *GetCurrentOrder) (*order_model.CurrentOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrent not implemented")
}
func (UnimplementedOrderServiceServer) GetAll(context.Context, *GetAllOrders) (*Orders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedOrderServiceServer) GetFile(*GetOrder, OrderService_GetFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedOrderServiceServer) GetOpen(context.Context, *GetManagerOrders) (*ManagerOrders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpen not implemented")
}
func (UnimplementedOrderServiceServer) GetLast(context.Context, *GetLastOrders) (*OrderAnalytics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLast not implemented")
}
func (UnimplementedOrderServiceServer) GetByNumber(context.Context, *GetOrderByNumber) (*analytic_model.FullOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByNumber not implemented")
}
func (UnimplementedOrderServiceServer) GetAllOpen(context.Context, *GetAllManagerOrders) (*ManagerOrders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOpen not implemented")
}
func (UnimplementedOrderServiceServer) GetAnalytics(context.Context, *GetOrderAnalytics) (*Analytics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalytics not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderCount(context.Context, *GetOrderCountAnalytics) (*OrderCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderCount not implemented")
}
func (UnimplementedOrderServiceServer) GetBidAnalytics(context.Context, *GetFullOrderAnalytics) (*OrderAnalytics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBidAnalytics not implemented")
}
func (UnimplementedOrderServiceServer) Save(context.Context, *CreateOrder) (*OrderNumber, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedOrderServiceServer) Create(context.Context, *CreateOrder) (*response_model.IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrderServiceServer) Copy(context.Context, *CopyOrder) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Copy not implemented")
}
func (UnimplementedOrderServiceServer) SetInfo(context.Context, *Info) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInfo not implemented")
}
func (UnimplementedOrderServiceServer) SetStatus(context.Context, *Status) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatus not implemented")
}
func (UnimplementedOrderServiceServer) SetManager(context.Context, *Manager) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetManager not implemented")
}
func (UnimplementedOrderServiceServer) Delete(context.Context, *DeleteOrder) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Get(ctx, req.(*GetOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetCurrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetCurrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetCurrent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetCurrent(ctx, req.(*GetCurrentOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetAll(ctx, req.(*GetAllOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOrder)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderServiceServer).GetFile(m, &orderServiceGetFileServer{stream})
}

type OrderService_GetFileServer interface {
	Send(*response_model.FileResponse) error
	grpc.ServerStream
}

type orderServiceGetFileServer struct {
	grpc.ServerStream
}

func (x *orderServiceGetFileServer) Send(m *response_model.FileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OrderService_GetOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManagerOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOpen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOpen(ctx, req.(*GetManagerOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetLast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetLast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetLast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetLast(ctx, req.(*GetLastOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetByNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetByNumber(ctx, req.(*GetOrderByNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAllOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllManagerOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetAllOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetAllOpen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetAllOpen(ctx, req.(*GetAllManagerOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderAnalytics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetAnalytics(ctx, req.(*GetOrderAnalytics))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderCountAnalytics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrderCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderCount(ctx, req.(*GetOrderCountAnalytics))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetBidAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullOrderAnalytics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetBidAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetBidAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetBidAnalytics(ctx, req.(*GetFullOrderAnalytics))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Save(ctx, req.(*CreateOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Create(ctx, req.(*CreateOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_Copy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Copy(ctx, req.(*CopyOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_SetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Info)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).SetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_SetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).SetInfo(ctx, req.(*Info))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Status)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_SetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).SetStatus(ctx, req.(*Status))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_SetManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Manager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).SetManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_SetManager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).SetManager(ctx, req.(*Manager))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Delete(ctx, req.(*DeleteOrder))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order_api.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _OrderService_Get_Handler,
		},
		{
			MethodName: "GetCurrent",
			Handler:    _OrderService_GetCurrent_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _OrderService_GetAll_Handler,
		},
		{
			MethodName: "GetOpen",
			Handler:    _OrderService_GetOpen_Handler,
		},
		{
			MethodName: "GetLast",
			Handler:    _OrderService_GetLast_Handler,
		},
		{
			MethodName: "GetByNumber",
			Handler:    _OrderService_GetByNumber_Handler,
		},
		{
			MethodName: "GetAllOpen",
			Handler:    _OrderService_GetAllOpen_Handler,
		},
		{
			MethodName: "GetAnalytics",
			Handler:    _OrderService_GetAnalytics_Handler,
		},
		{
			MethodName: "GetOrderCount",
			Handler:    _OrderService_GetOrderCount_Handler,
		},
		{
			MethodName: "GetBidAnalytics",
			Handler:    _OrderService_GetBidAnalytics_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _OrderService_Save_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _OrderService_Create_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _OrderService_Copy_Handler,
		},
		{
			MethodName: "SetInfo",
			Handler:    _OrderService_SetInfo_Handler,
		},
		{
			MethodName: "SetStatus",
			Handler:    _OrderService_SetStatus_Handler,
		},
		{
			MethodName: "SetManager",
			Handler:    _OrderService_SetManager_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OrderService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFile",
			Handler:       _OrderService_GetFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pro/order_api.proto",
}
