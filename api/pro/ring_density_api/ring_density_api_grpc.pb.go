// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pro/ring_density_api.proto

package ring_density_api

import (
	context "context"
	response_model "github.com/Alexander272/sealur_proto/api/pro/models/response_model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RingDensityService_GetAll_FullMethodName = "/ring_density_api.RingDensityService/GetAll"
	RingDensityService_Create_FullMethodName = "/ring_density_api.RingDensityService/Create"
	RingDensityService_Update_FullMethodName = "/ring_density_api.RingDensityService/Update"
	RingDensityService_Delete_FullMethodName = "/ring_density_api.RingDensityService/Delete"
)

// RingDensityServiceClient is the client API for RingDensityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RingDensityServiceClient interface {
	GetAll(ctx context.Context, in *GetRingDensity, opts ...grpc.CallOption) (*RingDensity, error)
	Create(ctx context.Context, in *CreateRingDensity, opts ...grpc.CallOption) (*response_model.Response, error)
	Update(ctx context.Context, in *UpdateRingDensity, opts ...grpc.CallOption) (*response_model.Response, error)
	Delete(ctx context.Context, in *DeleteRingDensity, opts ...grpc.CallOption) (*response_model.Response, error)
}

type ringDensityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRingDensityServiceClient(cc grpc.ClientConnInterface) RingDensityServiceClient {
	return &ringDensityServiceClient{cc}
}

func (c *ringDensityServiceClient) GetAll(ctx context.Context, in *GetRingDensity, opts ...grpc.CallOption) (*RingDensity, error) {
	out := new(RingDensity)
	err := c.cc.Invoke(ctx, RingDensityService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringDensityServiceClient) Create(ctx context.Context, in *CreateRingDensity, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, RingDensityService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringDensityServiceClient) Update(ctx context.Context, in *UpdateRingDensity, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, RingDensityService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringDensityServiceClient) Delete(ctx context.Context, in *DeleteRingDensity, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, RingDensityService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RingDensityServiceServer is the server API for RingDensityService service.
// All implementations must embed UnimplementedRingDensityServiceServer
// for forward compatibility
type RingDensityServiceServer interface {
	GetAll(context.Context, *GetRingDensity) (*RingDensity, error)
	Create(context.Context, *CreateRingDensity) (*response_model.Response, error)
	Update(context.Context, *UpdateRingDensity) (*response_model.Response, error)
	Delete(context.Context, *DeleteRingDensity) (*response_model.Response, error)
	mustEmbedUnimplementedRingDensityServiceServer()
}

// UnimplementedRingDensityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRingDensityServiceServer struct {
}

func (UnimplementedRingDensityServiceServer) GetAll(context.Context, *GetRingDensity) (*RingDensity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedRingDensityServiceServer) Create(context.Context, *CreateRingDensity) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRingDensityServiceServer) Update(context.Context, *UpdateRingDensity) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRingDensityServiceServer) Delete(context.Context, *DeleteRingDensity) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRingDensityServiceServer) mustEmbedUnimplementedRingDensityServiceServer() {}

// UnsafeRingDensityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RingDensityServiceServer will
// result in compilation errors.
type UnsafeRingDensityServiceServer interface {
	mustEmbedUnimplementedRingDensityServiceServer()
}

func RegisterRingDensityServiceServer(s grpc.ServiceRegistrar, srv RingDensityServiceServer) {
	s.RegisterService(&RingDensityService_ServiceDesc, srv)
}

func _RingDensityService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRingDensity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingDensityServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingDensityService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingDensityServiceServer).GetAll(ctx, req.(*GetRingDensity))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingDensityService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRingDensity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingDensityServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingDensityService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingDensityServiceServer).Create(ctx, req.(*CreateRingDensity))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingDensityService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRingDensity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingDensityServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingDensityService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingDensityServiceServer).Update(ctx, req.(*UpdateRingDensity))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingDensityService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRingDensity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingDensityServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingDensityService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingDensityServiceServer).Delete(ctx, req.(*DeleteRingDensity))
	}
	return interceptor(ctx, in, info, handler)
}

// RingDensityService_ServiceDesc is the grpc.ServiceDesc for RingDensityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RingDensityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ring_density_api.RingDensityService",
	HandlerType: (*RingDensityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _RingDensityService_GetAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RingDensityService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RingDensityService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RingDensityService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pro/ring_density_api.proto",
}
