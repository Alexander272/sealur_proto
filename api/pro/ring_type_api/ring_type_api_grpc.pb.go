// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pro/ring_type_api.proto

package ring_type_api

import (
	context "context"
	response_model "github.com/Alexander272/sealur_proto/api/pro/models/response_model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RingTypeService_GetAll_FullMethodName = "/ring_type_api.RingTypeService/GetAll"
	RingTypeService_Create_FullMethodName = "/ring_type_api.RingTypeService/Create"
	RingTypeService_Update_FullMethodName = "/ring_type_api.RingTypeService/Update"
	RingTypeService_Delete_FullMethodName = "/ring_type_api.RingTypeService/Delete"
)

// RingTypeServiceClient is the client API for RingTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RingTypeServiceClient interface {
	GetAll(ctx context.Context, in *GetRingTypes, opts ...grpc.CallOption) (*RingTypes, error)
	Create(ctx context.Context, in *CreateRingType, opts ...grpc.CallOption) (*response_model.Response, error)
	Update(ctx context.Context, in *UpdateRingType, opts ...grpc.CallOption) (*response_model.Response, error)
	Delete(ctx context.Context, in *DeleteRingType, opts ...grpc.CallOption) (*response_model.Response, error)
}

type ringTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRingTypeServiceClient(cc grpc.ClientConnInterface) RingTypeServiceClient {
	return &ringTypeServiceClient{cc}
}

func (c *ringTypeServiceClient) GetAll(ctx context.Context, in *GetRingTypes, opts ...grpc.CallOption) (*RingTypes, error) {
	out := new(RingTypes)
	err := c.cc.Invoke(ctx, RingTypeService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringTypeServiceClient) Create(ctx context.Context, in *CreateRingType, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, RingTypeService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringTypeServiceClient) Update(ctx context.Context, in *UpdateRingType, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, RingTypeService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringTypeServiceClient) Delete(ctx context.Context, in *DeleteRingType, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, RingTypeService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RingTypeServiceServer is the server API for RingTypeService service.
// All implementations must embed UnimplementedRingTypeServiceServer
// for forward compatibility
type RingTypeServiceServer interface {
	GetAll(context.Context, *GetRingTypes) (*RingTypes, error)
	Create(context.Context, *CreateRingType) (*response_model.Response, error)
	Update(context.Context, *UpdateRingType) (*response_model.Response, error)
	Delete(context.Context, *DeleteRingType) (*response_model.Response, error)
	mustEmbedUnimplementedRingTypeServiceServer()
}

// UnimplementedRingTypeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRingTypeServiceServer struct {
}

func (UnimplementedRingTypeServiceServer) GetAll(context.Context, *GetRingTypes) (*RingTypes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedRingTypeServiceServer) Create(context.Context, *CreateRingType) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRingTypeServiceServer) Update(context.Context, *UpdateRingType) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRingTypeServiceServer) Delete(context.Context, *DeleteRingType) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRingTypeServiceServer) mustEmbedUnimplementedRingTypeServiceServer() {}

// UnsafeRingTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RingTypeServiceServer will
// result in compilation errors.
type UnsafeRingTypeServiceServer interface {
	mustEmbedUnimplementedRingTypeServiceServer()
}

func RegisterRingTypeServiceServer(s grpc.ServiceRegistrar, srv RingTypeServiceServer) {
	s.RegisterService(&RingTypeService_ServiceDesc, srv)
}

func _RingTypeService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRingTypes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingTypeServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingTypeService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingTypeServiceServer).GetAll(ctx, req.(*GetRingTypes))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingTypeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRingType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingTypeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingTypeService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingTypeServiceServer).Create(ctx, req.(*CreateRingType))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingTypeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRingType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingTypeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingTypeService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingTypeServiceServer).Update(ctx, req.(*UpdateRingType))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingTypeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRingType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingTypeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingTypeService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingTypeServiceServer).Delete(ctx, req.(*DeleteRingType))
	}
	return interceptor(ctx, in, info, handler)
}

// RingTypeService_ServiceDesc is the grpc.ServiceDesc for RingTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RingTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ring_type_api.RingTypeService",
	HandlerType: (*RingTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _RingTypeService_GetAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RingTypeService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RingTypeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RingTypeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pro/ring_type_api.proto",
}
