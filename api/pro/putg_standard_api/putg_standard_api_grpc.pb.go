// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pro/putg_standard_api.proto

package putg_standard_api

import (
	context "context"
	response_model "github.com/Alexander272/sealur_proto/api/pro/models/response_model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PutgStandardServiceClient is the client API for PutgStandardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PutgStandardServiceClient interface {
	Get(ctx context.Context, in *GetPutgStandard, opts ...grpc.CallOption) (*PutgStandard, error)
	Create(ctx context.Context, in *CreatePutgStandard, opts ...grpc.CallOption) (*response_model.Response, error)
	Update(ctx context.Context, in *UpdatePutgStandard, opts ...grpc.CallOption) (*response_model.Response, error)
	Delete(ctx context.Context, in *DeletePutgStandard, opts ...grpc.CallOption) (*response_model.Response, error)
}

type putgStandardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPutgStandardServiceClient(cc grpc.ClientConnInterface) PutgStandardServiceClient {
	return &putgStandardServiceClient{cc}
}

func (c *putgStandardServiceClient) Get(ctx context.Context, in *GetPutgStandard, opts ...grpc.CallOption) (*PutgStandard, error) {
	out := new(PutgStandard)
	err := c.cc.Invoke(ctx, "/putg_standard_api.PutgStandardService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *putgStandardServiceClient) Create(ctx context.Context, in *CreatePutgStandard, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/putg_standard_api.PutgStandardService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *putgStandardServiceClient) Update(ctx context.Context, in *UpdatePutgStandard, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/putg_standard_api.PutgStandardService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *putgStandardServiceClient) Delete(ctx context.Context, in *DeletePutgStandard, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/putg_standard_api.PutgStandardService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PutgStandardServiceServer is the server API for PutgStandardService service.
// All implementations must embed UnimplementedPutgStandardServiceServer
// for forward compatibility
type PutgStandardServiceServer interface {
	Get(context.Context, *GetPutgStandard) (*PutgStandard, error)
	Create(context.Context, *CreatePutgStandard) (*response_model.Response, error)
	Update(context.Context, *UpdatePutgStandard) (*response_model.Response, error)
	Delete(context.Context, *DeletePutgStandard) (*response_model.Response, error)
	mustEmbedUnimplementedPutgStandardServiceServer()
}

// UnimplementedPutgStandardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPutgStandardServiceServer struct {
}

func (UnimplementedPutgStandardServiceServer) Get(context.Context, *GetPutgStandard) (*PutgStandard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPutgStandardServiceServer) Create(context.Context, *CreatePutgStandard) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPutgStandardServiceServer) Update(context.Context, *UpdatePutgStandard) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPutgStandardServiceServer) Delete(context.Context, *DeletePutgStandard) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPutgStandardServiceServer) mustEmbedUnimplementedPutgStandardServiceServer() {}

// UnsafePutgStandardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PutgStandardServiceServer will
// result in compilation errors.
type UnsafePutgStandardServiceServer interface {
	mustEmbedUnimplementedPutgStandardServiceServer()
}

func RegisterPutgStandardServiceServer(s grpc.ServiceRegistrar, srv PutgStandardServiceServer) {
	s.RegisterService(&PutgStandardService_ServiceDesc, srv)
}

func _PutgStandardService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPutgStandard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutgStandardServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/putg_standard_api.PutgStandardService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutgStandardServiceServer).Get(ctx, req.(*GetPutgStandard))
	}
	return interceptor(ctx, in, info, handler)
}

func _PutgStandardService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePutgStandard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutgStandardServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/putg_standard_api.PutgStandardService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutgStandardServiceServer).Create(ctx, req.(*CreatePutgStandard))
	}
	return interceptor(ctx, in, info, handler)
}

func _PutgStandardService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePutgStandard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutgStandardServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/putg_standard_api.PutgStandardService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutgStandardServiceServer).Update(ctx, req.(*UpdatePutgStandard))
	}
	return interceptor(ctx, in, info, handler)
}

func _PutgStandardService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePutgStandard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutgStandardServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/putg_standard_api.PutgStandardService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutgStandardServiceServer).Delete(ctx, req.(*DeletePutgStandard))
	}
	return interceptor(ctx, in, info, handler)
}

// PutgStandardService_ServiceDesc is the grpc.ServiceDesc for PutgStandardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PutgStandardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "putg_standard_api.PutgStandardService",
	HandlerType: (*PutgStandardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _PutgStandardService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PutgStandardService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PutgStandardService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PutgStandardService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pro/putg_standard_api.proto",
}
