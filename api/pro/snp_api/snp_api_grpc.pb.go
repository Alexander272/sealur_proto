// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pro/snp_api.proto

package snp_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SnpDataServiceClient is the client API for SnpDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnpDataServiceClient interface {
	Get(ctx context.Context, in *GetSnp, opts ...grpc.CallOption) (*Snp, error)
	GetData(ctx context.Context, in *GetSnpData, opts ...grpc.CallOption) (*SnpData, error)
}

type snpDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnpDataServiceClient(cc grpc.ClientConnInterface) SnpDataServiceClient {
	return &snpDataServiceClient{cc}
}

func (c *snpDataServiceClient) Get(ctx context.Context, in *GetSnp, opts ...grpc.CallOption) (*Snp, error) {
	out := new(Snp)
	err := c.cc.Invoke(ctx, "/snp_api.SnpDataService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snpDataServiceClient) GetData(ctx context.Context, in *GetSnpData, opts ...grpc.CallOption) (*SnpData, error) {
	out := new(SnpData)
	err := c.cc.Invoke(ctx, "/snp_api.SnpDataService/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnpDataServiceServer is the server API for SnpDataService service.
// All implementations must embed UnimplementedSnpDataServiceServer
// for forward compatibility
type SnpDataServiceServer interface {
	Get(context.Context, *GetSnp) (*Snp, error)
	GetData(context.Context, *GetSnpData) (*SnpData, error)
	mustEmbedUnimplementedSnpDataServiceServer()
}

// UnimplementedSnpDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSnpDataServiceServer struct {
}

func (UnimplementedSnpDataServiceServer) Get(context.Context, *GetSnp) (*Snp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSnpDataServiceServer) GetData(context.Context, *GetSnpData) (*SnpData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedSnpDataServiceServer) mustEmbedUnimplementedSnpDataServiceServer() {}

// UnsafeSnpDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnpDataServiceServer will
// result in compilation errors.
type UnsafeSnpDataServiceServer interface {
	mustEmbedUnimplementedSnpDataServiceServer()
}

func RegisterSnpDataServiceServer(s grpc.ServiceRegistrar, srv SnpDataServiceServer) {
	s.RegisterService(&SnpDataService_ServiceDesc, srv)
}

func _SnpDataService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSnp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnpDataServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snp_api.SnpDataService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnpDataServiceServer).Get(ctx, req.(*GetSnp))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnpDataService_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSnpData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnpDataServiceServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snp_api.SnpDataService/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnpDataServiceServer).GetData(ctx, req.(*GetSnpData))
	}
	return interceptor(ctx, in, info, handler)
}

// SnpDataService_ServiceDesc is the grpc.ServiceDesc for SnpDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnpDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snp_api.SnpDataService",
	HandlerType: (*SnpDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _SnpDataService_Get_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _SnpDataService_GetData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pro/snp_api.proto",
}
