// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pro/rings_kit_api.proto

package rings_kit_api

import (
	context "context"
	rings_kit_model "github.com/Alexander272/sealur_proto/api/pro/models/rings_kit_model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RingsKitService_Get_FullMethodName = "/rings_kit_api.RingsKitService/Get"
)

// RingsKitServiceClient is the client API for RingsKitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RingsKitServiceClient interface {
	Get(ctx context.Context, in *GetRingsKit, opts ...grpc.CallOption) (*rings_kit_model.RingsKit, error)
}

type ringsKitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRingsKitServiceClient(cc grpc.ClientConnInterface) RingsKitServiceClient {
	return &ringsKitServiceClient{cc}
}

func (c *ringsKitServiceClient) Get(ctx context.Context, in *GetRingsKit, opts ...grpc.CallOption) (*rings_kit_model.RingsKit, error) {
	out := new(rings_kit_model.RingsKit)
	err := c.cc.Invoke(ctx, RingsKitService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RingsKitServiceServer is the server API for RingsKitService service.
// All implementations must embed UnimplementedRingsKitServiceServer
// for forward compatibility
type RingsKitServiceServer interface {
	Get(context.Context, *GetRingsKit) (*rings_kit_model.RingsKit, error)
	mustEmbedUnimplementedRingsKitServiceServer()
}

// UnimplementedRingsKitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRingsKitServiceServer struct {
}

func (UnimplementedRingsKitServiceServer) Get(context.Context, *GetRingsKit) (*rings_kit_model.RingsKit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRingsKitServiceServer) mustEmbedUnimplementedRingsKitServiceServer() {}

// UnsafeRingsKitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RingsKitServiceServer will
// result in compilation errors.
type UnsafeRingsKitServiceServer interface {
	mustEmbedUnimplementedRingsKitServiceServer()
}

func RegisterRingsKitServiceServer(s grpc.ServiceRegistrar, srv RingsKitServiceServer) {
	s.RegisterService(&RingsKitService_ServiceDesc, srv)
}

func _RingsKitService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRingsKit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingsKitServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingsKitService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingsKitServiceServer).Get(ctx, req.(*GetRingsKit))
	}
	return interceptor(ctx, in, info, handler)
}

// RingsKitService_ServiceDesc is the grpc.ServiceDesc for RingsKitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RingsKitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rings_kit_api.RingsKitService",
	HandlerType: (*RingsKitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _RingsKitService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pro/rings_kit_api.proto",
}
