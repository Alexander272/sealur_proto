// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pro/putg_size_api.proto

package putg_size_api

import (
	context "context"
	response_model "github.com/Alexander272/sealur_proto/api/pro/models/response_model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PutgSizeServiceClient is the client API for PutgSizeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PutgSizeServiceClient interface {
	Get(ctx context.Context, in *GetPutgSize, opts ...grpc.CallOption) (*PutgSize, error)
	Create(ctx context.Context, in *CreatePutgSize, opts ...grpc.CallOption) (*response_model.Response, error)
	CreateSeveral(ctx context.Context, in *CreateSeveralPutgSize, opts ...grpc.CallOption) (*response_model.Response, error)
	Update(ctx context.Context, in *UpdatePutgSize, opts ...grpc.CallOption) (*response_model.Response, error)
	Delete(ctx context.Context, in *DeletePutgSize, opts ...grpc.CallOption) (*response_model.Response, error)
}

type putgSizeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPutgSizeServiceClient(cc grpc.ClientConnInterface) PutgSizeServiceClient {
	return &putgSizeServiceClient{cc}
}

func (c *putgSizeServiceClient) Get(ctx context.Context, in *GetPutgSize, opts ...grpc.CallOption) (*PutgSize, error) {
	out := new(PutgSize)
	err := c.cc.Invoke(ctx, "/putg_size_api.PutgSizeService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *putgSizeServiceClient) Create(ctx context.Context, in *CreatePutgSize, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/putg_size_api.PutgSizeService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *putgSizeServiceClient) CreateSeveral(ctx context.Context, in *CreateSeveralPutgSize, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/putg_size_api.PutgSizeService/CreateSeveral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *putgSizeServiceClient) Update(ctx context.Context, in *UpdatePutgSize, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/putg_size_api.PutgSizeService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *putgSizeServiceClient) Delete(ctx context.Context, in *DeletePutgSize, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/putg_size_api.PutgSizeService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PutgSizeServiceServer is the server API for PutgSizeService service.
// All implementations must embed UnimplementedPutgSizeServiceServer
// for forward compatibility
type PutgSizeServiceServer interface {
	Get(context.Context, *GetPutgSize) (*PutgSize, error)
	Create(context.Context, *CreatePutgSize) (*response_model.Response, error)
	CreateSeveral(context.Context, *CreateSeveralPutgSize) (*response_model.Response, error)
	Update(context.Context, *UpdatePutgSize) (*response_model.Response, error)
	Delete(context.Context, *DeletePutgSize) (*response_model.Response, error)
	mustEmbedUnimplementedPutgSizeServiceServer()
}

// UnimplementedPutgSizeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPutgSizeServiceServer struct {
}

func (UnimplementedPutgSizeServiceServer) Get(context.Context, *GetPutgSize) (*PutgSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPutgSizeServiceServer) Create(context.Context, *CreatePutgSize) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPutgSizeServiceServer) CreateSeveral(context.Context, *CreateSeveralPutgSize) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeveral not implemented")
}
func (UnimplementedPutgSizeServiceServer) Update(context.Context, *UpdatePutgSize) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPutgSizeServiceServer) Delete(context.Context, *DeletePutgSize) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPutgSizeServiceServer) mustEmbedUnimplementedPutgSizeServiceServer() {}

// UnsafePutgSizeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PutgSizeServiceServer will
// result in compilation errors.
type UnsafePutgSizeServiceServer interface {
	mustEmbedUnimplementedPutgSizeServiceServer()
}

func RegisterPutgSizeServiceServer(s grpc.ServiceRegistrar, srv PutgSizeServiceServer) {
	s.RegisterService(&PutgSizeService_ServiceDesc, srv)
}

func _PutgSizeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPutgSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutgSizeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/putg_size_api.PutgSizeService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutgSizeServiceServer).Get(ctx, req.(*GetPutgSize))
	}
	return interceptor(ctx, in, info, handler)
}

func _PutgSizeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePutgSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutgSizeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/putg_size_api.PutgSizeService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutgSizeServiceServer).Create(ctx, req.(*CreatePutgSize))
	}
	return interceptor(ctx, in, info, handler)
}

func _PutgSizeService_CreateSeveral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeveralPutgSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutgSizeServiceServer).CreateSeveral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/putg_size_api.PutgSizeService/CreateSeveral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutgSizeServiceServer).CreateSeveral(ctx, req.(*CreateSeveralPutgSize))
	}
	return interceptor(ctx, in, info, handler)
}

func _PutgSizeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePutgSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutgSizeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/putg_size_api.PutgSizeService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutgSizeServiceServer).Update(ctx, req.(*UpdatePutgSize))
	}
	return interceptor(ctx, in, info, handler)
}

func _PutgSizeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePutgSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutgSizeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/putg_size_api.PutgSizeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutgSizeServiceServer).Delete(ctx, req.(*DeletePutgSize))
	}
	return interceptor(ctx, in, info, handler)
}

// PutgSizeService_ServiceDesc is the grpc.ServiceDesc for PutgSizeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PutgSizeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "putg_size_api.PutgSizeService",
	HandlerType: (*PutgSizeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _PutgSizeService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PutgSizeService_Create_Handler,
		},
		{
			MethodName: "CreateSeveral",
			Handler:    _PutgSizeService_CreateSeveral_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PutgSizeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PutgSizeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pro/putg_size_api.proto",
}
