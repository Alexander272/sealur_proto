// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pro/snp_filler_api.proto

package snp_filler_api

import (
	context "context"
	response_model "github.com/Alexander272/sealur_proto/api/pro/models/response_model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SnpFillerServiceClient is the client API for SnpFillerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnpFillerServiceClient interface {
	Get(ctx context.Context, in *GetSnpFillers, opts ...grpc.CallOption) (*SnpFillers, error)
	Create(ctx context.Context, in *CreateSnpFiller, opts ...grpc.CallOption) (*response_model.Response, error)
	CreateSeveral(ctx context.Context, in *CreateSeveralSnpFiller, opts ...grpc.CallOption) (*response_model.Response, error)
	Update(ctx context.Context, in *UpdateSnpFiller, opts ...grpc.CallOption) (*response_model.Response, error)
	Delete(ctx context.Context, in *DeleteSnpFiller, opts ...grpc.CallOption) (*response_model.Response, error)
}

type snpFillerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnpFillerServiceClient(cc grpc.ClientConnInterface) SnpFillerServiceClient {
	return &snpFillerServiceClient{cc}
}

func (c *snpFillerServiceClient) Get(ctx context.Context, in *GetSnpFillers, opts ...grpc.CallOption) (*SnpFillers, error) {
	out := new(SnpFillers)
	err := c.cc.Invoke(ctx, "/snp_filler_api.SnpFillerService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snpFillerServiceClient) Create(ctx context.Context, in *CreateSnpFiller, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/snp_filler_api.SnpFillerService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snpFillerServiceClient) CreateSeveral(ctx context.Context, in *CreateSeveralSnpFiller, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/snp_filler_api.SnpFillerService/CreateSeveral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snpFillerServiceClient) Update(ctx context.Context, in *UpdateSnpFiller, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/snp_filler_api.SnpFillerService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snpFillerServiceClient) Delete(ctx context.Context, in *DeleteSnpFiller, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/snp_filler_api.SnpFillerService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnpFillerServiceServer is the server API for SnpFillerService service.
// All implementations must embed UnimplementedSnpFillerServiceServer
// for forward compatibility
type SnpFillerServiceServer interface {
	Get(context.Context, *GetSnpFillers) (*SnpFillers, error)
	Create(context.Context, *CreateSnpFiller) (*response_model.Response, error)
	CreateSeveral(context.Context, *CreateSeveralSnpFiller) (*response_model.Response, error)
	Update(context.Context, *UpdateSnpFiller) (*response_model.Response, error)
	Delete(context.Context, *DeleteSnpFiller) (*response_model.Response, error)
	mustEmbedUnimplementedSnpFillerServiceServer()
}

// UnimplementedSnpFillerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSnpFillerServiceServer struct {
}

func (UnimplementedSnpFillerServiceServer) Get(context.Context, *GetSnpFillers) (*SnpFillers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSnpFillerServiceServer) Create(context.Context, *CreateSnpFiller) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSnpFillerServiceServer) CreateSeveral(context.Context, *CreateSeveralSnpFiller) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeveral not implemented")
}
func (UnimplementedSnpFillerServiceServer) Update(context.Context, *UpdateSnpFiller) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSnpFillerServiceServer) Delete(context.Context, *DeleteSnpFiller) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSnpFillerServiceServer) mustEmbedUnimplementedSnpFillerServiceServer() {}

// UnsafeSnpFillerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnpFillerServiceServer will
// result in compilation errors.
type UnsafeSnpFillerServiceServer interface {
	mustEmbedUnimplementedSnpFillerServiceServer()
}

func RegisterSnpFillerServiceServer(s grpc.ServiceRegistrar, srv SnpFillerServiceServer) {
	s.RegisterService(&SnpFillerService_ServiceDesc, srv)
}

func _SnpFillerService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSnpFillers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnpFillerServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snp_filler_api.SnpFillerService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnpFillerServiceServer).Get(ctx, req.(*GetSnpFillers))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnpFillerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnpFiller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnpFillerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snp_filler_api.SnpFillerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnpFillerServiceServer).Create(ctx, req.(*CreateSnpFiller))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnpFillerService_CreateSeveral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeveralSnpFiller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnpFillerServiceServer).CreateSeveral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snp_filler_api.SnpFillerService/CreateSeveral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnpFillerServiceServer).CreateSeveral(ctx, req.(*CreateSeveralSnpFiller))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnpFillerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSnpFiller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnpFillerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snp_filler_api.SnpFillerService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnpFillerServiceServer).Update(ctx, req.(*UpdateSnpFiller))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnpFillerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSnpFiller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnpFillerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snp_filler_api.SnpFillerService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnpFillerServiceServer).Delete(ctx, req.(*DeleteSnpFiller))
	}
	return interceptor(ctx, in, info, handler)
}

// SnpFillerService_ServiceDesc is the grpc.ServiceDesc for SnpFillerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnpFillerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snp_filler_api.SnpFillerService",
	HandlerType: (*SnpFillerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _SnpFillerService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SnpFillerService_Create_Handler,
		},
		{
			MethodName: "CreateSeveral",
			Handler:    _SnpFillerService_CreateSeveral_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SnpFillerService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SnpFillerService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pro/snp_filler_api.proto",
}
