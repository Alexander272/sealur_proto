// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pro/rings_kit_type_api.proto

package rings_kit_type_api

import (
	context "context"
	response_model "github.com/Alexander272/sealur_proto/api/pro/models/response_model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RingsKitTypeService_GetAll_FullMethodName = "/rings_kit_type_api.RingsKitTypeService/GetAll"
	RingsKitTypeService_Create_FullMethodName = "/rings_kit_type_api.RingsKitTypeService/Create"
	RingsKitTypeService_Update_FullMethodName = "/rings_kit_type_api.RingsKitTypeService/Update"
	RingsKitTypeService_Delete_FullMethodName = "/rings_kit_type_api.RingsKitTypeService/Delete"
)

// RingsKitTypeServiceClient is the client API for RingsKitTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RingsKitTypeServiceClient interface {
	GetAll(ctx context.Context, in *GetRingsKitTypes, opts ...grpc.CallOption) (*RingsKitTypes, error)
	Create(ctx context.Context, in *CreateRingsKitType, opts ...grpc.CallOption) (*response_model.Response, error)
	Update(ctx context.Context, in *UpdateRingsKitType, opts ...grpc.CallOption) (*response_model.Response, error)
	Delete(ctx context.Context, in *DeleteRingsKitType, opts ...grpc.CallOption) (*response_model.Response, error)
}

type ringsKitTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRingsKitTypeServiceClient(cc grpc.ClientConnInterface) RingsKitTypeServiceClient {
	return &ringsKitTypeServiceClient{cc}
}

func (c *ringsKitTypeServiceClient) GetAll(ctx context.Context, in *GetRingsKitTypes, opts ...grpc.CallOption) (*RingsKitTypes, error) {
	out := new(RingsKitTypes)
	err := c.cc.Invoke(ctx, RingsKitTypeService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringsKitTypeServiceClient) Create(ctx context.Context, in *CreateRingsKitType, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, RingsKitTypeService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringsKitTypeServiceClient) Update(ctx context.Context, in *UpdateRingsKitType, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, RingsKitTypeService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringsKitTypeServiceClient) Delete(ctx context.Context, in *DeleteRingsKitType, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, RingsKitTypeService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RingsKitTypeServiceServer is the server API for RingsKitTypeService service.
// All implementations must embed UnimplementedRingsKitTypeServiceServer
// for forward compatibility
type RingsKitTypeServiceServer interface {
	GetAll(context.Context, *GetRingsKitTypes) (*RingsKitTypes, error)
	Create(context.Context, *CreateRingsKitType) (*response_model.Response, error)
	Update(context.Context, *UpdateRingsKitType) (*response_model.Response, error)
	Delete(context.Context, *DeleteRingsKitType) (*response_model.Response, error)
	mustEmbedUnimplementedRingsKitTypeServiceServer()
}

// UnimplementedRingsKitTypeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRingsKitTypeServiceServer struct {
}

func (UnimplementedRingsKitTypeServiceServer) GetAll(context.Context, *GetRingsKitTypes) (*RingsKitTypes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedRingsKitTypeServiceServer) Create(context.Context, *CreateRingsKitType) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRingsKitTypeServiceServer) Update(context.Context, *UpdateRingsKitType) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRingsKitTypeServiceServer) Delete(context.Context, *DeleteRingsKitType) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRingsKitTypeServiceServer) mustEmbedUnimplementedRingsKitTypeServiceServer() {}

// UnsafeRingsKitTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RingsKitTypeServiceServer will
// result in compilation errors.
type UnsafeRingsKitTypeServiceServer interface {
	mustEmbedUnimplementedRingsKitTypeServiceServer()
}

func RegisterRingsKitTypeServiceServer(s grpc.ServiceRegistrar, srv RingsKitTypeServiceServer) {
	s.RegisterService(&RingsKitTypeService_ServiceDesc, srv)
}

func _RingsKitTypeService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRingsKitTypes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingsKitTypeServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingsKitTypeService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingsKitTypeServiceServer).GetAll(ctx, req.(*GetRingsKitTypes))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingsKitTypeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRingsKitType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingsKitTypeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingsKitTypeService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingsKitTypeServiceServer).Create(ctx, req.(*CreateRingsKitType))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingsKitTypeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRingsKitType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingsKitTypeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingsKitTypeService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingsKitTypeServiceServer).Update(ctx, req.(*UpdateRingsKitType))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingsKitTypeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRingsKitType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingsKitTypeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingsKitTypeService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingsKitTypeServiceServer).Delete(ctx, req.(*DeleteRingsKitType))
	}
	return interceptor(ctx, in, info, handler)
}

// RingsKitTypeService_ServiceDesc is the grpc.ServiceDesc for RingsKitTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RingsKitTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rings_kit_type_api.RingsKitTypeService",
	HandlerType: (*RingsKitTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _RingsKitTypeService_GetAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RingsKitTypeService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RingsKitTypeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RingsKitTypeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pro/rings_kit_type_api.proto",
}
