// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pro/putg_data_api.proto

package putg_data_api

import (
	context "context"
	response_model "github.com/Alexander272/sealur_proto/api/pro/models/response_model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PutgDataService_Get_FullMethodName    = "/putg_data_api.PutgDataService/Get"
	PutgDataService_Create_FullMethodName = "/putg_data_api.PutgDataService/Create"
	PutgDataService_Update_FullMethodName = "/putg_data_api.PutgDataService/Update"
	PutgDataService_Delete_FullMethodName = "/putg_data_api.PutgDataService/Delete"
)

// PutgDataServiceClient is the client API for PutgDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PutgDataServiceClient interface {
	Get(ctx context.Context, in *GetPutgData, opts ...grpc.CallOption) (*PutgData, error)
	Create(ctx context.Context, in *CreatePutgData, opts ...grpc.CallOption) (*response_model.Response, error)
	Update(ctx context.Context, in *UpdatePutgData, opts ...grpc.CallOption) (*response_model.Response, error)
	Delete(ctx context.Context, in *DeletePutgData, opts ...grpc.CallOption) (*response_model.Response, error)
}

type putgDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPutgDataServiceClient(cc grpc.ClientConnInterface) PutgDataServiceClient {
	return &putgDataServiceClient{cc}
}

func (c *putgDataServiceClient) Get(ctx context.Context, in *GetPutgData, opts ...grpc.CallOption) (*PutgData, error) {
	out := new(PutgData)
	err := c.cc.Invoke(ctx, PutgDataService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *putgDataServiceClient) Create(ctx context.Context, in *CreatePutgData, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, PutgDataService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *putgDataServiceClient) Update(ctx context.Context, in *UpdatePutgData, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, PutgDataService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *putgDataServiceClient) Delete(ctx context.Context, in *DeletePutgData, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, PutgDataService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PutgDataServiceServer is the server API for PutgDataService service.
// All implementations must embed UnimplementedPutgDataServiceServer
// for forward compatibility
type PutgDataServiceServer interface {
	Get(context.Context, *GetPutgData) (*PutgData, error)
	Create(context.Context, *CreatePutgData) (*response_model.Response, error)
	Update(context.Context, *UpdatePutgData) (*response_model.Response, error)
	Delete(context.Context, *DeletePutgData) (*response_model.Response, error)
	mustEmbedUnimplementedPutgDataServiceServer()
}

// UnimplementedPutgDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPutgDataServiceServer struct {
}

func (UnimplementedPutgDataServiceServer) Get(context.Context, *GetPutgData) (*PutgData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPutgDataServiceServer) Create(context.Context, *CreatePutgData) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPutgDataServiceServer) Update(context.Context, *UpdatePutgData) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPutgDataServiceServer) Delete(context.Context, *DeletePutgData) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPutgDataServiceServer) mustEmbedUnimplementedPutgDataServiceServer() {}

// UnsafePutgDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PutgDataServiceServer will
// result in compilation errors.
type UnsafePutgDataServiceServer interface {
	mustEmbedUnimplementedPutgDataServiceServer()
}

func RegisterPutgDataServiceServer(s grpc.ServiceRegistrar, srv PutgDataServiceServer) {
	s.RegisterService(&PutgDataService_ServiceDesc, srv)
}

func _PutgDataService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPutgData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutgDataServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PutgDataService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutgDataServiceServer).Get(ctx, req.(*GetPutgData))
	}
	return interceptor(ctx, in, info, handler)
}

func _PutgDataService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePutgData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutgDataServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PutgDataService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutgDataServiceServer).Create(ctx, req.(*CreatePutgData))
	}
	return interceptor(ctx, in, info, handler)
}

func _PutgDataService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePutgData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutgDataServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PutgDataService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutgDataServiceServer).Update(ctx, req.(*UpdatePutgData))
	}
	return interceptor(ctx, in, info, handler)
}

func _PutgDataService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePutgData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutgDataServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PutgDataService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutgDataServiceServer).Delete(ctx, req.(*DeletePutgData))
	}
	return interceptor(ctx, in, info, handler)
}

// PutgDataService_ServiceDesc is the grpc.ServiceDesc for PutgDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PutgDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "putg_data_api.PutgDataService",
	HandlerType: (*PutgDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _PutgDataService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PutgDataService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PutgDataService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PutgDataService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pro/putg_data_api.proto",
}
