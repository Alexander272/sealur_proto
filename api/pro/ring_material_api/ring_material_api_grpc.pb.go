// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pro/ring_material_api.proto

package ring_material_api

import (
	context "context"
	response_model "github.com/Alexander272/sealur_proto/api/pro/models/response_model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RingMaterialService_Get_FullMethodName    = "/ring_material_api.RingMaterialService/Get"
	RingMaterialService_Create_FullMethodName = "/ring_material_api.RingMaterialService/Create"
	RingMaterialService_Update_FullMethodName = "/ring_material_api.RingMaterialService/Update"
	RingMaterialService_Delete_FullMethodName = "/ring_material_api.RingMaterialService/Delete"
)

// RingMaterialServiceClient is the client API for RingMaterialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RingMaterialServiceClient interface {
	Get(ctx context.Context, in *GetRingMaterial, opts ...grpc.CallOption) (*RingMaterial, error)
	Create(ctx context.Context, in *CreateRingMaterial, opts ...grpc.CallOption) (*response_model.Response, error)
	Update(ctx context.Context, in *UpdateRingMaterial, opts ...grpc.CallOption) (*response_model.Response, error)
	Delete(ctx context.Context, in *DeleteRingMaterial, opts ...grpc.CallOption) (*response_model.Response, error)
}

type ringMaterialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRingMaterialServiceClient(cc grpc.ClientConnInterface) RingMaterialServiceClient {
	return &ringMaterialServiceClient{cc}
}

func (c *ringMaterialServiceClient) Get(ctx context.Context, in *GetRingMaterial, opts ...grpc.CallOption) (*RingMaterial, error) {
	out := new(RingMaterial)
	err := c.cc.Invoke(ctx, RingMaterialService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringMaterialServiceClient) Create(ctx context.Context, in *CreateRingMaterial, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, RingMaterialService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringMaterialServiceClient) Update(ctx context.Context, in *UpdateRingMaterial, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, RingMaterialService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringMaterialServiceClient) Delete(ctx context.Context, in *DeleteRingMaterial, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, RingMaterialService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RingMaterialServiceServer is the server API for RingMaterialService service.
// All implementations must embed UnimplementedRingMaterialServiceServer
// for forward compatibility
type RingMaterialServiceServer interface {
	Get(context.Context, *GetRingMaterial) (*RingMaterial, error)
	Create(context.Context, *CreateRingMaterial) (*response_model.Response, error)
	Update(context.Context, *UpdateRingMaterial) (*response_model.Response, error)
	Delete(context.Context, *DeleteRingMaterial) (*response_model.Response, error)
	mustEmbedUnimplementedRingMaterialServiceServer()
}

// UnimplementedRingMaterialServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRingMaterialServiceServer struct {
}

func (UnimplementedRingMaterialServiceServer) Get(context.Context, *GetRingMaterial) (*RingMaterial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRingMaterialServiceServer) Create(context.Context, *CreateRingMaterial) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRingMaterialServiceServer) Update(context.Context, *UpdateRingMaterial) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRingMaterialServiceServer) Delete(context.Context, *DeleteRingMaterial) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRingMaterialServiceServer) mustEmbedUnimplementedRingMaterialServiceServer() {}

// UnsafeRingMaterialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RingMaterialServiceServer will
// result in compilation errors.
type UnsafeRingMaterialServiceServer interface {
	mustEmbedUnimplementedRingMaterialServiceServer()
}

func RegisterRingMaterialServiceServer(s grpc.ServiceRegistrar, srv RingMaterialServiceServer) {
	s.RegisterService(&RingMaterialService_ServiceDesc, srv)
}

func _RingMaterialService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRingMaterial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingMaterialServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingMaterialService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingMaterialServiceServer).Get(ctx, req.(*GetRingMaterial))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingMaterialService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRingMaterial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingMaterialServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingMaterialService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingMaterialServiceServer).Create(ctx, req.(*CreateRingMaterial))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingMaterialService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRingMaterial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingMaterialServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingMaterialService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingMaterialServiceServer).Update(ctx, req.(*UpdateRingMaterial))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingMaterialService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRingMaterial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingMaterialServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingMaterialService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingMaterialServiceServer).Delete(ctx, req.(*DeleteRingMaterial))
	}
	return interceptor(ctx, in, info, handler)
}

// RingMaterialService_ServiceDesc is the grpc.ServiceDesc for RingMaterialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RingMaterialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ring_material_api.RingMaterialService",
	HandlerType: (*RingMaterialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _RingMaterialService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RingMaterialService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RingMaterialService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RingMaterialService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pro/ring_material_api.proto",
}
