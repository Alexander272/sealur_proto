// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pro/rings_kit_construction_api.proto

package rings_kit_construction_api

import (
	context "context"
	response_model "github.com/Alexander272/sealur_proto/api/pro/models/response_model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RingsKitConstructionService_GetAll_FullMethodName = "/rings_kit_construction_api.RingsKitConstructionService/GetAll"
	RingsKitConstructionService_Create_FullMethodName = "/rings_kit_construction_api.RingsKitConstructionService/Create"
	RingsKitConstructionService_Update_FullMethodName = "/rings_kit_construction_api.RingsKitConstructionService/Update"
	RingsKitConstructionService_Delete_FullMethodName = "/rings_kit_construction_api.RingsKitConstructionService/Delete"
)

// RingsKitConstructionServiceClient is the client API for RingsKitConstructionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RingsKitConstructionServiceClient interface {
	GetAll(ctx context.Context, in *GetRingsKitConstructions, opts ...grpc.CallOption) (*RingsKitConstructions, error)
	Create(ctx context.Context, in *CreateRingsKitConstruction, opts ...grpc.CallOption) (*response_model.Response, error)
	Update(ctx context.Context, in *UpdateRingsKitConstruction, opts ...grpc.CallOption) (*response_model.Response, error)
	Delete(ctx context.Context, in *DeleteRingsKitConstruction, opts ...grpc.CallOption) (*response_model.Response, error)
}

type ringsKitConstructionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRingsKitConstructionServiceClient(cc grpc.ClientConnInterface) RingsKitConstructionServiceClient {
	return &ringsKitConstructionServiceClient{cc}
}

func (c *ringsKitConstructionServiceClient) GetAll(ctx context.Context, in *GetRingsKitConstructions, opts ...grpc.CallOption) (*RingsKitConstructions, error) {
	out := new(RingsKitConstructions)
	err := c.cc.Invoke(ctx, RingsKitConstructionService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringsKitConstructionServiceClient) Create(ctx context.Context, in *CreateRingsKitConstruction, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, RingsKitConstructionService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringsKitConstructionServiceClient) Update(ctx context.Context, in *UpdateRingsKitConstruction, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, RingsKitConstructionService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringsKitConstructionServiceClient) Delete(ctx context.Context, in *DeleteRingsKitConstruction, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, RingsKitConstructionService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RingsKitConstructionServiceServer is the server API for RingsKitConstructionService service.
// All implementations must embed UnimplementedRingsKitConstructionServiceServer
// for forward compatibility
type RingsKitConstructionServiceServer interface {
	GetAll(context.Context, *GetRingsKitConstructions) (*RingsKitConstructions, error)
	Create(context.Context, *CreateRingsKitConstruction) (*response_model.Response, error)
	Update(context.Context, *UpdateRingsKitConstruction) (*response_model.Response, error)
	Delete(context.Context, *DeleteRingsKitConstruction) (*response_model.Response, error)
	mustEmbedUnimplementedRingsKitConstructionServiceServer()
}

// UnimplementedRingsKitConstructionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRingsKitConstructionServiceServer struct {
}

func (UnimplementedRingsKitConstructionServiceServer) GetAll(context.Context, *GetRingsKitConstructions) (*RingsKitConstructions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedRingsKitConstructionServiceServer) Create(context.Context, *CreateRingsKitConstruction) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRingsKitConstructionServiceServer) Update(context.Context, *UpdateRingsKitConstruction) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRingsKitConstructionServiceServer) Delete(context.Context, *DeleteRingsKitConstruction) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRingsKitConstructionServiceServer) mustEmbedUnimplementedRingsKitConstructionServiceServer() {
}

// UnsafeRingsKitConstructionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RingsKitConstructionServiceServer will
// result in compilation errors.
type UnsafeRingsKitConstructionServiceServer interface {
	mustEmbedUnimplementedRingsKitConstructionServiceServer()
}

func RegisterRingsKitConstructionServiceServer(s grpc.ServiceRegistrar, srv RingsKitConstructionServiceServer) {
	s.RegisterService(&RingsKitConstructionService_ServiceDesc, srv)
}

func _RingsKitConstructionService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRingsKitConstructions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingsKitConstructionServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingsKitConstructionService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingsKitConstructionServiceServer).GetAll(ctx, req.(*GetRingsKitConstructions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingsKitConstructionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRingsKitConstruction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingsKitConstructionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingsKitConstructionService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingsKitConstructionServiceServer).Create(ctx, req.(*CreateRingsKitConstruction))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingsKitConstructionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRingsKitConstruction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingsKitConstructionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingsKitConstructionService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingsKitConstructionServiceServer).Update(ctx, req.(*UpdateRingsKitConstruction))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingsKitConstructionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRingsKitConstruction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingsKitConstructionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RingsKitConstructionService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingsKitConstructionServiceServer).Delete(ctx, req.(*DeleteRingsKitConstruction))
	}
	return interceptor(ctx, in, info, handler)
}

// RingsKitConstructionService_ServiceDesc is the grpc.ServiceDesc for RingsKitConstructionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RingsKitConstructionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rings_kit_construction_api.RingsKitConstructionService",
	HandlerType: (*RingsKitConstructionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _RingsKitConstructionService_GetAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RingsKitConstructionService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RingsKitConstructionService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RingsKitConstructionService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pro/rings_kit_construction_api.proto",
}
