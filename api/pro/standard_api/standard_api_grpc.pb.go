// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pro/standard_api.proto

package standard_api

import (
	context "context"
	response_model "github.com/Alexander272/sealur_proto/api/pro/models/response_model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StandardService_GetAll_FullMethodName        = "/standard_api.StandardService/GetAll"
	StandardService_Create_FullMethodName        = "/standard_api.StandardService/Create"
	StandardService_CreateSeveral_FullMethodName = "/standard_api.StandardService/CreateSeveral"
	StandardService_Update_FullMethodName        = "/standard_api.StandardService/Update"
	StandardService_Delete_FullMethodName        = "/standard_api.StandardService/Delete"
)

// StandardServiceClient is the client API for StandardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StandardServiceClient interface {
	GetAll(ctx context.Context, in *GetAllStandards, opts ...grpc.CallOption) (*Standards, error)
	Create(ctx context.Context, in *CreateStandard, opts ...grpc.CallOption) (*response_model.Response, error)
	CreateSeveral(ctx context.Context, in *CreateSeveralStandard, opts ...grpc.CallOption) (*response_model.Response, error)
	Update(ctx context.Context, in *UpdateStandard, opts ...grpc.CallOption) (*response_model.Response, error)
	Delete(ctx context.Context, in *DeleteStandard, opts ...grpc.CallOption) (*response_model.Response, error)
}

type standardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStandardServiceClient(cc grpc.ClientConnInterface) StandardServiceClient {
	return &standardServiceClient{cc}
}

func (c *standardServiceClient) GetAll(ctx context.Context, in *GetAllStandards, opts ...grpc.CallOption) (*Standards, error) {
	out := new(Standards)
	err := c.cc.Invoke(ctx, StandardService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardServiceClient) Create(ctx context.Context, in *CreateStandard, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, StandardService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardServiceClient) CreateSeveral(ctx context.Context, in *CreateSeveralStandard, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, StandardService_CreateSeveral_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardServiceClient) Update(ctx context.Context, in *UpdateStandard, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, StandardService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardServiceClient) Delete(ctx context.Context, in *DeleteStandard, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, StandardService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StandardServiceServer is the server API for StandardService service.
// All implementations must embed UnimplementedStandardServiceServer
// for forward compatibility
type StandardServiceServer interface {
	GetAll(context.Context, *GetAllStandards) (*Standards, error)
	Create(context.Context, *CreateStandard) (*response_model.Response, error)
	CreateSeveral(context.Context, *CreateSeveralStandard) (*response_model.Response, error)
	Update(context.Context, *UpdateStandard) (*response_model.Response, error)
	Delete(context.Context, *DeleteStandard) (*response_model.Response, error)
	mustEmbedUnimplementedStandardServiceServer()
}

// UnimplementedStandardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStandardServiceServer struct {
}

func (UnimplementedStandardServiceServer) GetAll(context.Context, *GetAllStandards) (*Standards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedStandardServiceServer) Create(context.Context, *CreateStandard) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStandardServiceServer) CreateSeveral(context.Context, *CreateSeveralStandard) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeveral not implemented")
}
func (UnimplementedStandardServiceServer) Update(context.Context, *UpdateStandard) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStandardServiceServer) Delete(context.Context, *DeleteStandard) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStandardServiceServer) mustEmbedUnimplementedStandardServiceServer() {}

// UnsafeStandardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StandardServiceServer will
// result in compilation errors.
type UnsafeStandardServiceServer interface {
	mustEmbedUnimplementedStandardServiceServer()
}

func RegisterStandardServiceServer(s grpc.ServiceRegistrar, srv StandardServiceServer) {
	s.RegisterService(&StandardService_ServiceDesc, srv)
}

func _StandardService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStandards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StandardService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardServiceServer).GetAll(ctx, req.(*GetAllStandards))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStandard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StandardService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardServiceServer).Create(ctx, req.(*CreateStandard))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardService_CreateSeveral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeveralStandard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardServiceServer).CreateSeveral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StandardService_CreateSeveral_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardServiceServer).CreateSeveral(ctx, req.(*CreateSeveralStandard))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStandard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StandardService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardServiceServer).Update(ctx, req.(*UpdateStandard))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStandard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StandardService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardServiceServer).Delete(ctx, req.(*DeleteStandard))
	}
	return interceptor(ctx, in, info, handler)
}

// StandardService_ServiceDesc is the grpc.ServiceDesc for StandardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StandardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "standard_api.StandardService",
	HandlerType: (*StandardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _StandardService_GetAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _StandardService_Create_Handler,
		},
		{
			MethodName: "CreateSeveral",
			Handler:    _StandardService_CreateSeveral_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StandardService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StandardService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pro/standard_api.proto",
}
