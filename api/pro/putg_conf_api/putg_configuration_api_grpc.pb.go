// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pro/putg_configuration_api.proto

package putg_conf_api

import (
	context "context"
	response_model "github.com/Alexander272/sealur_proto/api/pro/models/response_model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PutgConfigurationService_Get_FullMethodName    = "/putg_conf_api.PutgConfigurationService/Get"
	PutgConfigurationService_Create_FullMethodName = "/putg_conf_api.PutgConfigurationService/Create"
	PutgConfigurationService_Update_FullMethodName = "/putg_conf_api.PutgConfigurationService/Update"
	PutgConfigurationService_Delete_FullMethodName = "/putg_conf_api.PutgConfigurationService/Delete"
)

// PutgConfigurationServiceClient is the client API for PutgConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PutgConfigurationServiceClient interface {
	Get(ctx context.Context, in *GetPutgConfiguration, opts ...grpc.CallOption) (*PutgConfiguration, error)
	Create(ctx context.Context, in *CreatePutgConfiguration, opts ...grpc.CallOption) (*response_model.Response, error)
	Update(ctx context.Context, in *UpdatePutgConfiguration, opts ...grpc.CallOption) (*response_model.Response, error)
	Delete(ctx context.Context, in *DeletePutgConfiguration, opts ...grpc.CallOption) (*response_model.Response, error)
}

type putgConfigurationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPutgConfigurationServiceClient(cc grpc.ClientConnInterface) PutgConfigurationServiceClient {
	return &putgConfigurationServiceClient{cc}
}

func (c *putgConfigurationServiceClient) Get(ctx context.Context, in *GetPutgConfiguration, opts ...grpc.CallOption) (*PutgConfiguration, error) {
	out := new(PutgConfiguration)
	err := c.cc.Invoke(ctx, PutgConfigurationService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *putgConfigurationServiceClient) Create(ctx context.Context, in *CreatePutgConfiguration, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, PutgConfigurationService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *putgConfigurationServiceClient) Update(ctx context.Context, in *UpdatePutgConfiguration, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, PutgConfigurationService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *putgConfigurationServiceClient) Delete(ctx context.Context, in *DeletePutgConfiguration, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, PutgConfigurationService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PutgConfigurationServiceServer is the server API for PutgConfigurationService service.
// All implementations must embed UnimplementedPutgConfigurationServiceServer
// for forward compatibility
type PutgConfigurationServiceServer interface {
	Get(context.Context, *GetPutgConfiguration) (*PutgConfiguration, error)
	Create(context.Context, *CreatePutgConfiguration) (*response_model.Response, error)
	Update(context.Context, *UpdatePutgConfiguration) (*response_model.Response, error)
	Delete(context.Context, *DeletePutgConfiguration) (*response_model.Response, error)
	mustEmbedUnimplementedPutgConfigurationServiceServer()
}

// UnimplementedPutgConfigurationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPutgConfigurationServiceServer struct {
}

func (UnimplementedPutgConfigurationServiceServer) Get(context.Context, *GetPutgConfiguration) (*PutgConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPutgConfigurationServiceServer) Create(context.Context, *CreatePutgConfiguration) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPutgConfigurationServiceServer) Update(context.Context, *UpdatePutgConfiguration) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPutgConfigurationServiceServer) Delete(context.Context, *DeletePutgConfiguration) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPutgConfigurationServiceServer) mustEmbedUnimplementedPutgConfigurationServiceServer() {
}

// UnsafePutgConfigurationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PutgConfigurationServiceServer will
// result in compilation errors.
type UnsafePutgConfigurationServiceServer interface {
	mustEmbedUnimplementedPutgConfigurationServiceServer()
}

func RegisterPutgConfigurationServiceServer(s grpc.ServiceRegistrar, srv PutgConfigurationServiceServer) {
	s.RegisterService(&PutgConfigurationService_ServiceDesc, srv)
}

func _PutgConfigurationService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPutgConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutgConfigurationServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PutgConfigurationService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutgConfigurationServiceServer).Get(ctx, req.(*GetPutgConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _PutgConfigurationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePutgConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutgConfigurationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PutgConfigurationService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutgConfigurationServiceServer).Create(ctx, req.(*CreatePutgConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _PutgConfigurationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePutgConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutgConfigurationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PutgConfigurationService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutgConfigurationServiceServer).Update(ctx, req.(*UpdatePutgConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _PutgConfigurationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePutgConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutgConfigurationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PutgConfigurationService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutgConfigurationServiceServer).Delete(ctx, req.(*DeletePutgConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

// PutgConfigurationService_ServiceDesc is the grpc.ServiceDesc for PutgConfigurationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PutgConfigurationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "putg_conf_api.PutgConfigurationService",
	HandlerType: (*PutgConfigurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _PutgConfigurationService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PutgConfigurationService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PutgConfigurationService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PutgConfigurationService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pro/putg_configuration_api.proto",
}
