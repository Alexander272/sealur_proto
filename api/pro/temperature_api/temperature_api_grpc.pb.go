// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pro/temperature_api.proto

package temperature_api

import (
	context "context"
	response_model "github.com/Alexander272/sealur_proto/api/pro/models/response_model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TemperatureServiceClient is the client API for TemperatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemperatureServiceClient interface {
	GetAll(ctx context.Context, in *GetAllTemperatures, opts ...grpc.CallOption) (*Temperatures, error)
	Create(ctx context.Context, in *CreateTemperature, opts ...grpc.CallOption) (*response_model.Response, error)
	CreateSeveral(ctx context.Context, in *CreateSeveralTemperature, opts ...grpc.CallOption) (*response_model.Response, error)
	Update(ctx context.Context, in *UpdateTemperature, opts ...grpc.CallOption) (*response_model.Response, error)
	Delete(ctx context.Context, in *DeleteTemperature, opts ...grpc.CallOption) (*response_model.Response, error)
}

type temperatureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTemperatureServiceClient(cc grpc.ClientConnInterface) TemperatureServiceClient {
	return &temperatureServiceClient{cc}
}

func (c *temperatureServiceClient) GetAll(ctx context.Context, in *GetAllTemperatures, opts ...grpc.CallOption) (*Temperatures, error) {
	out := new(Temperatures)
	err := c.cc.Invoke(ctx, "/temperature_api.TemperatureService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureServiceClient) Create(ctx context.Context, in *CreateTemperature, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/temperature_api.TemperatureService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureServiceClient) CreateSeveral(ctx context.Context, in *CreateSeveralTemperature, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/temperature_api.TemperatureService/CreateSeveral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureServiceClient) Update(ctx context.Context, in *UpdateTemperature, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/temperature_api.TemperatureService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureServiceClient) Delete(ctx context.Context, in *DeleteTemperature, opts ...grpc.CallOption) (*response_model.Response, error) {
	out := new(response_model.Response)
	err := c.cc.Invoke(ctx, "/temperature_api.TemperatureService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemperatureServiceServer is the server API for TemperatureService service.
// All implementations must embed UnimplementedTemperatureServiceServer
// for forward compatibility
type TemperatureServiceServer interface {
	GetAll(context.Context, *GetAllTemperatures) (*Temperatures, error)
	Create(context.Context, *CreateTemperature) (*response_model.Response, error)
	CreateSeveral(context.Context, *CreateSeveralTemperature) (*response_model.Response, error)
	Update(context.Context, *UpdateTemperature) (*response_model.Response, error)
	Delete(context.Context, *DeleteTemperature) (*response_model.Response, error)
	mustEmbedUnimplementedTemperatureServiceServer()
}

// UnimplementedTemperatureServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTemperatureServiceServer struct {
}

func (UnimplementedTemperatureServiceServer) GetAll(context.Context, *GetAllTemperatures) (*Temperatures, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTemperatureServiceServer) Create(context.Context, *CreateTemperature) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTemperatureServiceServer) CreateSeveral(context.Context, *CreateSeveralTemperature) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeveral not implemented")
}
func (UnimplementedTemperatureServiceServer) Update(context.Context, *UpdateTemperature) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTemperatureServiceServer) Delete(context.Context, *DeleteTemperature) (*response_model.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTemperatureServiceServer) mustEmbedUnimplementedTemperatureServiceServer() {}

// UnsafeTemperatureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemperatureServiceServer will
// result in compilation errors.
type UnsafeTemperatureServiceServer interface {
	mustEmbedUnimplementedTemperatureServiceServer()
}

func RegisterTemperatureServiceServer(s grpc.ServiceRegistrar, srv TemperatureServiceServer) {
	s.RegisterService(&TemperatureService_ServiceDesc, srv)
}

func _TemperatureService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTemperatures)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temperature_api.TemperatureService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureServiceServer).GetAll(ctx, req.(*GetAllTemperatures))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemperatureService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemperature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temperature_api.TemperatureService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureServiceServer).Create(ctx, req.(*CreateTemperature))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemperatureService_CreateSeveral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeveralTemperature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureServiceServer).CreateSeveral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temperature_api.TemperatureService/CreateSeveral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureServiceServer).CreateSeveral(ctx, req.(*CreateSeveralTemperature))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemperatureService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemperature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temperature_api.TemperatureService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureServiceServer).Update(ctx, req.(*UpdateTemperature))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemperatureService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemperature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temperature_api.TemperatureService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureServiceServer).Delete(ctx, req.(*DeleteTemperature))
	}
	return interceptor(ctx, in, info, handler)
}

// TemperatureService_ServiceDesc is the grpc.ServiceDesc for TemperatureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemperatureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "temperature_api.TemperatureService",
	HandlerType: (*TemperatureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _TemperatureService_GetAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TemperatureService_Create_Handler,
		},
		{
			MethodName: "CreateSeveral",
			Handler:    _TemperatureService_CreateSeveral_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TemperatureService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TemperatureService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pro/temperature_api.proto",
}
