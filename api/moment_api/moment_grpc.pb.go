// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: moment_api/moment.proto

package moment_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PingServiceClient is the client API for PingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PingServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type pingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPingServiceClient(cc grpc.ClientConnInterface) PingServiceClient {
	return &pingServiceClient{cc}
}

func (c *pingServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/moment_api.PingService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PingServiceServer is the server API for PingService service.
// All implementations must embed UnimplementedPingServiceServer
// for forward compatibility
type PingServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedPingServiceServer()
}

// UnimplementedPingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPingServiceServer struct {
}

func (UnimplementedPingServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPingServiceServer) mustEmbedUnimplementedPingServiceServer() {}

// UnsafePingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PingServiceServer will
// result in compilation errors.
type UnsafePingServiceServer interface {
	mustEmbedUnimplementedPingServiceServer()
}

func RegisterPingServiceServer(s grpc.ServiceRegistrar, srv PingServiceServer) {
	s.RegisterService(&PingService_ServiceDesc, srv)
}

func _PingService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.PingService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PingService_ServiceDesc is the grpc.ServiceDesc for PingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moment_api.PingService",
	HandlerType: (*PingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _PingService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moment_api/moment.proto",
}

// MaterialsServiceClient is the client API for MaterialsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaterialsServiceClient interface {
	GetMaterials(ctx context.Context, in *GetMaterialsRequest, opts ...grpc.CallOption) (*MaterialsResponse, error)
	GetMaterialsData(ctx context.Context, in *GetMaterialsDataRequest, opts ...grpc.CallOption) (*MaterialsDataResponse, error)
	GetMaterialsWithIsEmpty(ctx context.Context, in *GetMaterialsRequest, opts ...grpc.CallOption) (*MaterialsWithIsEmptyResponse, error)
	CreateMaterial(ctx context.Context, in *CreateMaterialRequest, opts ...grpc.CallOption) (*IdResponse, error)
	UpdateMaterial(ctx context.Context, in *UpdateMaterialRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteMaterial(ctx context.Context, in *DeleteMaterialRequest, opts ...grpc.CallOption) (*Response, error)
	CreateVoltage(ctx context.Context, in *CreateVoltageRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateVoltage(ctx context.Context, in *UpdateVoltageRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteVoltage(ctx context.Context, in *DeleteVoltageRequest, opts ...grpc.CallOption) (*Response, error)
	CreateElasticity(ctx context.Context, in *CreateElasticityRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateElasticity(ctx context.Context, in *UpdateElasticityRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteElasticity(ctx context.Context, in *DeleteElasticityRequest, opts ...grpc.CallOption) (*Response, error)
	CreateAlpha(ctx context.Context, in *CreateAlphaRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateAlpha(ctx context.Context, in *UpdateAlphaRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteAlpha(ctx context.Context, in *DeleteAlphaRequest, opts ...grpc.CallOption) (*Response, error)
}

type materialsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaterialsServiceClient(cc grpc.ClientConnInterface) MaterialsServiceClient {
	return &materialsServiceClient{cc}
}

func (c *materialsServiceClient) GetMaterials(ctx context.Context, in *GetMaterialsRequest, opts ...grpc.CallOption) (*MaterialsResponse, error) {
	out := new(MaterialsResponse)
	err := c.cc.Invoke(ctx, "/moment_api.MaterialsService/GetMaterials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) GetMaterialsData(ctx context.Context, in *GetMaterialsDataRequest, opts ...grpc.CallOption) (*MaterialsDataResponse, error) {
	out := new(MaterialsDataResponse)
	err := c.cc.Invoke(ctx, "/moment_api.MaterialsService/GetMaterialsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) GetMaterialsWithIsEmpty(ctx context.Context, in *GetMaterialsRequest, opts ...grpc.CallOption) (*MaterialsWithIsEmptyResponse, error) {
	out := new(MaterialsWithIsEmptyResponse)
	err := c.cc.Invoke(ctx, "/moment_api.MaterialsService/GetMaterialsWithIsEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) CreateMaterial(ctx context.Context, in *CreateMaterialRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/moment_api.MaterialsService/CreateMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) UpdateMaterial(ctx context.Context, in *UpdateMaterialRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.MaterialsService/UpdateMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) DeleteMaterial(ctx context.Context, in *DeleteMaterialRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.MaterialsService/DeleteMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) CreateVoltage(ctx context.Context, in *CreateVoltageRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.MaterialsService/CreateVoltage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) UpdateVoltage(ctx context.Context, in *UpdateVoltageRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.MaterialsService/UpdateVoltage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) DeleteVoltage(ctx context.Context, in *DeleteVoltageRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.MaterialsService/DeleteVoltage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) CreateElasticity(ctx context.Context, in *CreateElasticityRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.MaterialsService/CreateElasticity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) UpdateElasticity(ctx context.Context, in *UpdateElasticityRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.MaterialsService/UpdateElasticity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) DeleteElasticity(ctx context.Context, in *DeleteElasticityRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.MaterialsService/DeleteElasticity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) CreateAlpha(ctx context.Context, in *CreateAlphaRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.MaterialsService/CreateAlpha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) UpdateAlpha(ctx context.Context, in *UpdateAlphaRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.MaterialsService/UpdateAlpha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) DeleteAlpha(ctx context.Context, in *DeleteAlphaRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.MaterialsService/DeleteAlpha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaterialsServiceServer is the server API for MaterialsService service.
// All implementations must embed UnimplementedMaterialsServiceServer
// for forward compatibility
type MaterialsServiceServer interface {
	GetMaterials(context.Context, *GetMaterialsRequest) (*MaterialsResponse, error)
	GetMaterialsData(context.Context, *GetMaterialsDataRequest) (*MaterialsDataResponse, error)
	GetMaterialsWithIsEmpty(context.Context, *GetMaterialsRequest) (*MaterialsWithIsEmptyResponse, error)
	CreateMaterial(context.Context, *CreateMaterialRequest) (*IdResponse, error)
	UpdateMaterial(context.Context, *UpdateMaterialRequest) (*Response, error)
	DeleteMaterial(context.Context, *DeleteMaterialRequest) (*Response, error)
	CreateVoltage(context.Context, *CreateVoltageRequest) (*Response, error)
	UpdateVoltage(context.Context, *UpdateVoltageRequest) (*Response, error)
	DeleteVoltage(context.Context, *DeleteVoltageRequest) (*Response, error)
	CreateElasticity(context.Context, *CreateElasticityRequest) (*Response, error)
	UpdateElasticity(context.Context, *UpdateElasticityRequest) (*Response, error)
	DeleteElasticity(context.Context, *DeleteElasticityRequest) (*Response, error)
	CreateAlpha(context.Context, *CreateAlphaRequest) (*Response, error)
	UpdateAlpha(context.Context, *UpdateAlphaRequest) (*Response, error)
	DeleteAlpha(context.Context, *DeleteAlphaRequest) (*Response, error)
	mustEmbedUnimplementedMaterialsServiceServer()
}

// UnimplementedMaterialsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMaterialsServiceServer struct {
}

func (UnimplementedMaterialsServiceServer) GetMaterials(context.Context, *GetMaterialsRequest) (*MaterialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaterials not implemented")
}
func (UnimplementedMaterialsServiceServer) GetMaterialsData(context.Context, *GetMaterialsDataRequest) (*MaterialsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaterialsData not implemented")
}
func (UnimplementedMaterialsServiceServer) GetMaterialsWithIsEmpty(context.Context, *GetMaterialsRequest) (*MaterialsWithIsEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaterialsWithIsEmpty not implemented")
}
func (UnimplementedMaterialsServiceServer) CreateMaterial(context.Context, *CreateMaterialRequest) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMaterial not implemented")
}
func (UnimplementedMaterialsServiceServer) UpdateMaterial(context.Context, *UpdateMaterialRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMaterial not implemented")
}
func (UnimplementedMaterialsServiceServer) DeleteMaterial(context.Context, *DeleteMaterialRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMaterial not implemented")
}
func (UnimplementedMaterialsServiceServer) CreateVoltage(context.Context, *CreateVoltageRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVoltage not implemented")
}
func (UnimplementedMaterialsServiceServer) UpdateVoltage(context.Context, *UpdateVoltageRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVoltage not implemented")
}
func (UnimplementedMaterialsServiceServer) DeleteVoltage(context.Context, *DeleteVoltageRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVoltage not implemented")
}
func (UnimplementedMaterialsServiceServer) CreateElasticity(context.Context, *CreateElasticityRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateElasticity not implemented")
}
func (UnimplementedMaterialsServiceServer) UpdateElasticity(context.Context, *UpdateElasticityRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateElasticity not implemented")
}
func (UnimplementedMaterialsServiceServer) DeleteElasticity(context.Context, *DeleteElasticityRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteElasticity not implemented")
}
func (UnimplementedMaterialsServiceServer) CreateAlpha(context.Context, *CreateAlphaRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlpha not implemented")
}
func (UnimplementedMaterialsServiceServer) UpdateAlpha(context.Context, *UpdateAlphaRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlpha not implemented")
}
func (UnimplementedMaterialsServiceServer) DeleteAlpha(context.Context, *DeleteAlphaRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlpha not implemented")
}
func (UnimplementedMaterialsServiceServer) mustEmbedUnimplementedMaterialsServiceServer() {}

// UnsafeMaterialsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaterialsServiceServer will
// result in compilation errors.
type UnsafeMaterialsServiceServer interface {
	mustEmbedUnimplementedMaterialsServiceServer()
}

func RegisterMaterialsServiceServer(s grpc.ServiceRegistrar, srv MaterialsServiceServer) {
	s.RegisterService(&MaterialsService_ServiceDesc, srv)
}

func _MaterialsService_GetMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaterialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).GetMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.MaterialsService/GetMaterials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).GetMaterials(ctx, req.(*GetMaterialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_GetMaterialsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaterialsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).GetMaterialsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.MaterialsService/GetMaterialsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).GetMaterialsData(ctx, req.(*GetMaterialsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_GetMaterialsWithIsEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaterialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).GetMaterialsWithIsEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.MaterialsService/GetMaterialsWithIsEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).GetMaterialsWithIsEmpty(ctx, req.(*GetMaterialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_CreateMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).CreateMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.MaterialsService/CreateMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).CreateMaterial(ctx, req.(*CreateMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_UpdateMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).UpdateMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.MaterialsService/UpdateMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).UpdateMaterial(ctx, req.(*UpdateMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_DeleteMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).DeleteMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.MaterialsService/DeleteMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).DeleteMaterial(ctx, req.(*DeleteMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_CreateVoltage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVoltageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).CreateVoltage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.MaterialsService/CreateVoltage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).CreateVoltage(ctx, req.(*CreateVoltageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_UpdateVoltage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVoltageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).UpdateVoltage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.MaterialsService/UpdateVoltage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).UpdateVoltage(ctx, req.(*UpdateVoltageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_DeleteVoltage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVoltageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).DeleteVoltage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.MaterialsService/DeleteVoltage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).DeleteVoltage(ctx, req.(*DeleteVoltageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_CreateElasticity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateElasticityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).CreateElasticity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.MaterialsService/CreateElasticity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).CreateElasticity(ctx, req.(*CreateElasticityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_UpdateElasticity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateElasticityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).UpdateElasticity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.MaterialsService/UpdateElasticity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).UpdateElasticity(ctx, req.(*UpdateElasticityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_DeleteElasticity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteElasticityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).DeleteElasticity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.MaterialsService/DeleteElasticity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).DeleteElasticity(ctx, req.(*DeleteElasticityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_CreateAlpha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlphaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).CreateAlpha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.MaterialsService/CreateAlpha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).CreateAlpha(ctx, req.(*CreateAlphaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_UpdateAlpha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlphaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).UpdateAlpha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.MaterialsService/UpdateAlpha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).UpdateAlpha(ctx, req.(*UpdateAlphaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_DeleteAlpha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlphaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).DeleteAlpha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.MaterialsService/DeleteAlpha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).DeleteAlpha(ctx, req.(*DeleteAlphaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MaterialsService_ServiceDesc is the grpc.ServiceDesc for MaterialsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaterialsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moment_api.MaterialsService",
	HandlerType: (*MaterialsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMaterials",
			Handler:    _MaterialsService_GetMaterials_Handler,
		},
		{
			MethodName: "GetMaterialsData",
			Handler:    _MaterialsService_GetMaterialsData_Handler,
		},
		{
			MethodName: "GetMaterialsWithIsEmpty",
			Handler:    _MaterialsService_GetMaterialsWithIsEmpty_Handler,
		},
		{
			MethodName: "CreateMaterial",
			Handler:    _MaterialsService_CreateMaterial_Handler,
		},
		{
			MethodName: "UpdateMaterial",
			Handler:    _MaterialsService_UpdateMaterial_Handler,
		},
		{
			MethodName: "DeleteMaterial",
			Handler:    _MaterialsService_DeleteMaterial_Handler,
		},
		{
			MethodName: "CreateVoltage",
			Handler:    _MaterialsService_CreateVoltage_Handler,
		},
		{
			MethodName: "UpdateVoltage",
			Handler:    _MaterialsService_UpdateVoltage_Handler,
		},
		{
			MethodName: "DeleteVoltage",
			Handler:    _MaterialsService_DeleteVoltage_Handler,
		},
		{
			MethodName: "CreateElasticity",
			Handler:    _MaterialsService_CreateElasticity_Handler,
		},
		{
			MethodName: "UpdateElasticity",
			Handler:    _MaterialsService_UpdateElasticity_Handler,
		},
		{
			MethodName: "DeleteElasticity",
			Handler:    _MaterialsService_DeleteElasticity_Handler,
		},
		{
			MethodName: "CreateAlpha",
			Handler:    _MaterialsService_CreateAlpha_Handler,
		},
		{
			MethodName: "UpdateAlpha",
			Handler:    _MaterialsService_UpdateAlpha_Handler,
		},
		{
			MethodName: "DeleteAlpha",
			Handler:    _MaterialsService_DeleteAlpha_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moment_api/moment.proto",
}

// GasketServiceClient is the client API for GasketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GasketServiceClient interface {
	GetFullData(ctx context.Context, in *GetFullDataRequest, opts ...grpc.CallOption) (*FullDataResponse, error)
	GetGasket(ctx context.Context, in *GetGasketRequest, opts ...grpc.CallOption) (*GasketResponse, error)
	GetGasketWithThick(ctx context.Context, in *GetGasketRequest, opts ...grpc.CallOption) (*GasketWithThickResponse, error)
	CreateGasket(ctx context.Context, in *CreateGasketRequest, opts ...grpc.CallOption) (*IdResponse, error)
	UpdateGasket(ctx context.Context, in *UpdateGasketRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteGasket(ctx context.Context, in *DeleteGasketRequest, opts ...grpc.CallOption) (*Response, error)
	GetGasketType(ctx context.Context, in *GetGasketTypeRequest, opts ...grpc.CallOption) (*GasketTypeResponse, error)
	CreateGasketType(ctx context.Context, in *CreateGasketTypeRequest, opts ...grpc.CallOption) (*IdResponse, error)
	UpdateGasketType(ctx context.Context, in *UpdateGasketTypeRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteGasketType(ctx context.Context, in *DeleteGasketTypeRequest, opts ...grpc.CallOption) (*Response, error)
	GetEnv(ctx context.Context, in *GetEnvRequest, opts ...grpc.CallOption) (*EnvResponse, error)
	CreateEnv(ctx context.Context, in *CreateEnvRequest, opts ...grpc.CallOption) (*IdResponse, error)
	UpdateEnv(ctx context.Context, in *UpdateEnvRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteEnv(ctx context.Context, in *DeleteEnvRequest, opts ...grpc.CallOption) (*Response, error)
	CreateManyEnvData(ctx context.Context, in *CreateManyEnvDataRequest, opts ...grpc.CallOption) (*Response, error)
	CreateEnvData(ctx context.Context, in *CreateEnvDataRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateEnvData(ctx context.Context, in *UpdateEnvDataRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteEnvData(ctx context.Context, in *DeleteEnvDataRequest, opts ...grpc.CallOption) (*Response, error)
	CreateManyGasketData(ctx context.Context, in *CreateManyGasketDataRequest, opts ...grpc.CallOption) (*Response, error)
	CreateGasketData(ctx context.Context, in *CreateGasketDataRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateGasketTypeId(ctx context.Context, in *UpdateGasketTypeIdRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateGasketData(ctx context.Context, in *UpdateGasketDataRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteGasketData(ctx context.Context, in *DeleteGasketDataRequest, opts ...grpc.CallOption) (*Response, error)
}

type gasketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGasketServiceClient(cc grpc.ClientConnInterface) GasketServiceClient {
	return &gasketServiceClient{cc}
}

func (c *gasketServiceClient) GetFullData(ctx context.Context, in *GetFullDataRequest, opts ...grpc.CallOption) (*FullDataResponse, error) {
	out := new(FullDataResponse)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/GetFullData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) GetGasket(ctx context.Context, in *GetGasketRequest, opts ...grpc.CallOption) (*GasketResponse, error) {
	out := new(GasketResponse)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/GetGasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) GetGasketWithThick(ctx context.Context, in *GetGasketRequest, opts ...grpc.CallOption) (*GasketWithThickResponse, error) {
	out := new(GasketWithThickResponse)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/GetGasketWithThick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) CreateGasket(ctx context.Context, in *CreateGasketRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/CreateGasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) UpdateGasket(ctx context.Context, in *UpdateGasketRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/UpdateGasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) DeleteGasket(ctx context.Context, in *DeleteGasketRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/DeleteGasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) GetGasketType(ctx context.Context, in *GetGasketTypeRequest, opts ...grpc.CallOption) (*GasketTypeResponse, error) {
	out := new(GasketTypeResponse)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/GetGasketType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) CreateGasketType(ctx context.Context, in *CreateGasketTypeRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/CreateGasketType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) UpdateGasketType(ctx context.Context, in *UpdateGasketTypeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/UpdateGasketType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) DeleteGasketType(ctx context.Context, in *DeleteGasketTypeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/DeleteGasketType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) GetEnv(ctx context.Context, in *GetEnvRequest, opts ...grpc.CallOption) (*EnvResponse, error) {
	out := new(EnvResponse)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/GetEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) CreateEnv(ctx context.Context, in *CreateEnvRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/CreateEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) UpdateEnv(ctx context.Context, in *UpdateEnvRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/UpdateEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) DeleteEnv(ctx context.Context, in *DeleteEnvRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/DeleteEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) CreateManyEnvData(ctx context.Context, in *CreateManyEnvDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/CreateManyEnvData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) CreateEnvData(ctx context.Context, in *CreateEnvDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/CreateEnvData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) UpdateEnvData(ctx context.Context, in *UpdateEnvDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/UpdateEnvData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) DeleteEnvData(ctx context.Context, in *DeleteEnvDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/DeleteEnvData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) CreateManyGasketData(ctx context.Context, in *CreateManyGasketDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/CreateManyGasketData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) CreateGasketData(ctx context.Context, in *CreateGasketDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/CreateGasketData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) UpdateGasketTypeId(ctx context.Context, in *UpdateGasketTypeIdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/UpdateGasketTypeId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) UpdateGasketData(ctx context.Context, in *UpdateGasketDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/UpdateGasketData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) DeleteGasketData(ctx context.Context, in *DeleteGasketDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.GasketService/DeleteGasketData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GasketServiceServer is the server API for GasketService service.
// All implementations must embed UnimplementedGasketServiceServer
// for forward compatibility
type GasketServiceServer interface {
	GetFullData(context.Context, *GetFullDataRequest) (*FullDataResponse, error)
	GetGasket(context.Context, *GetGasketRequest) (*GasketResponse, error)
	GetGasketWithThick(context.Context, *GetGasketRequest) (*GasketWithThickResponse, error)
	CreateGasket(context.Context, *CreateGasketRequest) (*IdResponse, error)
	UpdateGasket(context.Context, *UpdateGasketRequest) (*Response, error)
	DeleteGasket(context.Context, *DeleteGasketRequest) (*Response, error)
	GetGasketType(context.Context, *GetGasketTypeRequest) (*GasketTypeResponse, error)
	CreateGasketType(context.Context, *CreateGasketTypeRequest) (*IdResponse, error)
	UpdateGasketType(context.Context, *UpdateGasketTypeRequest) (*Response, error)
	DeleteGasketType(context.Context, *DeleteGasketTypeRequest) (*Response, error)
	GetEnv(context.Context, *GetEnvRequest) (*EnvResponse, error)
	CreateEnv(context.Context, *CreateEnvRequest) (*IdResponse, error)
	UpdateEnv(context.Context, *UpdateEnvRequest) (*Response, error)
	DeleteEnv(context.Context, *DeleteEnvRequest) (*Response, error)
	CreateManyEnvData(context.Context, *CreateManyEnvDataRequest) (*Response, error)
	CreateEnvData(context.Context, *CreateEnvDataRequest) (*Response, error)
	UpdateEnvData(context.Context, *UpdateEnvDataRequest) (*Response, error)
	DeleteEnvData(context.Context, *DeleteEnvDataRequest) (*Response, error)
	CreateManyGasketData(context.Context, *CreateManyGasketDataRequest) (*Response, error)
	CreateGasketData(context.Context, *CreateGasketDataRequest) (*Response, error)
	UpdateGasketTypeId(context.Context, *UpdateGasketTypeIdRequest) (*Response, error)
	UpdateGasketData(context.Context, *UpdateGasketDataRequest) (*Response, error)
	DeleteGasketData(context.Context, *DeleteGasketDataRequest) (*Response, error)
	mustEmbedUnimplementedGasketServiceServer()
}

// UnimplementedGasketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGasketServiceServer struct {
}

func (UnimplementedGasketServiceServer) GetFullData(context.Context, *GetFullDataRequest) (*FullDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullData not implemented")
}
func (UnimplementedGasketServiceServer) GetGasket(context.Context, *GetGasketRequest) (*GasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGasket not implemented")
}
func (UnimplementedGasketServiceServer) GetGasketWithThick(context.Context, *GetGasketRequest) (*GasketWithThickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGasketWithThick not implemented")
}
func (UnimplementedGasketServiceServer) CreateGasket(context.Context, *CreateGasketRequest) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGasket not implemented")
}
func (UnimplementedGasketServiceServer) UpdateGasket(context.Context, *UpdateGasketRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGasket not implemented")
}
func (UnimplementedGasketServiceServer) DeleteGasket(context.Context, *DeleteGasketRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGasket not implemented")
}
func (UnimplementedGasketServiceServer) GetGasketType(context.Context, *GetGasketTypeRequest) (*GasketTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGasketType not implemented")
}
func (UnimplementedGasketServiceServer) CreateGasketType(context.Context, *CreateGasketTypeRequest) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGasketType not implemented")
}
func (UnimplementedGasketServiceServer) UpdateGasketType(context.Context, *UpdateGasketTypeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGasketType not implemented")
}
func (UnimplementedGasketServiceServer) DeleteGasketType(context.Context, *DeleteGasketTypeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGasketType not implemented")
}
func (UnimplementedGasketServiceServer) GetEnv(context.Context, *GetEnvRequest) (*EnvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnv not implemented")
}
func (UnimplementedGasketServiceServer) CreateEnv(context.Context, *CreateEnvRequest) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnv not implemented")
}
func (UnimplementedGasketServiceServer) UpdateEnv(context.Context, *UpdateEnvRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnv not implemented")
}
func (UnimplementedGasketServiceServer) DeleteEnv(context.Context, *DeleteEnvRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnv not implemented")
}
func (UnimplementedGasketServiceServer) CreateManyEnvData(context.Context, *CreateManyEnvDataRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManyEnvData not implemented")
}
func (UnimplementedGasketServiceServer) CreateEnvData(context.Context, *CreateEnvDataRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvData not implemented")
}
func (UnimplementedGasketServiceServer) UpdateEnvData(context.Context, *UpdateEnvDataRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnvData not implemented")
}
func (UnimplementedGasketServiceServer) DeleteEnvData(context.Context, *DeleteEnvDataRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvData not implemented")
}
func (UnimplementedGasketServiceServer) CreateManyGasketData(context.Context, *CreateManyGasketDataRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManyGasketData not implemented")
}
func (UnimplementedGasketServiceServer) CreateGasketData(context.Context, *CreateGasketDataRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGasketData not implemented")
}
func (UnimplementedGasketServiceServer) UpdateGasketTypeId(context.Context, *UpdateGasketTypeIdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGasketTypeId not implemented")
}
func (UnimplementedGasketServiceServer) UpdateGasketData(context.Context, *UpdateGasketDataRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGasketData not implemented")
}
func (UnimplementedGasketServiceServer) DeleteGasketData(context.Context, *DeleteGasketDataRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGasketData not implemented")
}
func (UnimplementedGasketServiceServer) mustEmbedUnimplementedGasketServiceServer() {}

// UnsafeGasketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GasketServiceServer will
// result in compilation errors.
type UnsafeGasketServiceServer interface {
	mustEmbedUnimplementedGasketServiceServer()
}

func RegisterGasketServiceServer(s grpc.ServiceRegistrar, srv GasketServiceServer) {
	s.RegisterService(&GasketService_ServiceDesc, srv)
}

func _GasketService_GetFullData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).GetFullData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/GetFullData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).GetFullData(ctx, req.(*GetFullDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_GetGasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).GetGasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/GetGasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).GetGasket(ctx, req.(*GetGasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_GetGasketWithThick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).GetGasketWithThick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/GetGasketWithThick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).GetGasketWithThick(ctx, req.(*GetGasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_CreateGasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).CreateGasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/CreateGasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).CreateGasket(ctx, req.(*CreateGasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_UpdateGasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).UpdateGasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/UpdateGasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).UpdateGasket(ctx, req.(*UpdateGasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_DeleteGasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).DeleteGasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/DeleteGasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).DeleteGasket(ctx, req.(*DeleteGasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_GetGasketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGasketTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).GetGasketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/GetGasketType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).GetGasketType(ctx, req.(*GetGasketTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_CreateGasketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGasketTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).CreateGasketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/CreateGasketType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).CreateGasketType(ctx, req.(*CreateGasketTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_UpdateGasketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGasketTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).UpdateGasketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/UpdateGasketType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).UpdateGasketType(ctx, req.(*UpdateGasketTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_DeleteGasketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGasketTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).DeleteGasketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/DeleteGasketType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).DeleteGasketType(ctx, req.(*DeleteGasketTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_GetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).GetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/GetEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).GetEnv(ctx, req.(*GetEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_CreateEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).CreateEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/CreateEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).CreateEnv(ctx, req.(*CreateEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_UpdateEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).UpdateEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/UpdateEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).UpdateEnv(ctx, req.(*UpdateEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_DeleteEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).DeleteEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/DeleteEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).DeleteEnv(ctx, req.(*DeleteEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_CreateManyEnvData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManyEnvDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).CreateManyEnvData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/CreateManyEnvData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).CreateManyEnvData(ctx, req.(*CreateManyEnvDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_CreateEnvData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).CreateEnvData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/CreateEnvData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).CreateEnvData(ctx, req.(*CreateEnvDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_UpdateEnvData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).UpdateEnvData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/UpdateEnvData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).UpdateEnvData(ctx, req.(*UpdateEnvDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_DeleteEnvData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).DeleteEnvData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/DeleteEnvData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).DeleteEnvData(ctx, req.(*DeleteEnvDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_CreateManyGasketData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManyGasketDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).CreateManyGasketData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/CreateManyGasketData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).CreateManyGasketData(ctx, req.(*CreateManyGasketDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_CreateGasketData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGasketDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).CreateGasketData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/CreateGasketData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).CreateGasketData(ctx, req.(*CreateGasketDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_UpdateGasketTypeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGasketTypeIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).UpdateGasketTypeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/UpdateGasketTypeId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).UpdateGasketTypeId(ctx, req.(*UpdateGasketTypeIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_UpdateGasketData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGasketDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).UpdateGasketData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/UpdateGasketData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).UpdateGasketData(ctx, req.(*UpdateGasketDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_DeleteGasketData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGasketDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).DeleteGasketData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.GasketService/DeleteGasketData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).DeleteGasketData(ctx, req.(*DeleteGasketDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GasketService_ServiceDesc is the grpc.ServiceDesc for GasketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GasketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moment_api.GasketService",
	HandlerType: (*GasketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFullData",
			Handler:    _GasketService_GetFullData_Handler,
		},
		{
			MethodName: "GetGasket",
			Handler:    _GasketService_GetGasket_Handler,
		},
		{
			MethodName: "GetGasketWithThick",
			Handler:    _GasketService_GetGasketWithThick_Handler,
		},
		{
			MethodName: "CreateGasket",
			Handler:    _GasketService_CreateGasket_Handler,
		},
		{
			MethodName: "UpdateGasket",
			Handler:    _GasketService_UpdateGasket_Handler,
		},
		{
			MethodName: "DeleteGasket",
			Handler:    _GasketService_DeleteGasket_Handler,
		},
		{
			MethodName: "GetGasketType",
			Handler:    _GasketService_GetGasketType_Handler,
		},
		{
			MethodName: "CreateGasketType",
			Handler:    _GasketService_CreateGasketType_Handler,
		},
		{
			MethodName: "UpdateGasketType",
			Handler:    _GasketService_UpdateGasketType_Handler,
		},
		{
			MethodName: "DeleteGasketType",
			Handler:    _GasketService_DeleteGasketType_Handler,
		},
		{
			MethodName: "GetEnv",
			Handler:    _GasketService_GetEnv_Handler,
		},
		{
			MethodName: "CreateEnv",
			Handler:    _GasketService_CreateEnv_Handler,
		},
		{
			MethodName: "UpdateEnv",
			Handler:    _GasketService_UpdateEnv_Handler,
		},
		{
			MethodName: "DeleteEnv",
			Handler:    _GasketService_DeleteEnv_Handler,
		},
		{
			MethodName: "CreateManyEnvData",
			Handler:    _GasketService_CreateManyEnvData_Handler,
		},
		{
			MethodName: "CreateEnvData",
			Handler:    _GasketService_CreateEnvData_Handler,
		},
		{
			MethodName: "UpdateEnvData",
			Handler:    _GasketService_UpdateEnvData_Handler,
		},
		{
			MethodName: "DeleteEnvData",
			Handler:    _GasketService_DeleteEnvData_Handler,
		},
		{
			MethodName: "CreateManyGasketData",
			Handler:    _GasketService_CreateManyGasketData_Handler,
		},
		{
			MethodName: "CreateGasketData",
			Handler:    _GasketService_CreateGasketData_Handler,
		},
		{
			MethodName: "UpdateGasketTypeId",
			Handler:    _GasketService_UpdateGasketTypeId_Handler,
		},
		{
			MethodName: "UpdateGasketData",
			Handler:    _GasketService_UpdateGasketData_Handler,
		},
		{
			MethodName: "DeleteGasketData",
			Handler:    _GasketService_DeleteGasketData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moment_api/moment.proto",
}

// FlangeServiceClient is the client API for FlangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlangeServiceClient interface {
	GetBolts(ctx context.Context, in *GetBoltsRequest, opts ...grpc.CallOption) (*BoltsResponse, error)
	CreateBolt(ctx context.Context, in *CreateBoltRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateBolt(ctx context.Context, in *UpdateBoltRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteBolt(ctx context.Context, in *DeleteBoltRequest, opts ...grpc.CallOption) (*Response, error)
	GetTypeFlange(ctx context.Context, in *GetTypeFlangeRequest, opts ...grpc.CallOption) (*TypeFlangeResponse, error)
	CreateTypeFlange(ctx context.Context, in *CreateTypeFlangeRequest, opts ...grpc.CallOption) (*IdResponse, error)
	UpdateTypeFlange(ctx context.Context, in *UpdateTypeFlangeRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteTypeFlange(ctx context.Context, in *DeleteTypeFlangeRequest, opts ...grpc.CallOption) (*Response, error)
	GetStandarts(ctx context.Context, in *GetStandartsRequest, opts ...grpc.CallOption) (*StandartsResponse, error)
	GetStandartsWithSize(ctx context.Context, in *GetStandartsRequest, opts ...grpc.CallOption) (*StandartsWithSizeResponse, error)
	CreateStandart(ctx context.Context, in *CreateStandartRequest, opts ...grpc.CallOption) (*IdResponse, error)
	UpdateStandart(ctx context.Context, in *UpdateStandartRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteStandart(ctx context.Context, in *DeleteStandartRequest, opts ...grpc.CallOption) (*Response, error)
	CreateFlangeSize(ctx context.Context, in *CreateFlangeSizeRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateFlangeSize(ctx context.Context, in *UpdateFlangeSizeRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteFlangeSize(ctx context.Context, in *DeleteFlangeSizeRequest, opts ...grpc.CallOption) (*Response, error)
	GetBasisFlangeSize(ctx context.Context, in *GetBasisFlangeSizeRequest, opts ...grpc.CallOption) (*BasisFlangeSizeResponse, error)
	GetFlangeSize(ctx context.Context, in *GetFullFlangeSizeRequest, opts ...grpc.CallOption) (*FullFlangeSizeResponse, error)
}

type flangeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlangeServiceClient(cc grpc.ClientConnInterface) FlangeServiceClient {
	return &flangeServiceClient{cc}
}

func (c *flangeServiceClient) GetBolts(ctx context.Context, in *GetBoltsRequest, opts ...grpc.CallOption) (*BoltsResponse, error) {
	out := new(BoltsResponse)
	err := c.cc.Invoke(ctx, "/moment_api.FlangeService/GetBolts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeServiceClient) CreateBolt(ctx context.Context, in *CreateBoltRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.FlangeService/CreateBolt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeServiceClient) UpdateBolt(ctx context.Context, in *UpdateBoltRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.FlangeService/UpdateBolt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeServiceClient) DeleteBolt(ctx context.Context, in *DeleteBoltRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.FlangeService/DeleteBolt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeServiceClient) GetTypeFlange(ctx context.Context, in *GetTypeFlangeRequest, opts ...grpc.CallOption) (*TypeFlangeResponse, error) {
	out := new(TypeFlangeResponse)
	err := c.cc.Invoke(ctx, "/moment_api.FlangeService/GetTypeFlange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeServiceClient) CreateTypeFlange(ctx context.Context, in *CreateTypeFlangeRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/moment_api.FlangeService/CreateTypeFlange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeServiceClient) UpdateTypeFlange(ctx context.Context, in *UpdateTypeFlangeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.FlangeService/UpdateTypeFlange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeServiceClient) DeleteTypeFlange(ctx context.Context, in *DeleteTypeFlangeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.FlangeService/DeleteTypeFlange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeServiceClient) GetStandarts(ctx context.Context, in *GetStandartsRequest, opts ...grpc.CallOption) (*StandartsResponse, error) {
	out := new(StandartsResponse)
	err := c.cc.Invoke(ctx, "/moment_api.FlangeService/GetStandarts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeServiceClient) GetStandartsWithSize(ctx context.Context, in *GetStandartsRequest, opts ...grpc.CallOption) (*StandartsWithSizeResponse, error) {
	out := new(StandartsWithSizeResponse)
	err := c.cc.Invoke(ctx, "/moment_api.FlangeService/GetStandartsWithSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeServiceClient) CreateStandart(ctx context.Context, in *CreateStandartRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/moment_api.FlangeService/CreateStandart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeServiceClient) UpdateStandart(ctx context.Context, in *UpdateStandartRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.FlangeService/UpdateStandart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeServiceClient) DeleteStandart(ctx context.Context, in *DeleteStandartRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.FlangeService/DeleteStandart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeServiceClient) CreateFlangeSize(ctx context.Context, in *CreateFlangeSizeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.FlangeService/CreateFlangeSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeServiceClient) UpdateFlangeSize(ctx context.Context, in *UpdateFlangeSizeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.FlangeService/UpdateFlangeSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeServiceClient) DeleteFlangeSize(ctx context.Context, in *DeleteFlangeSizeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.FlangeService/DeleteFlangeSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeServiceClient) GetBasisFlangeSize(ctx context.Context, in *GetBasisFlangeSizeRequest, opts ...grpc.CallOption) (*BasisFlangeSizeResponse, error) {
	out := new(BasisFlangeSizeResponse)
	err := c.cc.Invoke(ctx, "/moment_api.FlangeService/GetBasisFlangeSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flangeServiceClient) GetFlangeSize(ctx context.Context, in *GetFullFlangeSizeRequest, opts ...grpc.CallOption) (*FullFlangeSizeResponse, error) {
	out := new(FullFlangeSizeResponse)
	err := c.cc.Invoke(ctx, "/moment_api.FlangeService/GetFlangeSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlangeServiceServer is the server API for FlangeService service.
// All implementations must embed UnimplementedFlangeServiceServer
// for forward compatibility
type FlangeServiceServer interface {
	GetBolts(context.Context, *GetBoltsRequest) (*BoltsResponse, error)
	CreateBolt(context.Context, *CreateBoltRequest) (*Response, error)
	UpdateBolt(context.Context, *UpdateBoltRequest) (*Response, error)
	DeleteBolt(context.Context, *DeleteBoltRequest) (*Response, error)
	GetTypeFlange(context.Context, *GetTypeFlangeRequest) (*TypeFlangeResponse, error)
	CreateTypeFlange(context.Context, *CreateTypeFlangeRequest) (*IdResponse, error)
	UpdateTypeFlange(context.Context, *UpdateTypeFlangeRequest) (*Response, error)
	DeleteTypeFlange(context.Context, *DeleteTypeFlangeRequest) (*Response, error)
	GetStandarts(context.Context, *GetStandartsRequest) (*StandartsResponse, error)
	GetStandartsWithSize(context.Context, *GetStandartsRequest) (*StandartsWithSizeResponse, error)
	CreateStandart(context.Context, *CreateStandartRequest) (*IdResponse, error)
	UpdateStandart(context.Context, *UpdateStandartRequest) (*Response, error)
	DeleteStandart(context.Context, *DeleteStandartRequest) (*Response, error)
	CreateFlangeSize(context.Context, *CreateFlangeSizeRequest) (*Response, error)
	UpdateFlangeSize(context.Context, *UpdateFlangeSizeRequest) (*Response, error)
	DeleteFlangeSize(context.Context, *DeleteFlangeSizeRequest) (*Response, error)
	GetBasisFlangeSize(context.Context, *GetBasisFlangeSizeRequest) (*BasisFlangeSizeResponse, error)
	GetFlangeSize(context.Context, *GetFullFlangeSizeRequest) (*FullFlangeSizeResponse, error)
	mustEmbedUnimplementedFlangeServiceServer()
}

// UnimplementedFlangeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlangeServiceServer struct {
}

func (UnimplementedFlangeServiceServer) GetBolts(context.Context, *GetBoltsRequest) (*BoltsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBolts not implemented")
}
func (UnimplementedFlangeServiceServer) CreateBolt(context.Context, *CreateBoltRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBolt not implemented")
}
func (UnimplementedFlangeServiceServer) UpdateBolt(context.Context, *UpdateBoltRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBolt not implemented")
}
func (UnimplementedFlangeServiceServer) DeleteBolt(context.Context, *DeleteBoltRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBolt not implemented")
}
func (UnimplementedFlangeServiceServer) GetTypeFlange(context.Context, *GetTypeFlangeRequest) (*TypeFlangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTypeFlange not implemented")
}
func (UnimplementedFlangeServiceServer) CreateTypeFlange(context.Context, *CreateTypeFlangeRequest) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTypeFlange not implemented")
}
func (UnimplementedFlangeServiceServer) UpdateTypeFlange(context.Context, *UpdateTypeFlangeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTypeFlange not implemented")
}
func (UnimplementedFlangeServiceServer) DeleteTypeFlange(context.Context, *DeleteTypeFlangeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTypeFlange not implemented")
}
func (UnimplementedFlangeServiceServer) GetStandarts(context.Context, *GetStandartsRequest) (*StandartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStandarts not implemented")
}
func (UnimplementedFlangeServiceServer) GetStandartsWithSize(context.Context, *GetStandartsRequest) (*StandartsWithSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStandartsWithSize not implemented")
}
func (UnimplementedFlangeServiceServer) CreateStandart(context.Context, *CreateStandartRequest) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStandart not implemented")
}
func (UnimplementedFlangeServiceServer) UpdateStandart(context.Context, *UpdateStandartRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStandart not implemented")
}
func (UnimplementedFlangeServiceServer) DeleteStandart(context.Context, *DeleteStandartRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStandart not implemented")
}
func (UnimplementedFlangeServiceServer) CreateFlangeSize(context.Context, *CreateFlangeSizeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlangeSize not implemented")
}
func (UnimplementedFlangeServiceServer) UpdateFlangeSize(context.Context, *UpdateFlangeSizeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlangeSize not implemented")
}
func (UnimplementedFlangeServiceServer) DeleteFlangeSize(context.Context, *DeleteFlangeSizeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlangeSize not implemented")
}
func (UnimplementedFlangeServiceServer) GetBasisFlangeSize(context.Context, *GetBasisFlangeSizeRequest) (*BasisFlangeSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasisFlangeSize not implemented")
}
func (UnimplementedFlangeServiceServer) GetFlangeSize(context.Context, *GetFullFlangeSizeRequest) (*FullFlangeSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlangeSize not implemented")
}
func (UnimplementedFlangeServiceServer) mustEmbedUnimplementedFlangeServiceServer() {}

// UnsafeFlangeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlangeServiceServer will
// result in compilation errors.
type UnsafeFlangeServiceServer interface {
	mustEmbedUnimplementedFlangeServiceServer()
}

func RegisterFlangeServiceServer(s grpc.ServiceRegistrar, srv FlangeServiceServer) {
	s.RegisterService(&FlangeService_ServiceDesc, srv)
}

func _FlangeService_GetBolts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoltsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeServiceServer).GetBolts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.FlangeService/GetBolts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeServiceServer).GetBolts(ctx, req.(*GetBoltsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeService_CreateBolt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBoltRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeServiceServer).CreateBolt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.FlangeService/CreateBolt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeServiceServer).CreateBolt(ctx, req.(*CreateBoltRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeService_UpdateBolt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBoltRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeServiceServer).UpdateBolt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.FlangeService/UpdateBolt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeServiceServer).UpdateBolt(ctx, req.(*UpdateBoltRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeService_DeleteBolt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBoltRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeServiceServer).DeleteBolt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.FlangeService/DeleteBolt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeServiceServer).DeleteBolt(ctx, req.(*DeleteBoltRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeService_GetTypeFlange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTypeFlangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeServiceServer).GetTypeFlange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.FlangeService/GetTypeFlange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeServiceServer).GetTypeFlange(ctx, req.(*GetTypeFlangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeService_CreateTypeFlange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTypeFlangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeServiceServer).CreateTypeFlange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.FlangeService/CreateTypeFlange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeServiceServer).CreateTypeFlange(ctx, req.(*CreateTypeFlangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeService_UpdateTypeFlange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTypeFlangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeServiceServer).UpdateTypeFlange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.FlangeService/UpdateTypeFlange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeServiceServer).UpdateTypeFlange(ctx, req.(*UpdateTypeFlangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeService_DeleteTypeFlange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTypeFlangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeServiceServer).DeleteTypeFlange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.FlangeService/DeleteTypeFlange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeServiceServer).DeleteTypeFlange(ctx, req.(*DeleteTypeFlangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeService_GetStandarts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStandartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeServiceServer).GetStandarts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.FlangeService/GetStandarts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeServiceServer).GetStandarts(ctx, req.(*GetStandartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeService_GetStandartsWithSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStandartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeServiceServer).GetStandartsWithSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.FlangeService/GetStandartsWithSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeServiceServer).GetStandartsWithSize(ctx, req.(*GetStandartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeService_CreateStandart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStandartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeServiceServer).CreateStandart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.FlangeService/CreateStandart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeServiceServer).CreateStandart(ctx, req.(*CreateStandartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeService_UpdateStandart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStandartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeServiceServer).UpdateStandart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.FlangeService/UpdateStandart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeServiceServer).UpdateStandart(ctx, req.(*UpdateStandartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeService_DeleteStandart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStandartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeServiceServer).DeleteStandart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.FlangeService/DeleteStandart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeServiceServer).DeleteStandart(ctx, req.(*DeleteStandartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeService_CreateFlangeSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlangeSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeServiceServer).CreateFlangeSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.FlangeService/CreateFlangeSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeServiceServer).CreateFlangeSize(ctx, req.(*CreateFlangeSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeService_UpdateFlangeSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlangeSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeServiceServer).UpdateFlangeSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.FlangeService/UpdateFlangeSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeServiceServer).UpdateFlangeSize(ctx, req.(*UpdateFlangeSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeService_DeleteFlangeSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlangeSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeServiceServer).DeleteFlangeSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.FlangeService/DeleteFlangeSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeServiceServer).DeleteFlangeSize(ctx, req.(*DeleteFlangeSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeService_GetBasisFlangeSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasisFlangeSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeServiceServer).GetBasisFlangeSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.FlangeService/GetBasisFlangeSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeServiceServer).GetBasisFlangeSize(ctx, req.(*GetBasisFlangeSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlangeService_GetFlangeSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullFlangeSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeServiceServer).GetFlangeSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.FlangeService/GetFlangeSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeServiceServer).GetFlangeSize(ctx, req.(*GetFullFlangeSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlangeService_ServiceDesc is the grpc.ServiceDesc for FlangeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlangeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moment_api.FlangeService",
	HandlerType: (*FlangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBolts",
			Handler:    _FlangeService_GetBolts_Handler,
		},
		{
			MethodName: "CreateBolt",
			Handler:    _FlangeService_CreateBolt_Handler,
		},
		{
			MethodName: "UpdateBolt",
			Handler:    _FlangeService_UpdateBolt_Handler,
		},
		{
			MethodName: "DeleteBolt",
			Handler:    _FlangeService_DeleteBolt_Handler,
		},
		{
			MethodName: "GetTypeFlange",
			Handler:    _FlangeService_GetTypeFlange_Handler,
		},
		{
			MethodName: "CreateTypeFlange",
			Handler:    _FlangeService_CreateTypeFlange_Handler,
		},
		{
			MethodName: "UpdateTypeFlange",
			Handler:    _FlangeService_UpdateTypeFlange_Handler,
		},
		{
			MethodName: "DeleteTypeFlange",
			Handler:    _FlangeService_DeleteTypeFlange_Handler,
		},
		{
			MethodName: "GetStandarts",
			Handler:    _FlangeService_GetStandarts_Handler,
		},
		{
			MethodName: "GetStandartsWithSize",
			Handler:    _FlangeService_GetStandartsWithSize_Handler,
		},
		{
			MethodName: "CreateStandart",
			Handler:    _FlangeService_CreateStandart_Handler,
		},
		{
			MethodName: "UpdateStandart",
			Handler:    _FlangeService_UpdateStandart_Handler,
		},
		{
			MethodName: "DeleteStandart",
			Handler:    _FlangeService_DeleteStandart_Handler,
		},
		{
			MethodName: "CreateFlangeSize",
			Handler:    _FlangeService_CreateFlangeSize_Handler,
		},
		{
			MethodName: "UpdateFlangeSize",
			Handler:    _FlangeService_UpdateFlangeSize_Handler,
		},
		{
			MethodName: "DeleteFlangeSize",
			Handler:    _FlangeService_DeleteFlangeSize_Handler,
		},
		{
			MethodName: "GetBasisFlangeSize",
			Handler:    _FlangeService_GetBasisFlangeSize_Handler,
		},
		{
			MethodName: "GetFlangeSize",
			Handler:    _FlangeService_GetFlangeSize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moment_api/moment.proto",
}

// CalcFlangeServiceClient is the client API for CalcFlangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalcFlangeServiceClient interface {
	CalculateFlange(ctx context.Context, in *CalcFlangeRequest, opts ...grpc.CallOption) (*FlangeResponse, error)
}

type calcFlangeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalcFlangeServiceClient(cc grpc.ClientConnInterface) CalcFlangeServiceClient {
	return &calcFlangeServiceClient{cc}
}

func (c *calcFlangeServiceClient) CalculateFlange(ctx context.Context, in *CalcFlangeRequest, opts ...grpc.CallOption) (*FlangeResponse, error) {
	out := new(FlangeResponse)
	err := c.cc.Invoke(ctx, "/moment_api.CalcFlangeService/CalculateFlange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalcFlangeServiceServer is the server API for CalcFlangeService service.
// All implementations must embed UnimplementedCalcFlangeServiceServer
// for forward compatibility
type CalcFlangeServiceServer interface {
	CalculateFlange(context.Context, *CalcFlangeRequest) (*FlangeResponse, error)
	mustEmbedUnimplementedCalcFlangeServiceServer()
}

// UnimplementedCalcFlangeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalcFlangeServiceServer struct {
}

func (UnimplementedCalcFlangeServiceServer) CalculateFlange(context.Context, *CalcFlangeRequest) (*FlangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFlange not implemented")
}
func (UnimplementedCalcFlangeServiceServer) mustEmbedUnimplementedCalcFlangeServiceServer() {}

// UnsafeCalcFlangeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalcFlangeServiceServer will
// result in compilation errors.
type UnsafeCalcFlangeServiceServer interface {
	mustEmbedUnimplementedCalcFlangeServiceServer()
}

func RegisterCalcFlangeServiceServer(s grpc.ServiceRegistrar, srv CalcFlangeServiceServer) {
	s.RegisterService(&CalcFlangeService_ServiceDesc, srv)
}

func _CalcFlangeService_CalculateFlange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalcFlangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcFlangeServiceServer).CalculateFlange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.CalcFlangeService/CalculateFlange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcFlangeServiceServer).CalculateFlange(ctx, req.(*CalcFlangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalcFlangeService_ServiceDesc is the grpc.ServiceDesc for CalcFlangeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalcFlangeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moment_api.CalcFlangeService",
	HandlerType: (*CalcFlangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateFlange",
			Handler:    _CalcFlangeService_CalculateFlange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moment_api/moment.proto",
}

// ReadServiceClient is the client API for ReadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReadServiceClient interface {
	GetFlange(ctx context.Context, in *GetFlangeRequest, opts ...grpc.CallOption) (*GetFlangeResponse, error)
}

type readServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReadServiceClient(cc grpc.ClientConnInterface) ReadServiceClient {
	return &readServiceClient{cc}
}

func (c *readServiceClient) GetFlange(ctx context.Context, in *GetFlangeRequest, opts ...grpc.CallOption) (*GetFlangeResponse, error) {
	out := new(GetFlangeResponse)
	err := c.cc.Invoke(ctx, "/moment_api.ReadService/GetFlange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReadServiceServer is the server API for ReadService service.
// All implementations must embed UnimplementedReadServiceServer
// for forward compatibility
type ReadServiceServer interface {
	GetFlange(context.Context, *GetFlangeRequest) (*GetFlangeResponse, error)
	mustEmbedUnimplementedReadServiceServer()
}

// UnimplementedReadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReadServiceServer struct {
}

func (UnimplementedReadServiceServer) GetFlange(context.Context, *GetFlangeRequest) (*GetFlangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlange not implemented")
}
func (UnimplementedReadServiceServer) mustEmbedUnimplementedReadServiceServer() {}

// UnsafeReadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReadServiceServer will
// result in compilation errors.
type UnsafeReadServiceServer interface {
	mustEmbedUnimplementedReadServiceServer()
}

func RegisterReadServiceServer(s grpc.ServiceRegistrar, srv ReadServiceServer) {
	s.RegisterService(&ReadService_ServiceDesc, srv)
}

func _ReadService_GetFlange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadServiceServer).GetFlange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.ReadService/GetFlange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadServiceServer).GetFlange(ctx, req.(*GetFlangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReadService_ServiceDesc is the grpc.ServiceDesc for ReadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moment_api.ReadService",
	HandlerType: (*ReadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFlange",
			Handler:    _ReadService_GetFlange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moment_api/moment.proto",
}
