// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: moment_api/gasket.proto

package gasket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GasketServiceClient is the client API for GasketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GasketServiceClient interface {
	GetFullData(ctx context.Context, in *GetFullDataRequest, opts ...grpc.CallOption) (*FullDataResponse, error)
	GetGasket(ctx context.Context, in *GetGasketRequest, opts ...grpc.CallOption) (*GasketResponse, error)
	GetGasketWithThick(ctx context.Context, in *GetGasketRequest, opts ...grpc.CallOption) (*GasketWithThickResponse, error)
	CreateGasket(ctx context.Context, in *CreateGasketRequest, opts ...grpc.CallOption) (*IdResponse, error)
	UpdateGasket(ctx context.Context, in *UpdateGasketRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteGasket(ctx context.Context, in *DeleteGasketRequest, opts ...grpc.CallOption) (*Response, error)
	GetGasketType(ctx context.Context, in *GetGasketTypeRequest, opts ...grpc.CallOption) (*GasketTypeResponse, error)
	CreateGasketType(ctx context.Context, in *CreateGasketTypeRequest, opts ...grpc.CallOption) (*IdResponse, error)
	UpdateGasketType(ctx context.Context, in *UpdateGasketTypeRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteGasketType(ctx context.Context, in *DeleteGasketTypeRequest, opts ...grpc.CallOption) (*Response, error)
	GetEnv(ctx context.Context, in *GetEnvRequest, opts ...grpc.CallOption) (*EnvResponse, error)
	CreateEnv(ctx context.Context, in *CreateEnvRequest, opts ...grpc.CallOption) (*IdResponse, error)
	UpdateEnv(ctx context.Context, in *UpdateEnvRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteEnv(ctx context.Context, in *DeleteEnvRequest, opts ...grpc.CallOption) (*Response, error)
	CreateManyEnvData(ctx context.Context, in *CreateManyEnvDataRequest, opts ...grpc.CallOption) (*Response, error)
	CreateEnvData(ctx context.Context, in *CreateEnvDataRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateEnvData(ctx context.Context, in *UpdateEnvDataRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteEnvData(ctx context.Context, in *DeleteEnvDataRequest, opts ...grpc.CallOption) (*Response, error)
	CreateManyGasketData(ctx context.Context, in *CreateManyGasketDataRequest, opts ...grpc.CallOption) (*Response, error)
	CreateGasketData(ctx context.Context, in *CreateGasketDataRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateGasketTypeId(ctx context.Context, in *UpdateGasketTypeIdRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateGasketData(ctx context.Context, in *UpdateGasketDataRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteGasketData(ctx context.Context, in *DeleteGasketDataRequest, opts ...grpc.CallOption) (*Response, error)
}

type gasketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGasketServiceClient(cc grpc.ClientConnInterface) GasketServiceClient {
	return &gasketServiceClient{cc}
}

func (c *gasketServiceClient) GetFullData(ctx context.Context, in *GetFullDataRequest, opts ...grpc.CallOption) (*FullDataResponse, error) {
	out := new(FullDataResponse)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/GetFullData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) GetGasket(ctx context.Context, in *GetGasketRequest, opts ...grpc.CallOption) (*GasketResponse, error) {
	out := new(GasketResponse)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/GetGasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) GetGasketWithThick(ctx context.Context, in *GetGasketRequest, opts ...grpc.CallOption) (*GasketWithThickResponse, error) {
	out := new(GasketWithThickResponse)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/GetGasketWithThick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) CreateGasket(ctx context.Context, in *CreateGasketRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/CreateGasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) UpdateGasket(ctx context.Context, in *UpdateGasketRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/UpdateGasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) DeleteGasket(ctx context.Context, in *DeleteGasketRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/DeleteGasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) GetGasketType(ctx context.Context, in *GetGasketTypeRequest, opts ...grpc.CallOption) (*GasketTypeResponse, error) {
	out := new(GasketTypeResponse)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/GetGasketType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) CreateGasketType(ctx context.Context, in *CreateGasketTypeRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/CreateGasketType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) UpdateGasketType(ctx context.Context, in *UpdateGasketTypeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/UpdateGasketType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) DeleteGasketType(ctx context.Context, in *DeleteGasketTypeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/DeleteGasketType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) GetEnv(ctx context.Context, in *GetEnvRequest, opts ...grpc.CallOption) (*EnvResponse, error) {
	out := new(EnvResponse)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/GetEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) CreateEnv(ctx context.Context, in *CreateEnvRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/CreateEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) UpdateEnv(ctx context.Context, in *UpdateEnvRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/UpdateEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) DeleteEnv(ctx context.Context, in *DeleteEnvRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/DeleteEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) CreateManyEnvData(ctx context.Context, in *CreateManyEnvDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/CreateManyEnvData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) CreateEnvData(ctx context.Context, in *CreateEnvDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/CreateEnvData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) UpdateEnvData(ctx context.Context, in *UpdateEnvDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/UpdateEnvData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) DeleteEnvData(ctx context.Context, in *DeleteEnvDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/DeleteEnvData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) CreateManyGasketData(ctx context.Context, in *CreateManyGasketDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/CreateManyGasketData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) CreateGasketData(ctx context.Context, in *CreateGasketDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/CreateGasketData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) UpdateGasketTypeId(ctx context.Context, in *UpdateGasketTypeIdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/UpdateGasketTypeId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) UpdateGasketData(ctx context.Context, in *UpdateGasketDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/UpdateGasketData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) DeleteGasketData(ctx context.Context, in *DeleteGasketDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.gasket.GasketService/DeleteGasketData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GasketServiceServer is the server API for GasketService service.
// All implementations must embed UnimplementedGasketServiceServer
// for forward compatibility
type GasketServiceServer interface {
	GetFullData(context.Context, *GetFullDataRequest) (*FullDataResponse, error)
	GetGasket(context.Context, *GetGasketRequest) (*GasketResponse, error)
	GetGasketWithThick(context.Context, *GetGasketRequest) (*GasketWithThickResponse, error)
	CreateGasket(context.Context, *CreateGasketRequest) (*IdResponse, error)
	UpdateGasket(context.Context, *UpdateGasketRequest) (*Response, error)
	DeleteGasket(context.Context, *DeleteGasketRequest) (*Response, error)
	GetGasketType(context.Context, *GetGasketTypeRequest) (*GasketTypeResponse, error)
	CreateGasketType(context.Context, *CreateGasketTypeRequest) (*IdResponse, error)
	UpdateGasketType(context.Context, *UpdateGasketTypeRequest) (*Response, error)
	DeleteGasketType(context.Context, *DeleteGasketTypeRequest) (*Response, error)
	GetEnv(context.Context, *GetEnvRequest) (*EnvResponse, error)
	CreateEnv(context.Context, *CreateEnvRequest) (*IdResponse, error)
	UpdateEnv(context.Context, *UpdateEnvRequest) (*Response, error)
	DeleteEnv(context.Context, *DeleteEnvRequest) (*Response, error)
	CreateManyEnvData(context.Context, *CreateManyEnvDataRequest) (*Response, error)
	CreateEnvData(context.Context, *CreateEnvDataRequest) (*Response, error)
	UpdateEnvData(context.Context, *UpdateEnvDataRequest) (*Response, error)
	DeleteEnvData(context.Context, *DeleteEnvDataRequest) (*Response, error)
	CreateManyGasketData(context.Context, *CreateManyGasketDataRequest) (*Response, error)
	CreateGasketData(context.Context, *CreateGasketDataRequest) (*Response, error)
	UpdateGasketTypeId(context.Context, *UpdateGasketTypeIdRequest) (*Response, error)
	UpdateGasketData(context.Context, *UpdateGasketDataRequest) (*Response, error)
	DeleteGasketData(context.Context, *DeleteGasketDataRequest) (*Response, error)
	mustEmbedUnimplementedGasketServiceServer()
}

// UnimplementedGasketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGasketServiceServer struct {
}

func (UnimplementedGasketServiceServer) GetFullData(context.Context, *GetFullDataRequest) (*FullDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullData not implemented")
}
func (UnimplementedGasketServiceServer) GetGasket(context.Context, *GetGasketRequest) (*GasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGasket not implemented")
}
func (UnimplementedGasketServiceServer) GetGasketWithThick(context.Context, *GetGasketRequest) (*GasketWithThickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGasketWithThick not implemented")
}
func (UnimplementedGasketServiceServer) CreateGasket(context.Context, *CreateGasketRequest) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGasket not implemented")
}
func (UnimplementedGasketServiceServer) UpdateGasket(context.Context, *UpdateGasketRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGasket not implemented")
}
func (UnimplementedGasketServiceServer) DeleteGasket(context.Context, *DeleteGasketRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGasket not implemented")
}
func (UnimplementedGasketServiceServer) GetGasketType(context.Context, *GetGasketTypeRequest) (*GasketTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGasketType not implemented")
}
func (UnimplementedGasketServiceServer) CreateGasketType(context.Context, *CreateGasketTypeRequest) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGasketType not implemented")
}
func (UnimplementedGasketServiceServer) UpdateGasketType(context.Context, *UpdateGasketTypeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGasketType not implemented")
}
func (UnimplementedGasketServiceServer) DeleteGasketType(context.Context, *DeleteGasketTypeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGasketType not implemented")
}
func (UnimplementedGasketServiceServer) GetEnv(context.Context, *GetEnvRequest) (*EnvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnv not implemented")
}
func (UnimplementedGasketServiceServer) CreateEnv(context.Context, *CreateEnvRequest) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnv not implemented")
}
func (UnimplementedGasketServiceServer) UpdateEnv(context.Context, *UpdateEnvRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnv not implemented")
}
func (UnimplementedGasketServiceServer) DeleteEnv(context.Context, *DeleteEnvRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnv not implemented")
}
func (UnimplementedGasketServiceServer) CreateManyEnvData(context.Context, *CreateManyEnvDataRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManyEnvData not implemented")
}
func (UnimplementedGasketServiceServer) CreateEnvData(context.Context, *CreateEnvDataRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvData not implemented")
}
func (UnimplementedGasketServiceServer) UpdateEnvData(context.Context, *UpdateEnvDataRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnvData not implemented")
}
func (UnimplementedGasketServiceServer) DeleteEnvData(context.Context, *DeleteEnvDataRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvData not implemented")
}
func (UnimplementedGasketServiceServer) CreateManyGasketData(context.Context, *CreateManyGasketDataRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManyGasketData not implemented")
}
func (UnimplementedGasketServiceServer) CreateGasketData(context.Context, *CreateGasketDataRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGasketData not implemented")
}
func (UnimplementedGasketServiceServer) UpdateGasketTypeId(context.Context, *UpdateGasketTypeIdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGasketTypeId not implemented")
}
func (UnimplementedGasketServiceServer) UpdateGasketData(context.Context, *UpdateGasketDataRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGasketData not implemented")
}
func (UnimplementedGasketServiceServer) DeleteGasketData(context.Context, *DeleteGasketDataRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGasketData not implemented")
}
func (UnimplementedGasketServiceServer) mustEmbedUnimplementedGasketServiceServer() {}

// UnsafeGasketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GasketServiceServer will
// result in compilation errors.
type UnsafeGasketServiceServer interface {
	mustEmbedUnimplementedGasketServiceServer()
}

func RegisterGasketServiceServer(s grpc.ServiceRegistrar, srv GasketServiceServer) {
	s.RegisterService(&GasketService_ServiceDesc, srv)
}

func _GasketService_GetFullData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).GetFullData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/GetFullData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).GetFullData(ctx, req.(*GetFullDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_GetGasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).GetGasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/GetGasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).GetGasket(ctx, req.(*GetGasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_GetGasketWithThick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).GetGasketWithThick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/GetGasketWithThick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).GetGasketWithThick(ctx, req.(*GetGasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_CreateGasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).CreateGasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/CreateGasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).CreateGasket(ctx, req.(*CreateGasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_UpdateGasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).UpdateGasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/UpdateGasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).UpdateGasket(ctx, req.(*UpdateGasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_DeleteGasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).DeleteGasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/DeleteGasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).DeleteGasket(ctx, req.(*DeleteGasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_GetGasketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGasketTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).GetGasketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/GetGasketType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).GetGasketType(ctx, req.(*GetGasketTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_CreateGasketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGasketTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).CreateGasketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/CreateGasketType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).CreateGasketType(ctx, req.(*CreateGasketTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_UpdateGasketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGasketTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).UpdateGasketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/UpdateGasketType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).UpdateGasketType(ctx, req.(*UpdateGasketTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_DeleteGasketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGasketTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).DeleteGasketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/DeleteGasketType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).DeleteGasketType(ctx, req.(*DeleteGasketTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_GetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).GetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/GetEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).GetEnv(ctx, req.(*GetEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_CreateEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).CreateEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/CreateEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).CreateEnv(ctx, req.(*CreateEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_UpdateEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).UpdateEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/UpdateEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).UpdateEnv(ctx, req.(*UpdateEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_DeleteEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).DeleteEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/DeleteEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).DeleteEnv(ctx, req.(*DeleteEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_CreateManyEnvData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManyEnvDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).CreateManyEnvData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/CreateManyEnvData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).CreateManyEnvData(ctx, req.(*CreateManyEnvDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_CreateEnvData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).CreateEnvData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/CreateEnvData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).CreateEnvData(ctx, req.(*CreateEnvDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_UpdateEnvData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).UpdateEnvData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/UpdateEnvData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).UpdateEnvData(ctx, req.(*UpdateEnvDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_DeleteEnvData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).DeleteEnvData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/DeleteEnvData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).DeleteEnvData(ctx, req.(*DeleteEnvDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_CreateManyGasketData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManyGasketDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).CreateManyGasketData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/CreateManyGasketData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).CreateManyGasketData(ctx, req.(*CreateManyGasketDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_CreateGasketData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGasketDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).CreateGasketData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/CreateGasketData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).CreateGasketData(ctx, req.(*CreateGasketDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_UpdateGasketTypeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGasketTypeIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).UpdateGasketTypeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/UpdateGasketTypeId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).UpdateGasketTypeId(ctx, req.(*UpdateGasketTypeIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_UpdateGasketData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGasketDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).UpdateGasketData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/UpdateGasketData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).UpdateGasketData(ctx, req.(*UpdateGasketDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_DeleteGasketData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGasketDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).DeleteGasketData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.gasket.GasketService/DeleteGasketData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).DeleteGasketData(ctx, req.(*DeleteGasketDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GasketService_ServiceDesc is the grpc.ServiceDesc for GasketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GasketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moment_api.gasket.GasketService",
	HandlerType: (*GasketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFullData",
			Handler:    _GasketService_GetFullData_Handler,
		},
		{
			MethodName: "GetGasket",
			Handler:    _GasketService_GetGasket_Handler,
		},
		{
			MethodName: "GetGasketWithThick",
			Handler:    _GasketService_GetGasketWithThick_Handler,
		},
		{
			MethodName: "CreateGasket",
			Handler:    _GasketService_CreateGasket_Handler,
		},
		{
			MethodName: "UpdateGasket",
			Handler:    _GasketService_UpdateGasket_Handler,
		},
		{
			MethodName: "DeleteGasket",
			Handler:    _GasketService_DeleteGasket_Handler,
		},
		{
			MethodName: "GetGasketType",
			Handler:    _GasketService_GetGasketType_Handler,
		},
		{
			MethodName: "CreateGasketType",
			Handler:    _GasketService_CreateGasketType_Handler,
		},
		{
			MethodName: "UpdateGasketType",
			Handler:    _GasketService_UpdateGasketType_Handler,
		},
		{
			MethodName: "DeleteGasketType",
			Handler:    _GasketService_DeleteGasketType_Handler,
		},
		{
			MethodName: "GetEnv",
			Handler:    _GasketService_GetEnv_Handler,
		},
		{
			MethodName: "CreateEnv",
			Handler:    _GasketService_CreateEnv_Handler,
		},
		{
			MethodName: "UpdateEnv",
			Handler:    _GasketService_UpdateEnv_Handler,
		},
		{
			MethodName: "DeleteEnv",
			Handler:    _GasketService_DeleteEnv_Handler,
		},
		{
			MethodName: "CreateManyEnvData",
			Handler:    _GasketService_CreateManyEnvData_Handler,
		},
		{
			MethodName: "CreateEnvData",
			Handler:    _GasketService_CreateEnvData_Handler,
		},
		{
			MethodName: "UpdateEnvData",
			Handler:    _GasketService_UpdateEnvData_Handler,
		},
		{
			MethodName: "DeleteEnvData",
			Handler:    _GasketService_DeleteEnvData_Handler,
		},
		{
			MethodName: "CreateManyGasketData",
			Handler:    _GasketService_CreateManyGasketData_Handler,
		},
		{
			MethodName: "CreateGasketData",
			Handler:    _GasketService_CreateGasketData_Handler,
		},
		{
			MethodName: "UpdateGasketTypeId",
			Handler:    _GasketService_UpdateGasketTypeId_Handler,
		},
		{
			MethodName: "UpdateGasketData",
			Handler:    _GasketService_UpdateGasketData_Handler,
		},
		{
			MethodName: "DeleteGasketData",
			Handler:    _GasketService_DeleteGasketData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moment_api/gasket.proto",
}
