// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: moment_api/material.proto

package material

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MaterialsServiceClient is the client API for MaterialsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaterialsServiceClient interface {
	GetMaterials(ctx context.Context, in *GetMaterialsRequest, opts ...grpc.CallOption) (*MaterialsResponse, error)
	GetMaterialsData(ctx context.Context, in *GetMaterialsDataRequest, opts ...grpc.CallOption) (*MaterialsDataResponse, error)
	GetMaterialsWithIsEmpty(ctx context.Context, in *GetMaterialsRequest, opts ...grpc.CallOption) (*MaterialsWithIsEmptyResponse, error)
	CreateMaterial(ctx context.Context, in *CreateMaterialRequest, opts ...grpc.CallOption) (*IdResponse, error)
	UpdateMaterial(ctx context.Context, in *UpdateMaterialRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteMaterial(ctx context.Context, in *DeleteMaterialRequest, opts ...grpc.CallOption) (*Response, error)
	CreateVoltage(ctx context.Context, in *CreateVoltageRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateVoltage(ctx context.Context, in *UpdateVoltageRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteVoltage(ctx context.Context, in *DeleteVoltageRequest, opts ...grpc.CallOption) (*Response, error)
	CreateElasticity(ctx context.Context, in *CreateElasticityRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateElasticity(ctx context.Context, in *UpdateElasticityRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteElasticity(ctx context.Context, in *DeleteElasticityRequest, opts ...grpc.CallOption) (*Response, error)
	CreateAlpha(ctx context.Context, in *CreateAlphaRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateAlpha(ctx context.Context, in *UpdateAlphaRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteAlpha(ctx context.Context, in *DeleteAlphaRequest, opts ...grpc.CallOption) (*Response, error)
}

type materialsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaterialsServiceClient(cc grpc.ClientConnInterface) MaterialsServiceClient {
	return &materialsServiceClient{cc}
}

func (c *materialsServiceClient) GetMaterials(ctx context.Context, in *GetMaterialsRequest, opts ...grpc.CallOption) (*MaterialsResponse, error) {
	out := new(MaterialsResponse)
	err := c.cc.Invoke(ctx, "/moment_api.material.MaterialsService/GetMaterials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) GetMaterialsData(ctx context.Context, in *GetMaterialsDataRequest, opts ...grpc.CallOption) (*MaterialsDataResponse, error) {
	out := new(MaterialsDataResponse)
	err := c.cc.Invoke(ctx, "/moment_api.material.MaterialsService/GetMaterialsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) GetMaterialsWithIsEmpty(ctx context.Context, in *GetMaterialsRequest, opts ...grpc.CallOption) (*MaterialsWithIsEmptyResponse, error) {
	out := new(MaterialsWithIsEmptyResponse)
	err := c.cc.Invoke(ctx, "/moment_api.material.MaterialsService/GetMaterialsWithIsEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) CreateMaterial(ctx context.Context, in *CreateMaterialRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/moment_api.material.MaterialsService/CreateMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) UpdateMaterial(ctx context.Context, in *UpdateMaterialRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.material.MaterialsService/UpdateMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) DeleteMaterial(ctx context.Context, in *DeleteMaterialRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.material.MaterialsService/DeleteMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) CreateVoltage(ctx context.Context, in *CreateVoltageRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.material.MaterialsService/CreateVoltage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) UpdateVoltage(ctx context.Context, in *UpdateVoltageRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.material.MaterialsService/UpdateVoltage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) DeleteVoltage(ctx context.Context, in *DeleteVoltageRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.material.MaterialsService/DeleteVoltage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) CreateElasticity(ctx context.Context, in *CreateElasticityRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.material.MaterialsService/CreateElasticity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) UpdateElasticity(ctx context.Context, in *UpdateElasticityRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.material.MaterialsService/UpdateElasticity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) DeleteElasticity(ctx context.Context, in *DeleteElasticityRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.material.MaterialsService/DeleteElasticity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) CreateAlpha(ctx context.Context, in *CreateAlphaRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.material.MaterialsService/CreateAlpha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) UpdateAlpha(ctx context.Context, in *UpdateAlphaRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.material.MaterialsService/UpdateAlpha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) DeleteAlpha(ctx context.Context, in *DeleteAlphaRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/moment_api.material.MaterialsService/DeleteAlpha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaterialsServiceServer is the server API for MaterialsService service.
// All implementations must embed UnimplementedMaterialsServiceServer
// for forward compatibility
type MaterialsServiceServer interface {
	GetMaterials(context.Context, *GetMaterialsRequest) (*MaterialsResponse, error)
	GetMaterialsData(context.Context, *GetMaterialsDataRequest) (*MaterialsDataResponse, error)
	GetMaterialsWithIsEmpty(context.Context, *GetMaterialsRequest) (*MaterialsWithIsEmptyResponse, error)
	CreateMaterial(context.Context, *CreateMaterialRequest) (*IdResponse, error)
	UpdateMaterial(context.Context, *UpdateMaterialRequest) (*Response, error)
	DeleteMaterial(context.Context, *DeleteMaterialRequest) (*Response, error)
	CreateVoltage(context.Context, *CreateVoltageRequest) (*Response, error)
	UpdateVoltage(context.Context, *UpdateVoltageRequest) (*Response, error)
	DeleteVoltage(context.Context, *DeleteVoltageRequest) (*Response, error)
	CreateElasticity(context.Context, *CreateElasticityRequest) (*Response, error)
	UpdateElasticity(context.Context, *UpdateElasticityRequest) (*Response, error)
	DeleteElasticity(context.Context, *DeleteElasticityRequest) (*Response, error)
	CreateAlpha(context.Context, *CreateAlphaRequest) (*Response, error)
	UpdateAlpha(context.Context, *UpdateAlphaRequest) (*Response, error)
	DeleteAlpha(context.Context, *DeleteAlphaRequest) (*Response, error)
	mustEmbedUnimplementedMaterialsServiceServer()
}

// UnimplementedMaterialsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMaterialsServiceServer struct {
}

func (UnimplementedMaterialsServiceServer) GetMaterials(context.Context, *GetMaterialsRequest) (*MaterialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaterials not implemented")
}
func (UnimplementedMaterialsServiceServer) GetMaterialsData(context.Context, *GetMaterialsDataRequest) (*MaterialsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaterialsData not implemented")
}
func (UnimplementedMaterialsServiceServer) GetMaterialsWithIsEmpty(context.Context, *GetMaterialsRequest) (*MaterialsWithIsEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaterialsWithIsEmpty not implemented")
}
func (UnimplementedMaterialsServiceServer) CreateMaterial(context.Context, *CreateMaterialRequest) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMaterial not implemented")
}
func (UnimplementedMaterialsServiceServer) UpdateMaterial(context.Context, *UpdateMaterialRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMaterial not implemented")
}
func (UnimplementedMaterialsServiceServer) DeleteMaterial(context.Context, *DeleteMaterialRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMaterial not implemented")
}
func (UnimplementedMaterialsServiceServer) CreateVoltage(context.Context, *CreateVoltageRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVoltage not implemented")
}
func (UnimplementedMaterialsServiceServer) UpdateVoltage(context.Context, *UpdateVoltageRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVoltage not implemented")
}
func (UnimplementedMaterialsServiceServer) DeleteVoltage(context.Context, *DeleteVoltageRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVoltage not implemented")
}
func (UnimplementedMaterialsServiceServer) CreateElasticity(context.Context, *CreateElasticityRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateElasticity not implemented")
}
func (UnimplementedMaterialsServiceServer) UpdateElasticity(context.Context, *UpdateElasticityRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateElasticity not implemented")
}
func (UnimplementedMaterialsServiceServer) DeleteElasticity(context.Context, *DeleteElasticityRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteElasticity not implemented")
}
func (UnimplementedMaterialsServiceServer) CreateAlpha(context.Context, *CreateAlphaRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlpha not implemented")
}
func (UnimplementedMaterialsServiceServer) UpdateAlpha(context.Context, *UpdateAlphaRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlpha not implemented")
}
func (UnimplementedMaterialsServiceServer) DeleteAlpha(context.Context, *DeleteAlphaRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlpha not implemented")
}
func (UnimplementedMaterialsServiceServer) mustEmbedUnimplementedMaterialsServiceServer() {}

// UnsafeMaterialsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaterialsServiceServer will
// result in compilation errors.
type UnsafeMaterialsServiceServer interface {
	mustEmbedUnimplementedMaterialsServiceServer()
}

func RegisterMaterialsServiceServer(s grpc.ServiceRegistrar, srv MaterialsServiceServer) {
	s.RegisterService(&MaterialsService_ServiceDesc, srv)
}

func _MaterialsService_GetMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaterialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).GetMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.material.MaterialsService/GetMaterials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).GetMaterials(ctx, req.(*GetMaterialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_GetMaterialsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaterialsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).GetMaterialsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.material.MaterialsService/GetMaterialsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).GetMaterialsData(ctx, req.(*GetMaterialsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_GetMaterialsWithIsEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaterialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).GetMaterialsWithIsEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.material.MaterialsService/GetMaterialsWithIsEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).GetMaterialsWithIsEmpty(ctx, req.(*GetMaterialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_CreateMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).CreateMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.material.MaterialsService/CreateMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).CreateMaterial(ctx, req.(*CreateMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_UpdateMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).UpdateMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.material.MaterialsService/UpdateMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).UpdateMaterial(ctx, req.(*UpdateMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_DeleteMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).DeleteMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.material.MaterialsService/DeleteMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).DeleteMaterial(ctx, req.(*DeleteMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_CreateVoltage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVoltageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).CreateVoltage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.material.MaterialsService/CreateVoltage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).CreateVoltage(ctx, req.(*CreateVoltageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_UpdateVoltage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVoltageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).UpdateVoltage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.material.MaterialsService/UpdateVoltage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).UpdateVoltage(ctx, req.(*UpdateVoltageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_DeleteVoltage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVoltageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).DeleteVoltage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.material.MaterialsService/DeleteVoltage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).DeleteVoltage(ctx, req.(*DeleteVoltageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_CreateElasticity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateElasticityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).CreateElasticity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.material.MaterialsService/CreateElasticity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).CreateElasticity(ctx, req.(*CreateElasticityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_UpdateElasticity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateElasticityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).UpdateElasticity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.material.MaterialsService/UpdateElasticity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).UpdateElasticity(ctx, req.(*UpdateElasticityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_DeleteElasticity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteElasticityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).DeleteElasticity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.material.MaterialsService/DeleteElasticity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).DeleteElasticity(ctx, req.(*DeleteElasticityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_CreateAlpha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlphaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).CreateAlpha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.material.MaterialsService/CreateAlpha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).CreateAlpha(ctx, req.(*CreateAlphaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_UpdateAlpha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlphaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).UpdateAlpha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.material.MaterialsService/UpdateAlpha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).UpdateAlpha(ctx, req.(*UpdateAlphaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_DeleteAlpha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlphaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).DeleteAlpha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_api.material.MaterialsService/DeleteAlpha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).DeleteAlpha(ctx, req.(*DeleteAlphaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MaterialsService_ServiceDesc is the grpc.ServiceDesc for MaterialsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaterialsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moment_api.material.MaterialsService",
	HandlerType: (*MaterialsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMaterials",
			Handler:    _MaterialsService_GetMaterials_Handler,
		},
		{
			MethodName: "GetMaterialsData",
			Handler:    _MaterialsService_GetMaterialsData_Handler,
		},
		{
			MethodName: "GetMaterialsWithIsEmpty",
			Handler:    _MaterialsService_GetMaterialsWithIsEmpty_Handler,
		},
		{
			MethodName: "CreateMaterial",
			Handler:    _MaterialsService_CreateMaterial_Handler,
		},
		{
			MethodName: "UpdateMaterial",
			Handler:    _MaterialsService_UpdateMaterial_Handler,
		},
		{
			MethodName: "DeleteMaterial",
			Handler:    _MaterialsService_DeleteMaterial_Handler,
		},
		{
			MethodName: "CreateVoltage",
			Handler:    _MaterialsService_CreateVoltage_Handler,
		},
		{
			MethodName: "UpdateVoltage",
			Handler:    _MaterialsService_UpdateVoltage_Handler,
		},
		{
			MethodName: "DeleteVoltage",
			Handler:    _MaterialsService_DeleteVoltage_Handler,
		},
		{
			MethodName: "CreateElasticity",
			Handler:    _MaterialsService_CreateElasticity_Handler,
		},
		{
			MethodName: "UpdateElasticity",
			Handler:    _MaterialsService_UpdateElasticity_Handler,
		},
		{
			MethodName: "DeleteElasticity",
			Handler:    _MaterialsService_DeleteElasticity_Handler,
		},
		{
			MethodName: "CreateAlpha",
			Handler:    _MaterialsService_CreateAlpha_Handler,
		},
		{
			MethodName: "UpdateAlpha",
			Handler:    _MaterialsService_UpdateAlpha_Handler,
		},
		{
			MethodName: "DeleteAlpha",
			Handler:    _MaterialsService_DeleteAlpha_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moment_api/material.proto",
}
