// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: moment_api/calc.proto

package calc

import (
	context "context"
	cap1 "github.com/Alexander272/sealur_proto/api/moment_api/calc/cap"
	flange "github.com/Alexander272/sealur_proto/api/moment_api/calc/flange"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalcServiceClient is the client API for CalcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalcServiceClient interface {
	CalculateFlange(ctx context.Context, in *flange.CalcRequest, opts ...grpc.CallOption) (*flange.CalcRequest, error)
	CalculateCap(ctx context.Context, in *cap1.CalcRequest, opts ...grpc.CallOption) (*cap1.CalcRequest, error)
}

type calcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalcServiceClient(cc grpc.ClientConnInterface) CalcServiceClient {
	return &calcServiceClient{cc}
}

func (c *calcServiceClient) CalculateFlange(ctx context.Context, in *flange.CalcRequest, opts ...grpc.CallOption) (*flange.CalcRequest, error) {
	out := new(flange.CalcRequest)
	err := c.cc.Invoke(ctx, "/calc.CalcService/CalculateFlange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calcServiceClient) CalculateCap(ctx context.Context, in *cap1.CalcRequest, opts ...grpc.CallOption) (*cap1.CalcRequest, error) {
	out := new(cap1.CalcRequest)
	err := c.cc.Invoke(ctx, "/calc.CalcService/CalculateCap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalcServiceServer is the server API for CalcService service.
// All implementations must embed UnimplementedCalcServiceServer
// for forward compatibility
type CalcServiceServer interface {
	CalculateFlange(context.Context, *flange.CalcRequest) (*flange.CalcRequest, error)
	CalculateCap(context.Context, *cap1.CalcRequest) (*cap1.CalcRequest, error)
	mustEmbedUnimplementedCalcServiceServer()
}

// UnimplementedCalcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalcServiceServer struct {
}

func (UnimplementedCalcServiceServer) CalculateFlange(context.Context, *flange.CalcRequest) (*flange.CalcRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFlange not implemented")
}
func (UnimplementedCalcServiceServer) CalculateCap(context.Context, *cap1.CalcRequest) (*cap1.CalcRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateCap not implemented")
}
func (UnimplementedCalcServiceServer) mustEmbedUnimplementedCalcServiceServer() {}

// UnsafeCalcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalcServiceServer will
// result in compilation errors.
type UnsafeCalcServiceServer interface {
	mustEmbedUnimplementedCalcServiceServer()
}

func RegisterCalcServiceServer(s grpc.ServiceRegistrar, srv CalcServiceServer) {
	s.RegisterService(&CalcService_ServiceDesc, srv)
}

func _CalcService_CalculateFlange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(flange.CalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServiceServer).CalculateFlange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calc.CalcService/CalculateFlange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServiceServer).CalculateFlange(ctx, req.(*flange.CalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalcService_CalculateCap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cap1.CalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServiceServer).CalculateCap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calc.CalcService/CalculateCap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServiceServer).CalculateCap(ctx, req.(*cap1.CalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalcService_ServiceDesc is the grpc.ServiceDesc for CalcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calc.CalcService",
	HandlerType: (*CalcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateFlange",
			Handler:    _CalcService_CalculateFlange_Handler,
		},
		{
			MethodName: "CalculateCap",
			Handler:    _CalcService_CalculateCap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moment_api/calc.proto",
}
