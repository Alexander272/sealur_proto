// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: moment/device_api.proto

package device_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceServiceClient interface {
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error)
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*IdResponse, error)
	CreateFewDevice(ctx context.Context, in *CreateFewDeviceRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*Response, error)
	GetPressure(ctx context.Context, in *GetPressureRequest, opts ...grpc.CallOption) (*PressureResponse, error)
	CreatePressure(ctx context.Context, in *CreatePressureRequest, opts ...grpc.CallOption) (*IdResponse, error)
	CreateFewPressure(ctx context.Context, in *CreateFewPressureRequest, opts ...grpc.CallOption) (*Response, error)
	UpdatePressure(ctx context.Context, in *UpdatePressureRequest, opts ...grpc.CallOption) (*Response, error)
	DeletePressure(ctx context.Context, in *DeletePressureRequest, opts ...grpc.CallOption) (*Response, error)
	GetTubeCount(ctx context.Context, in *GetTubeCountRequest, opts ...grpc.CallOption) (*TubeCountResponse, error)
	CreateTubeCount(ctx context.Context, in *CreateTubeCountRequest, opts ...grpc.CallOption) (*IdResponse, error)
	CreateFewTubeCount(ctx context.Context, in *CreateFewTubeCountRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateTubeCount(ctx context.Context, in *UpdateTubeCountRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteTubeCount(ctx context.Context, in *DeleteTubeCountRequest, opts ...grpc.CallOption) (*Response, error)
	GetFinningFactor(ctx context.Context, in *GetFinningFactorRequest, opts ...grpc.CallOption) (*FinningFactorResponse, error)
	CreateFinningFactor(ctx context.Context, in *CreateFinningFactorRequest, opts ...grpc.CallOption) (*IdResponse, error)
	CreateFewFinningFactor(ctx context.Context, in *CreateFewFinningFactorRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateFinningFactor(ctx context.Context, in *UpdateFinningFactorRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteFinningFactor(ctx context.Context, in *DeleteFinningFactorRequest, opts ...grpc.CallOption) (*Response, error)
	GetSectionExecution(ctx context.Context, in *GetSectionExecutionRequest, opts ...grpc.CallOption) (*SectionExecutionResponse, error)
	CreateSectionExecution(ctx context.Context, in *CreateSectionExecutionRequest, opts ...grpc.CallOption) (*IdResponse, error)
	CreateFewSectionExecution(ctx context.Context, in *CreateFewSectionExecutionRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateSectionExecution(ctx context.Context, in *UpdateSectionExecutionRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteSectionExecution(ctx context.Context, in *DeleteSectionExecutionRequest, opts ...grpc.CallOption) (*Response, error)
	GetTubeLength(ctx context.Context, in *GetTubeLengthRequest, opts ...grpc.CallOption) (*TubeLengthResponse, error)
	CreateTubeLength(ctx context.Context, in *CreateTubeLengthRequest, opts ...grpc.CallOption) (*IdResponse, error)
	CreateFewTubeLength(ctx context.Context, in *CreateFewTubeLengthRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateTubeLength(ctx context.Context, in *UpdateTubeLengthRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteTubeLength(ctx context.Context, in *DeleteTubeLengthRequest, opts ...grpc.CallOption) (*Response, error)
	GetNumberOfMoves(ctx context.Context, in *GetNumberOfMovesRequest, opts ...grpc.CallOption) (*NumberOfMovesResponse, error)
	CreateNumberOfMoves(ctx context.Context, in *CreateNumberOfMovesRequest, opts ...grpc.CallOption) (*IdResponse, error)
	CreateFewNumberOfMoves(ctx context.Context, in *CreateFewNumberOfMovesRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateNumberOfMoves(ctx context.Context, in *UpdateNumberOfMovesRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteNumberOfMoves(ctx context.Context, in *DeleteNumberOfMovesRequest, opts ...grpc.CallOption) (*Response, error)
	GetNameGasket(ctx context.Context, in *GetNameGasketRequest, opts ...grpc.CallOption) (*NameGasketResponse, error)
	GetFullNameGasket(ctx context.Context, in *GetFullNameGasketRequest, opts ...grpc.CallOption) (*FullNameGasketResponse, error)
	GetNameGasketSize(ctx context.Context, in *GetNameGasketSizeRequest, opts ...grpc.CallOption) (*NameGasketSizeResponse, error)
	CreateNameGasket(ctx context.Context, in *CreateNameGasketRequest, opts ...grpc.CallOption) (*IdResponse, error)
	CreateFewNameGasket(ctx context.Context, in *CreateFewNameGasketRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateNameGasket(ctx context.Context, in *UpdateNameGasketRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteNameGasket(ctx context.Context, in *DeleteNameGasketRequest, opts ...grpc.CallOption) (*Response, error)
}

type deviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServiceClient(cc grpc.ClientConnInterface) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error) {
	out := new(DeviceResponse)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/GetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CreateFewDevice(ctx context.Context, in *CreateFewDeviceRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/CreateFewDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/UpdateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetPressure(ctx context.Context, in *GetPressureRequest, opts ...grpc.CallOption) (*PressureResponse, error) {
	out := new(PressureResponse)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/GetPressure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CreatePressure(ctx context.Context, in *CreatePressureRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/CreatePressure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CreateFewPressure(ctx context.Context, in *CreateFewPressureRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/CreateFewPressure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdatePressure(ctx context.Context, in *UpdatePressureRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/UpdatePressure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) DeletePressure(ctx context.Context, in *DeletePressureRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/DeletePressure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetTubeCount(ctx context.Context, in *GetTubeCountRequest, opts ...grpc.CallOption) (*TubeCountResponse, error) {
	out := new(TubeCountResponse)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/GetTubeCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CreateTubeCount(ctx context.Context, in *CreateTubeCountRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/CreateTubeCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CreateFewTubeCount(ctx context.Context, in *CreateFewTubeCountRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/CreateFewTubeCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdateTubeCount(ctx context.Context, in *UpdateTubeCountRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/UpdateTubeCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) DeleteTubeCount(ctx context.Context, in *DeleteTubeCountRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/DeleteTubeCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetFinningFactor(ctx context.Context, in *GetFinningFactorRequest, opts ...grpc.CallOption) (*FinningFactorResponse, error) {
	out := new(FinningFactorResponse)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/GetFinningFactor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CreateFinningFactor(ctx context.Context, in *CreateFinningFactorRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/CreateFinningFactor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CreateFewFinningFactor(ctx context.Context, in *CreateFewFinningFactorRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/CreateFewFinningFactor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdateFinningFactor(ctx context.Context, in *UpdateFinningFactorRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/UpdateFinningFactor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) DeleteFinningFactor(ctx context.Context, in *DeleteFinningFactorRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/DeleteFinningFactor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetSectionExecution(ctx context.Context, in *GetSectionExecutionRequest, opts ...grpc.CallOption) (*SectionExecutionResponse, error) {
	out := new(SectionExecutionResponse)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/GetSectionExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CreateSectionExecution(ctx context.Context, in *CreateSectionExecutionRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/CreateSectionExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CreateFewSectionExecution(ctx context.Context, in *CreateFewSectionExecutionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/CreateFewSectionExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdateSectionExecution(ctx context.Context, in *UpdateSectionExecutionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/UpdateSectionExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) DeleteSectionExecution(ctx context.Context, in *DeleteSectionExecutionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/DeleteSectionExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetTubeLength(ctx context.Context, in *GetTubeLengthRequest, opts ...grpc.CallOption) (*TubeLengthResponse, error) {
	out := new(TubeLengthResponse)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/GetTubeLength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CreateTubeLength(ctx context.Context, in *CreateTubeLengthRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/CreateTubeLength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CreateFewTubeLength(ctx context.Context, in *CreateFewTubeLengthRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/CreateFewTubeLength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdateTubeLength(ctx context.Context, in *UpdateTubeLengthRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/UpdateTubeLength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) DeleteTubeLength(ctx context.Context, in *DeleteTubeLengthRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/DeleteTubeLength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetNumberOfMoves(ctx context.Context, in *GetNumberOfMovesRequest, opts ...grpc.CallOption) (*NumberOfMovesResponse, error) {
	out := new(NumberOfMovesResponse)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/GetNumberOfMoves", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CreateNumberOfMoves(ctx context.Context, in *CreateNumberOfMovesRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/CreateNumberOfMoves", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CreateFewNumberOfMoves(ctx context.Context, in *CreateFewNumberOfMovesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/CreateFewNumberOfMoves", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdateNumberOfMoves(ctx context.Context, in *UpdateNumberOfMovesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/UpdateNumberOfMoves", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) DeleteNumberOfMoves(ctx context.Context, in *DeleteNumberOfMovesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/DeleteNumberOfMoves", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetNameGasket(ctx context.Context, in *GetNameGasketRequest, opts ...grpc.CallOption) (*NameGasketResponse, error) {
	out := new(NameGasketResponse)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/GetNameGasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetFullNameGasket(ctx context.Context, in *GetFullNameGasketRequest, opts ...grpc.CallOption) (*FullNameGasketResponse, error) {
	out := new(FullNameGasketResponse)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/GetFullNameGasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetNameGasketSize(ctx context.Context, in *GetNameGasketSizeRequest, opts ...grpc.CallOption) (*NameGasketSizeResponse, error) {
	out := new(NameGasketSizeResponse)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/getNameGasketSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CreateNameGasket(ctx context.Context, in *CreateNameGasketRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/CreateNameGasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CreateFewNameGasket(ctx context.Context, in *CreateFewNameGasketRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/CreateFewNameGasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdateNameGasket(ctx context.Context, in *UpdateNameGasketRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/UpdateNameGasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) DeleteNameGasket(ctx context.Context, in *DeleteNameGasketRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device_api.DeviceService/DeleteNameGasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServiceServer is the server API for DeviceService service.
// All implementations must embed UnimplementedDeviceServiceServer
// for forward compatibility
type DeviceServiceServer interface {
	GetDevice(context.Context, *GetDeviceRequest) (*DeviceResponse, error)
	CreateDevice(context.Context, *CreateDeviceRequest) (*IdResponse, error)
	CreateFewDevice(context.Context, *CreateFewDeviceRequest) (*Response, error)
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*Response, error)
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*Response, error)
	GetPressure(context.Context, *GetPressureRequest) (*PressureResponse, error)
	CreatePressure(context.Context, *CreatePressureRequest) (*IdResponse, error)
	CreateFewPressure(context.Context, *CreateFewPressureRequest) (*Response, error)
	UpdatePressure(context.Context, *UpdatePressureRequest) (*Response, error)
	DeletePressure(context.Context, *DeletePressureRequest) (*Response, error)
	GetTubeCount(context.Context, *GetTubeCountRequest) (*TubeCountResponse, error)
	CreateTubeCount(context.Context, *CreateTubeCountRequest) (*IdResponse, error)
	CreateFewTubeCount(context.Context, *CreateFewTubeCountRequest) (*Response, error)
	UpdateTubeCount(context.Context, *UpdateTubeCountRequest) (*Response, error)
	DeleteTubeCount(context.Context, *DeleteTubeCountRequest) (*Response, error)
	GetFinningFactor(context.Context, *GetFinningFactorRequest) (*FinningFactorResponse, error)
	CreateFinningFactor(context.Context, *CreateFinningFactorRequest) (*IdResponse, error)
	CreateFewFinningFactor(context.Context, *CreateFewFinningFactorRequest) (*Response, error)
	UpdateFinningFactor(context.Context, *UpdateFinningFactorRequest) (*Response, error)
	DeleteFinningFactor(context.Context, *DeleteFinningFactorRequest) (*Response, error)
	GetSectionExecution(context.Context, *GetSectionExecutionRequest) (*SectionExecutionResponse, error)
	CreateSectionExecution(context.Context, *CreateSectionExecutionRequest) (*IdResponse, error)
	CreateFewSectionExecution(context.Context, *CreateFewSectionExecutionRequest) (*Response, error)
	UpdateSectionExecution(context.Context, *UpdateSectionExecutionRequest) (*Response, error)
	DeleteSectionExecution(context.Context, *DeleteSectionExecutionRequest) (*Response, error)
	GetTubeLength(context.Context, *GetTubeLengthRequest) (*TubeLengthResponse, error)
	CreateTubeLength(context.Context, *CreateTubeLengthRequest) (*IdResponse, error)
	CreateFewTubeLength(context.Context, *CreateFewTubeLengthRequest) (*Response, error)
	UpdateTubeLength(context.Context, *UpdateTubeLengthRequest) (*Response, error)
	DeleteTubeLength(context.Context, *DeleteTubeLengthRequest) (*Response, error)
	GetNumberOfMoves(context.Context, *GetNumberOfMovesRequest) (*NumberOfMovesResponse, error)
	CreateNumberOfMoves(context.Context, *CreateNumberOfMovesRequest) (*IdResponse, error)
	CreateFewNumberOfMoves(context.Context, *CreateFewNumberOfMovesRequest) (*Response, error)
	UpdateNumberOfMoves(context.Context, *UpdateNumberOfMovesRequest) (*Response, error)
	DeleteNumberOfMoves(context.Context, *DeleteNumberOfMovesRequest) (*Response, error)
	GetNameGasket(context.Context, *GetNameGasketRequest) (*NameGasketResponse, error)
	GetFullNameGasket(context.Context, *GetFullNameGasketRequest) (*FullNameGasketResponse, error)
	GetNameGasketSize(context.Context, *GetNameGasketSizeRequest) (*NameGasketSizeResponse, error)
	CreateNameGasket(context.Context, *CreateNameGasketRequest) (*IdResponse, error)
	CreateFewNameGasket(context.Context, *CreateFewNameGasketRequest) (*Response, error)
	UpdateNameGasket(context.Context, *UpdateNameGasketRequest) (*Response, error)
	DeleteNameGasket(context.Context, *DeleteNameGasketRequest) (*Response, error)
	mustEmbedUnimplementedDeviceServiceServer()
}

// UnimplementedDeviceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceServiceServer struct {
}

func (UnimplementedDeviceServiceServer) GetDevice(context.Context, *GetDeviceRequest) (*DeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedDeviceServiceServer) CreateDevice(context.Context, *CreateDeviceRequest) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedDeviceServiceServer) CreateFewDevice(context.Context, *CreateFewDeviceRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFewDevice not implemented")
}
func (UnimplementedDeviceServiceServer) UpdateDevice(context.Context, *UpdateDeviceRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedDeviceServiceServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedDeviceServiceServer) GetPressure(context.Context, *GetPressureRequest) (*PressureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPressure not implemented")
}
func (UnimplementedDeviceServiceServer) CreatePressure(context.Context, *CreatePressureRequest) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePressure not implemented")
}
func (UnimplementedDeviceServiceServer) CreateFewPressure(context.Context, *CreateFewPressureRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFewPressure not implemented")
}
func (UnimplementedDeviceServiceServer) UpdatePressure(context.Context, *UpdatePressureRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePressure not implemented")
}
func (UnimplementedDeviceServiceServer) DeletePressure(context.Context, *DeletePressureRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePressure not implemented")
}
func (UnimplementedDeviceServiceServer) GetTubeCount(context.Context, *GetTubeCountRequest) (*TubeCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTubeCount not implemented")
}
func (UnimplementedDeviceServiceServer) CreateTubeCount(context.Context, *CreateTubeCountRequest) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTubeCount not implemented")
}
func (UnimplementedDeviceServiceServer) CreateFewTubeCount(context.Context, *CreateFewTubeCountRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFewTubeCount not implemented")
}
func (UnimplementedDeviceServiceServer) UpdateTubeCount(context.Context, *UpdateTubeCountRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTubeCount not implemented")
}
func (UnimplementedDeviceServiceServer) DeleteTubeCount(context.Context, *DeleteTubeCountRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTubeCount not implemented")
}
func (UnimplementedDeviceServiceServer) GetFinningFactor(context.Context, *GetFinningFactorRequest) (*FinningFactorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinningFactor not implemented")
}
func (UnimplementedDeviceServiceServer) CreateFinningFactor(context.Context, *CreateFinningFactorRequest) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFinningFactor not implemented")
}
func (UnimplementedDeviceServiceServer) CreateFewFinningFactor(context.Context, *CreateFewFinningFactorRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFewFinningFactor not implemented")
}
func (UnimplementedDeviceServiceServer) UpdateFinningFactor(context.Context, *UpdateFinningFactorRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFinningFactor not implemented")
}
func (UnimplementedDeviceServiceServer) DeleteFinningFactor(context.Context, *DeleteFinningFactorRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFinningFactor not implemented")
}
func (UnimplementedDeviceServiceServer) GetSectionExecution(context.Context, *GetSectionExecutionRequest) (*SectionExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSectionExecution not implemented")
}
func (UnimplementedDeviceServiceServer) CreateSectionExecution(context.Context, *CreateSectionExecutionRequest) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSectionExecution not implemented")
}
func (UnimplementedDeviceServiceServer) CreateFewSectionExecution(context.Context, *CreateFewSectionExecutionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFewSectionExecution not implemented")
}
func (UnimplementedDeviceServiceServer) UpdateSectionExecution(context.Context, *UpdateSectionExecutionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSectionExecution not implemented")
}
func (UnimplementedDeviceServiceServer) DeleteSectionExecution(context.Context, *DeleteSectionExecutionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSectionExecution not implemented")
}
func (UnimplementedDeviceServiceServer) GetTubeLength(context.Context, *GetTubeLengthRequest) (*TubeLengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTubeLength not implemented")
}
func (UnimplementedDeviceServiceServer) CreateTubeLength(context.Context, *CreateTubeLengthRequest) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTubeLength not implemented")
}
func (UnimplementedDeviceServiceServer) CreateFewTubeLength(context.Context, *CreateFewTubeLengthRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFewTubeLength not implemented")
}
func (UnimplementedDeviceServiceServer) UpdateTubeLength(context.Context, *UpdateTubeLengthRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTubeLength not implemented")
}
func (UnimplementedDeviceServiceServer) DeleteTubeLength(context.Context, *DeleteTubeLengthRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTubeLength not implemented")
}
func (UnimplementedDeviceServiceServer) GetNumberOfMoves(context.Context, *GetNumberOfMovesRequest) (*NumberOfMovesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumberOfMoves not implemented")
}
func (UnimplementedDeviceServiceServer) CreateNumberOfMoves(context.Context, *CreateNumberOfMovesRequest) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNumberOfMoves not implemented")
}
func (UnimplementedDeviceServiceServer) CreateFewNumberOfMoves(context.Context, *CreateFewNumberOfMovesRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFewNumberOfMoves not implemented")
}
func (UnimplementedDeviceServiceServer) UpdateNumberOfMoves(context.Context, *UpdateNumberOfMovesRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNumberOfMoves not implemented")
}
func (UnimplementedDeviceServiceServer) DeleteNumberOfMoves(context.Context, *DeleteNumberOfMovesRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNumberOfMoves not implemented")
}
func (UnimplementedDeviceServiceServer) GetNameGasket(context.Context, *GetNameGasketRequest) (*NameGasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNameGasket not implemented")
}
func (UnimplementedDeviceServiceServer) GetFullNameGasket(context.Context, *GetFullNameGasketRequest) (*FullNameGasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullNameGasket not implemented")
}
func (UnimplementedDeviceServiceServer) GetNameGasketSize(context.Context, *GetNameGasketSizeRequest) (*NameGasketSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNameGasketSize not implemented")
}
func (UnimplementedDeviceServiceServer) CreateNameGasket(context.Context, *CreateNameGasketRequest) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNameGasket not implemented")
}
func (UnimplementedDeviceServiceServer) CreateFewNameGasket(context.Context, *CreateFewNameGasketRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFewNameGasket not implemented")
}
func (UnimplementedDeviceServiceServer) UpdateNameGasket(context.Context, *UpdateNameGasketRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNameGasket not implemented")
}
func (UnimplementedDeviceServiceServer) DeleteNameGasket(context.Context, *DeleteNameGasketRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNameGasket not implemented")
}
func (UnimplementedDeviceServiceServer) mustEmbedUnimplementedDeviceServiceServer() {}

// UnsafeDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServiceServer will
// result in compilation errors.
type UnsafeDeviceServiceServer interface {
	mustEmbedUnimplementedDeviceServiceServer()
}

func RegisterDeviceServiceServer(s grpc.ServiceRegistrar, srv DeviceServiceServer) {
	s.RegisterService(&DeviceService_ServiceDesc, srv)
}

func _DeviceService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CreateFewDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFewDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CreateFewDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/CreateFewDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CreateFewDevice(ctx, req.(*CreateFewDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetPressure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPressureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetPressure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/GetPressure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetPressure(ctx, req.(*GetPressureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CreatePressure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePressureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CreatePressure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/CreatePressure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CreatePressure(ctx, req.(*CreatePressureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CreateFewPressure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFewPressureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CreateFewPressure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/CreateFewPressure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CreateFewPressure(ctx, req.(*CreateFewPressureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UpdatePressure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePressureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UpdatePressure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/UpdatePressure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UpdatePressure(ctx, req.(*UpdatePressureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_DeletePressure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePressureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).DeletePressure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/DeletePressure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).DeletePressure(ctx, req.(*DeletePressureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetTubeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTubeCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetTubeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/GetTubeCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetTubeCount(ctx, req.(*GetTubeCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CreateTubeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTubeCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CreateTubeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/CreateTubeCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CreateTubeCount(ctx, req.(*CreateTubeCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CreateFewTubeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFewTubeCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CreateFewTubeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/CreateFewTubeCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CreateFewTubeCount(ctx, req.(*CreateFewTubeCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UpdateTubeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTubeCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UpdateTubeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/UpdateTubeCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UpdateTubeCount(ctx, req.(*UpdateTubeCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_DeleteTubeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTubeCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).DeleteTubeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/DeleteTubeCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).DeleteTubeCount(ctx, req.(*DeleteTubeCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetFinningFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinningFactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetFinningFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/GetFinningFactor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetFinningFactor(ctx, req.(*GetFinningFactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CreateFinningFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFinningFactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CreateFinningFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/CreateFinningFactor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CreateFinningFactor(ctx, req.(*CreateFinningFactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CreateFewFinningFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFewFinningFactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CreateFewFinningFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/CreateFewFinningFactor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CreateFewFinningFactor(ctx, req.(*CreateFewFinningFactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UpdateFinningFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFinningFactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UpdateFinningFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/UpdateFinningFactor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UpdateFinningFactor(ctx, req.(*UpdateFinningFactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_DeleteFinningFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFinningFactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).DeleteFinningFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/DeleteFinningFactor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).DeleteFinningFactor(ctx, req.(*DeleteFinningFactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetSectionExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSectionExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetSectionExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/GetSectionExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetSectionExecution(ctx, req.(*GetSectionExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CreateSectionExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSectionExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CreateSectionExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/CreateSectionExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CreateSectionExecution(ctx, req.(*CreateSectionExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CreateFewSectionExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFewSectionExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CreateFewSectionExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/CreateFewSectionExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CreateFewSectionExecution(ctx, req.(*CreateFewSectionExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UpdateSectionExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSectionExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UpdateSectionExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/UpdateSectionExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UpdateSectionExecution(ctx, req.(*UpdateSectionExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_DeleteSectionExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSectionExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).DeleteSectionExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/DeleteSectionExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).DeleteSectionExecution(ctx, req.(*DeleteSectionExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetTubeLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTubeLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetTubeLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/GetTubeLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetTubeLength(ctx, req.(*GetTubeLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CreateTubeLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTubeLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CreateTubeLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/CreateTubeLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CreateTubeLength(ctx, req.(*CreateTubeLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CreateFewTubeLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFewTubeLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CreateFewTubeLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/CreateFewTubeLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CreateFewTubeLength(ctx, req.(*CreateFewTubeLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UpdateTubeLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTubeLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UpdateTubeLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/UpdateTubeLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UpdateTubeLength(ctx, req.(*UpdateTubeLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_DeleteTubeLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTubeLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).DeleteTubeLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/DeleteTubeLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).DeleteTubeLength(ctx, req.(*DeleteTubeLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetNumberOfMoves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNumberOfMovesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetNumberOfMoves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/GetNumberOfMoves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetNumberOfMoves(ctx, req.(*GetNumberOfMovesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CreateNumberOfMoves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNumberOfMovesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CreateNumberOfMoves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/CreateNumberOfMoves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CreateNumberOfMoves(ctx, req.(*CreateNumberOfMovesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CreateFewNumberOfMoves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFewNumberOfMovesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CreateFewNumberOfMoves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/CreateFewNumberOfMoves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CreateFewNumberOfMoves(ctx, req.(*CreateFewNumberOfMovesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UpdateNumberOfMoves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNumberOfMovesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UpdateNumberOfMoves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/UpdateNumberOfMoves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UpdateNumberOfMoves(ctx, req.(*UpdateNumberOfMovesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_DeleteNumberOfMoves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNumberOfMovesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).DeleteNumberOfMoves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/DeleteNumberOfMoves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).DeleteNumberOfMoves(ctx, req.(*DeleteNumberOfMovesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetNameGasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNameGasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetNameGasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/GetNameGasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetNameGasket(ctx, req.(*GetNameGasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetFullNameGasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullNameGasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetFullNameGasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/GetFullNameGasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetFullNameGasket(ctx, req.(*GetFullNameGasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetNameGasketSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNameGasketSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetNameGasketSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/getNameGasketSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetNameGasketSize(ctx, req.(*GetNameGasketSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CreateNameGasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNameGasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CreateNameGasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/CreateNameGasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CreateNameGasket(ctx, req.(*CreateNameGasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CreateFewNameGasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFewNameGasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CreateFewNameGasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/CreateFewNameGasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CreateFewNameGasket(ctx, req.(*CreateFewNameGasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UpdateNameGasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNameGasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UpdateNameGasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/UpdateNameGasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UpdateNameGasket(ctx, req.(*UpdateNameGasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_DeleteNameGasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNameGasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).DeleteNameGasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_api.DeviceService/DeleteNameGasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).DeleteNameGasket(ctx, req.(*DeleteNameGasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceService_ServiceDesc is the grpc.ServiceDesc for DeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "device_api.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevice",
			Handler:    _DeviceService_GetDevice_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _DeviceService_CreateDevice_Handler,
		},
		{
			MethodName: "CreateFewDevice",
			Handler:    _DeviceService_CreateFewDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _DeviceService_UpdateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _DeviceService_DeleteDevice_Handler,
		},
		{
			MethodName: "GetPressure",
			Handler:    _DeviceService_GetPressure_Handler,
		},
		{
			MethodName: "CreatePressure",
			Handler:    _DeviceService_CreatePressure_Handler,
		},
		{
			MethodName: "CreateFewPressure",
			Handler:    _DeviceService_CreateFewPressure_Handler,
		},
		{
			MethodName: "UpdatePressure",
			Handler:    _DeviceService_UpdatePressure_Handler,
		},
		{
			MethodName: "DeletePressure",
			Handler:    _DeviceService_DeletePressure_Handler,
		},
		{
			MethodName: "GetTubeCount",
			Handler:    _DeviceService_GetTubeCount_Handler,
		},
		{
			MethodName: "CreateTubeCount",
			Handler:    _DeviceService_CreateTubeCount_Handler,
		},
		{
			MethodName: "CreateFewTubeCount",
			Handler:    _DeviceService_CreateFewTubeCount_Handler,
		},
		{
			MethodName: "UpdateTubeCount",
			Handler:    _DeviceService_UpdateTubeCount_Handler,
		},
		{
			MethodName: "DeleteTubeCount",
			Handler:    _DeviceService_DeleteTubeCount_Handler,
		},
		{
			MethodName: "GetFinningFactor",
			Handler:    _DeviceService_GetFinningFactor_Handler,
		},
		{
			MethodName: "CreateFinningFactor",
			Handler:    _DeviceService_CreateFinningFactor_Handler,
		},
		{
			MethodName: "CreateFewFinningFactor",
			Handler:    _DeviceService_CreateFewFinningFactor_Handler,
		},
		{
			MethodName: "UpdateFinningFactor",
			Handler:    _DeviceService_UpdateFinningFactor_Handler,
		},
		{
			MethodName: "DeleteFinningFactor",
			Handler:    _DeviceService_DeleteFinningFactor_Handler,
		},
		{
			MethodName: "GetSectionExecution",
			Handler:    _DeviceService_GetSectionExecution_Handler,
		},
		{
			MethodName: "CreateSectionExecution",
			Handler:    _DeviceService_CreateSectionExecution_Handler,
		},
		{
			MethodName: "CreateFewSectionExecution",
			Handler:    _DeviceService_CreateFewSectionExecution_Handler,
		},
		{
			MethodName: "UpdateSectionExecution",
			Handler:    _DeviceService_UpdateSectionExecution_Handler,
		},
		{
			MethodName: "DeleteSectionExecution",
			Handler:    _DeviceService_DeleteSectionExecution_Handler,
		},
		{
			MethodName: "GetTubeLength",
			Handler:    _DeviceService_GetTubeLength_Handler,
		},
		{
			MethodName: "CreateTubeLength",
			Handler:    _DeviceService_CreateTubeLength_Handler,
		},
		{
			MethodName: "CreateFewTubeLength",
			Handler:    _DeviceService_CreateFewTubeLength_Handler,
		},
		{
			MethodName: "UpdateTubeLength",
			Handler:    _DeviceService_UpdateTubeLength_Handler,
		},
		{
			MethodName: "DeleteTubeLength",
			Handler:    _DeviceService_DeleteTubeLength_Handler,
		},
		{
			MethodName: "GetNumberOfMoves",
			Handler:    _DeviceService_GetNumberOfMoves_Handler,
		},
		{
			MethodName: "CreateNumberOfMoves",
			Handler:    _DeviceService_CreateNumberOfMoves_Handler,
		},
		{
			MethodName: "CreateFewNumberOfMoves",
			Handler:    _DeviceService_CreateFewNumberOfMoves_Handler,
		},
		{
			MethodName: "UpdateNumberOfMoves",
			Handler:    _DeviceService_UpdateNumberOfMoves_Handler,
		},
		{
			MethodName: "DeleteNumberOfMoves",
			Handler:    _DeviceService_DeleteNumberOfMoves_Handler,
		},
		{
			MethodName: "GetNameGasket",
			Handler:    _DeviceService_GetNameGasket_Handler,
		},
		{
			MethodName: "GetFullNameGasket",
			Handler:    _DeviceService_GetFullNameGasket_Handler,
		},
		{
			MethodName: "getNameGasketSize",
			Handler:    _DeviceService_GetNameGasketSize_Handler,
		},
		{
			MethodName: "CreateNameGasket",
			Handler:    _DeviceService_CreateNameGasket_Handler,
		},
		{
			MethodName: "CreateFewNameGasket",
			Handler:    _DeviceService_CreateFewNameGasket_Handler,
		},
		{
			MethodName: "UpdateNameGasket",
			Handler:    _DeviceService_UpdateNameGasket_Handler,
		},
		{
			MethodName: "DeleteNameGasket",
			Handler:    _DeviceService_DeleteNameGasket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moment/device_api.proto",
}
