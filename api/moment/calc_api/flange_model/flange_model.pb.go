// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: moment/calc_api/flange_model.proto

package flange_model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FlangeData_Type int32

const (
	FlangeData_welded FlangeData_Type = 0
	FlangeData_flat   FlangeData_Type = 1
	FlangeData_free   FlangeData_Type = 2
)

// Enum value maps for FlangeData_Type.
var (
	FlangeData_Type_name = map[int32]string{
		0: "welded",
		1: "flat",
		2: "free",
	}
	FlangeData_Type_value = map[string]int32{
		"welded": 0,
		"flat":   1,
		"free":   2,
	}
)

func (x FlangeData_Type) Enum() *FlangeData_Type {
	p := new(FlangeData_Type)
	*p = x
	return p
}

func (x FlangeData_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlangeData_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_flange_model_proto_enumTypes[0].Descriptor()
}

func (FlangeData_Type) Type() protoreflect.EnumType {
	return &file_moment_calc_api_flange_model_proto_enumTypes[0]
}

func (x FlangeData_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlangeData_Type.Descriptor instead.
func (FlangeData_Type) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{1, 0}
}

type GasketData_Type int32

const (
	GasketData_Soft  GasketData_Type = 0
	GasketData_Oval  GasketData_Type = 1
	GasketData_Metal GasketData_Type = 2
)

// Enum value maps for GasketData_Type.
var (
	GasketData_Type_name = map[int32]string{
		0: "Soft",
		1: "Oval",
		2: "Metal",
	}
	GasketData_Type_value = map[string]int32{
		"Soft":  0,
		"Oval":  1,
		"Metal": 2,
	}
)

func (x GasketData_Type) Enum() *GasketData_Type {
	p := new(GasketData_Type)
	*p = x
	return p
}

func (x GasketData_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GasketData_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_flange_model_proto_enumTypes[1].Descriptor()
}

func (GasketData_Type) Type() protoreflect.EnumType {
	return &file_moment_calc_api_flange_model_proto_enumTypes[1]
}

func (x GasketData_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GasketData_Type.Descriptor instead.
func (GasketData_Type) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{4, 0}
}

type MaterialData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	AlphaF      float64 `protobuf:"fixed64,2,opt,name=alphaF,proto3" json:"alphaF,omitempty"`
	EpsilonAt20 float64 `protobuf:"fixed64,3,opt,name=epsilonAt20,proto3" json:"epsilonAt20,omitempty"`
	Epsilon     float64 `protobuf:"fixed64,4,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	SigmaAt20   float64 `protobuf:"fixed64,5,opt,name=sigmaAt20,proto3" json:"sigmaAt20,omitempty"`
	Sigma       float64 `protobuf:"fixed64,6,opt,name=sigma,proto3" json:"sigma,omitempty"`
}

func (x *MaterialData) Reset() {
	*x = MaterialData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialData) ProtoMessage() {}

func (x *MaterialData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialData.ProtoReflect.Descriptor instead.
func (*MaterialData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{0}
}

func (x *MaterialData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MaterialData) GetAlphaF() float64 {
	if x != nil {
		return x.AlphaF
	}
	return 0
}

func (x *MaterialData) GetEpsilonAt20() float64 {
	if x != nil {
		return x.EpsilonAt20
	}
	return 0
}

func (x *MaterialData) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *MaterialData) GetSigmaAt20() float64 {
	if x != nil {
		return x.SigmaAt20
	}
	return 0
}

func (x *MaterialData) GetSigma() float64 {
	if x != nil {
		return x.Sigma
	}
	return 0
}

type FlangeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         FlangeData_Type  `protobuf:"varint,1,opt,name=type,proto3,enum=flange_model.FlangeData_Type" json:"type,omitempty"`
	StandartId   string           `protobuf:"bytes,2,opt,name=standartId,proto3" json:"standartId,omitempty"`
	MarkId       string           `protobuf:"bytes,3,opt,name=markId,proto3" json:"markId,omitempty"`
	Dy           float64          `protobuf:"fixed64,4,opt,name=dy,proto3" json:"dy,omitempty"`
	Py           float64          `protobuf:"fixed64,5,opt,name=py,proto3" json:"py,omitempty"`
	Corrosion    float64          `protobuf:"fixed64,6,opt,name=corrosion,proto3" json:"corrosion,omitempty"`
	Size         *FlangeData_Size `protobuf:"bytes,7,opt,name=size,proto3" json:"size,omitempty"`
	Material     *MaterialData    `protobuf:"bytes,8,opt,name=material,proto3" json:"material,omitempty"`
	Temp         float64          `protobuf:"fixed64,9,opt,name=temp,proto3" json:"temp,omitempty"`
	RingMarkId   string           `protobuf:"bytes,10,opt,name=ringMarkId,proto3" json:"ringMarkId,omitempty"`
	RingMaterial *MaterialData    `protobuf:"bytes,11,opt,name=ringMaterial,proto3" json:"ringMaterial,omitempty"`
	B            float64          `protobuf:"fixed64,12,opt,name=b,proto3" json:"b,omitempty"`
	Row          int32            `protobuf:"varint,13,opt,name=row,proto3" json:"row,omitempty"`
	Dn           string           `protobuf:"bytes,14,opt,name=dn,proto3" json:"dn,omitempty"`
}

func (x *FlangeData) Reset() {
	*x = FlangeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlangeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlangeData) ProtoMessage() {}

func (x *FlangeData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlangeData.ProtoReflect.Descriptor instead.
func (*FlangeData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{1}
}

func (x *FlangeData) GetType() FlangeData_Type {
	if x != nil {
		return x.Type
	}
	return FlangeData_welded
}

func (x *FlangeData) GetStandartId() string {
	if x != nil {
		return x.StandartId
	}
	return ""
}

func (x *FlangeData) GetMarkId() string {
	if x != nil {
		return x.MarkId
	}
	return ""
}

func (x *FlangeData) GetDy() float64 {
	if x != nil {
		return x.Dy
	}
	return 0
}

func (x *FlangeData) GetPy() float64 {
	if x != nil {
		return x.Py
	}
	return 0
}

func (x *FlangeData) GetCorrosion() float64 {
	if x != nil {
		return x.Corrosion
	}
	return 0
}

func (x *FlangeData) GetSize() *FlangeData_Size {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *FlangeData) GetMaterial() *MaterialData {
	if x != nil {
		return x.Material
	}
	return nil
}

func (x *FlangeData) GetTemp() float64 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *FlangeData) GetRingMarkId() string {
	if x != nil {
		return x.RingMarkId
	}
	return ""
}

func (x *FlangeData) GetRingMaterial() *MaterialData {
	if x != nil {
		return x.RingMaterial
	}
	return nil
}

func (x *FlangeData) GetB() float64 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *FlangeData) GetRow() int32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *FlangeData) GetDn() string {
	if x != nil {
		return x.Dn
	}
	return ""
}

type BoltData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkId   string        `protobuf:"bytes,1,opt,name=markId,proto3" json:"markId,omitempty"`
	Diameter float64       `protobuf:"fixed64,2,opt,name=diameter,proto3" json:"diameter,omitempty"`
	Count    int32         `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Material *MaterialData `protobuf:"bytes,4,opt,name=material,proto3" json:"material,omitempty"`
	Temp     float64       `protobuf:"fixed64,5,opt,name=temp,proto3" json:"temp,omitempty"`
	Title    string        `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Area     float64       `protobuf:"fixed64,7,opt,name=area,proto3" json:"area,omitempty"`
	BoldId   string        `protobuf:"bytes,8,opt,name=boldId,proto3" json:"boldId,omitempty"`
}

func (x *BoltData) Reset() {
	*x = BoltData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoltData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoltData) ProtoMessage() {}

func (x *BoltData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoltData.ProtoReflect.Descriptor instead.
func (*BoltData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{2}
}

func (x *BoltData) GetMarkId() string {
	if x != nil {
		return x.MarkId
	}
	return ""
}

func (x *BoltData) GetDiameter() float64 {
	if x != nil {
		return x.Diameter
	}
	return 0
}

func (x *BoltData) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BoltData) GetMaterial() *MaterialData {
	if x != nil {
		return x.Material
	}
	return nil
}

func (x *BoltData) GetTemp() float64 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *BoltData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BoltData) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *BoltData) GetBoldId() string {
	if x != nil {
		return x.BoldId
	}
	return ""
}

type WasherData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkId    string        `protobuf:"bytes,1,opt,name=markId,proto3" json:"markId,omitempty"`
	Thickness float64       `protobuf:"fixed64,2,opt,name=thickness,proto3" json:"thickness,omitempty"`
	Material  *MaterialData `protobuf:"bytes,3,opt,name=material,proto3" json:"material,omitempty"`
}

func (x *WasherData) Reset() {
	*x = WasherData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WasherData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasherData) ProtoMessage() {}

func (x *WasherData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasherData.ProtoReflect.Descriptor instead.
func (*WasherData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{3}
}

func (x *WasherData) GetMarkId() string {
	if x != nil {
		return x.MarkId
	}
	return ""
}

func (x *WasherData) GetThickness() float64 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

func (x *WasherData) GetMaterial() *MaterialData {
	if x != nil {
		return x.Material
	}
	return nil
}

type GasketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasketId  string           `protobuf:"bytes,1,opt,name=gasketId,proto3" json:"gasketId,omitempty"`
	EnvId     string           `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	Thickness float64          `protobuf:"fixed64,3,opt,name=thickness,proto3" json:"thickness,omitempty"`
	DOut      float64          `protobuf:"fixed64,4,opt,name=d_out,json=dOut,proto3" json:"d_out,omitempty"`
	DIn       float64          `protobuf:"fixed64,5,opt,name=d_in,json=dIn,proto3" json:"d_in,omitempty"`
	Data      *GasketData_Data `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GasketData) Reset() {
	*x = GasketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasketData) ProtoMessage() {}

func (x *GasketData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasketData.ProtoReflect.Descriptor instead.
func (*GasketData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{4}
}

func (x *GasketData) GetGasketId() string {
	if x != nil {
		return x.GasketId
	}
	return ""
}

func (x *GasketData) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *GasketData) GetThickness() float64 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

func (x *GasketData) GetDOut() float64 {
	if x != nil {
		return x.DOut
	}
	return 0
}

func (x *GasketData) GetDIn() float64 {
	if x != nil {
		return x.DIn
	}
	return 0
}

func (x *GasketData) GetData() *GasketData_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type EmbedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkId    string        `protobuf:"bytes,1,opt,name=markId,proto3" json:"markId,omitempty"`
	Thickness float64       `protobuf:"fixed64,2,opt,name=thickness,proto3" json:"thickness,omitempty"`
	Material  *MaterialData `protobuf:"bytes,3,opt,name=material,proto3" json:"material,omitempty"`
}

func (x *EmbedData) Reset() {
	*x = EmbedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedData) ProtoMessage() {}

func (x *EmbedData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedData.ProtoReflect.Descriptor instead.
func (*EmbedData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{5}
}

func (x *EmbedData) GetMarkId() string {
	if x != nil {
		return x.MarkId
	}
	return ""
}

func (x *EmbedData) GetThickness() float64 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

func (x *EmbedData) GetMaterial() *MaterialData {
	if x != nil {
		return x.Material
	}
	return nil
}

type DataResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pressure      float64 `protobuf:"fixed64,1,opt,name=pressure,proto3" json:"pressure,omitempty"`
	AxialForce    int32   `protobuf:"varint,2,opt,name=axialForce,proto3" json:"axialForce,omitempty"`
	BendingMoment int32   `protobuf:"varint,3,opt,name=bendingMoment,proto3" json:"bendingMoment,omitempty"`
	Temp          float64 `protobuf:"fixed64,4,opt,name=temp,proto3" json:"temp,omitempty"`
	Work          string  `protobuf:"bytes,5,opt,name=work,proto3" json:"work,omitempty"`
	Flanges       string  `protobuf:"bytes,6,opt,name=flanges,proto3" json:"flanges,omitempty"`
	SameFlange    string  `protobuf:"bytes,7,opt,name=sameFlange,proto3" json:"sameFlange,omitempty"`
	Embedded      string  `protobuf:"bytes,8,opt,name=embedded,proto3" json:"embedded,omitempty"`
	Type          string  `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	Condition     string  `protobuf:"bytes,10,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *DataResult) Reset() {
	*x = DataResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataResult) ProtoMessage() {}

func (x *DataResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataResult.ProtoReflect.Descriptor instead.
func (*DataResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{6}
}

func (x *DataResult) GetPressure() float64 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *DataResult) GetAxialForce() int32 {
	if x != nil {
		return x.AxialForce
	}
	return 0
}

func (x *DataResult) GetBendingMoment() int32 {
	if x != nil {
		return x.BendingMoment
	}
	return 0
}

func (x *DataResult) GetTemp() float64 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *DataResult) GetWork() string {
	if x != nil {
		return x.Work
	}
	return ""
}

func (x *DataResult) GetFlanges() string {
	if x != nil {
		return x.Flanges
	}
	return ""
}

func (x *DataResult) GetSameFlange() string {
	if x != nil {
		return x.SameFlange
	}
	return ""
}

func (x *DataResult) GetEmbedded() string {
	if x != nil {
		return x.Embedded
	}
	return ""
}

func (x *DataResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DataResult) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

type FlangeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DOut         float64 `protobuf:"fixed64,1,opt,name=dOut,proto3" json:"dOut,omitempty"`
	D            float64 `protobuf:"fixed64,2,opt,name=d,proto3" json:"d,omitempty"`
	Dk           float64 `protobuf:"fixed64,3,opt,name=dk,proto3" json:"dk,omitempty"`
	Dnk          float64 `protobuf:"fixed64,4,opt,name=dnk,proto3" json:"dnk,omitempty"`
	Ds           float64 `protobuf:"fixed64,5,opt,name=ds,proto3" json:"ds,omitempty"`
	H            float64 `protobuf:"fixed64,6,opt,name=h,proto3" json:"h,omitempty"`
	Hk           float64 `protobuf:"fixed64,7,opt,name=hk,proto3" json:"hk,omitempty"`
	S0           float64 `protobuf:"fixed64,8,opt,name=s0,proto3" json:"s0,omitempty"`
	S1           float64 `protobuf:"fixed64,9,opt,name=s1,proto3" json:"s1,omitempty"`
	L            float64 `protobuf:"fixed64,10,opt,name=l,proto3" json:"l,omitempty"`
	D6           float64 `protobuf:"fixed64,11,opt,name=d6,proto3" json:"d6,omitempty"`
	C            float64 `protobuf:"fixed64,12,opt,name=c,proto3" json:"c,omitempty"`
	Tf           float64 `protobuf:"fixed64,13,opt,name=tf,proto3" json:"tf,omitempty"`
	Tk           float64 `protobuf:"fixed64,14,opt,name=tk,proto3" json:"tk,omitempty"`
	AlphaK       float64 `protobuf:"fixed64,15,opt,name=alphaK,proto3" json:"alphaK,omitempty"`
	EpsilonKAt20 float64 `protobuf:"fixed64,16,opt,name=epsilonKAt20,proto3" json:"epsilonKAt20,omitempty"`
	EpsilonK     float64 `protobuf:"fixed64,17,opt,name=epsilonK,proto3" json:"epsilonK,omitempty"`
	SigmaKAt20   float64 `protobuf:"fixed64,18,opt,name=sigmaKAt20,proto3" json:"sigmaKAt20,omitempty"`
	SigmaK       float64 `protobuf:"fixed64,19,opt,name=sigmaK,proto3" json:"sigmaK,omitempty"`
	AlphaF       float64 `protobuf:"fixed64,20,opt,name=alphaF,proto3" json:"alphaF,omitempty"`
	EpsilonAt20  float64 `protobuf:"fixed64,21,opt,name=epsilonAt20,proto3" json:"epsilonAt20,omitempty"`
	Epsilon      float64 `protobuf:"fixed64,22,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	SigmaAt20    float64 `protobuf:"fixed64,23,opt,name=sigmaAt20,proto3" json:"sigmaAt20,omitempty"`
	Sigma        float64 `protobuf:"fixed64,24,opt,name=sigma,proto3" json:"sigma,omitempty"`
	SigmaM       float64 `protobuf:"fixed64,25,opt,name=sigmaM,proto3" json:"sigmaM,omitempty"`
	SigmaMAt20   float64 `protobuf:"fixed64,26,opt,name=sigmaMAt20,proto3" json:"sigmaMAt20,omitempty"`
	SigmaR       float64 `protobuf:"fixed64,27,opt,name=sigmaR,proto3" json:"sigmaR,omitempty"`
	SigmaRAt20   float64 `protobuf:"fixed64,28,opt,name=sigmaRAt20,proto3" json:"sigmaRAt20,omitempty"`
	Material     string  `protobuf:"bytes,29,opt,name=material,proto3" json:"material,omitempty"`
	RingMaterial string  `protobuf:"bytes,30,opt,name=ringMaterial,proto3" json:"ringMaterial,omitempty"`
	H0           float64 `protobuf:"fixed64,31,opt,name=h0,proto3" json:"h0,omitempty"`
	Type         string  `protobuf:"bytes,32,opt,name=type,proto3" json:"type,omitempty"`
	A            float64 `protobuf:"fixed64,33,opt,name=a,proto3" json:"a,omitempty"`
	B            float64 `protobuf:"fixed64,34,opt,name=b,proto3" json:"b,omitempty"`
	E            float64 `protobuf:"fixed64,35,opt,name=e,proto3" json:"e,omitempty"`
	Se           float64 `protobuf:"fixed64,36,opt,name=Se,json=se,proto3" json:"Se,omitempty"`
	Xi           float64 `protobuf:"fixed64,37,opt,name=xi,proto3" json:"xi,omitempty"`
	X            float64 `protobuf:"fixed64,38,opt,name=x,proto3" json:"x,omitempty"`
	L0           float64 `protobuf:"fixed64,39,opt,name=l0,proto3" json:"l0,omitempty"`
	Lymda        float64 `protobuf:"fixed64,40,opt,name=lymda,proto3" json:"lymda,omitempty"`
	Yf           float64 `protobuf:"fixed64,41,opt,name=yf,proto3" json:"yf,omitempty"`
	Psik         float64 `protobuf:"fixed64,42,opt,name=psik,proto3" json:"psik,omitempty"`
	Yk           float64 `protobuf:"fixed64,43,opt,name=yk,proto3" json:"yk,omitempty"`
	Yfn          float64 `protobuf:"fixed64,44,opt,name=yfn,proto3" json:"yfn,omitempty"`
	Yfc          float64 `protobuf:"fixed64,45,opt,name=yfc,proto3" json:"yfc,omitempty"`
	K            float64 `protobuf:"fixed64,46,opt,name=k,proto3" json:"k,omitempty"`
	Beta         float64 `protobuf:"fixed64,47,opt,name=beta,proto3" json:"beta,omitempty"`
	BetaT        float64 `protobuf:"fixed64,48,opt,name=betaT,proto3" json:"betaT,omitempty"`
	BetaU        float64 `protobuf:"fixed64,49,opt,name=betaU,proto3" json:"betaU,omitempty"`
	BetaY        float64 `protobuf:"fixed64,50,opt,name=betaY,proto3" json:"betaY,omitempty"`
	BetaZ        float64 `protobuf:"fixed64,51,opt,name=betaZ,proto3" json:"betaZ,omitempty"`
	BetaF        float64 `protobuf:"fixed64,52,opt,name=betaF,proto3" json:"betaF,omitempty"`
	BetaV        float64 `protobuf:"fixed64,53,opt,name=betaV,proto3" json:"betaV,omitempty"`
	F            float64 `protobuf:"fixed64,54,opt,name=f,proto3" json:"f,omitempty"`
}

func (x *FlangeResult) Reset() {
	*x = FlangeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlangeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlangeResult) ProtoMessage() {}

func (x *FlangeResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlangeResult.ProtoReflect.Descriptor instead.
func (*FlangeResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{7}
}

func (x *FlangeResult) GetDOut() float64 {
	if x != nil {
		return x.DOut
	}
	return 0
}

func (x *FlangeResult) GetD() float64 {
	if x != nil {
		return x.D
	}
	return 0
}

func (x *FlangeResult) GetDk() float64 {
	if x != nil {
		return x.Dk
	}
	return 0
}

func (x *FlangeResult) GetDnk() float64 {
	if x != nil {
		return x.Dnk
	}
	return 0
}

func (x *FlangeResult) GetDs() float64 {
	if x != nil {
		return x.Ds
	}
	return 0
}

func (x *FlangeResult) GetH() float64 {
	if x != nil {
		return x.H
	}
	return 0
}

func (x *FlangeResult) GetHk() float64 {
	if x != nil {
		return x.Hk
	}
	return 0
}

func (x *FlangeResult) GetS0() float64 {
	if x != nil {
		return x.S0
	}
	return 0
}

func (x *FlangeResult) GetS1() float64 {
	if x != nil {
		return x.S1
	}
	return 0
}

func (x *FlangeResult) GetL() float64 {
	if x != nil {
		return x.L
	}
	return 0
}

func (x *FlangeResult) GetD6() float64 {
	if x != nil {
		return x.D6
	}
	return 0
}

func (x *FlangeResult) GetC() float64 {
	if x != nil {
		return x.C
	}
	return 0
}

func (x *FlangeResult) GetTf() float64 {
	if x != nil {
		return x.Tf
	}
	return 0
}

func (x *FlangeResult) GetTk() float64 {
	if x != nil {
		return x.Tk
	}
	return 0
}

func (x *FlangeResult) GetAlphaK() float64 {
	if x != nil {
		return x.AlphaK
	}
	return 0
}

func (x *FlangeResult) GetEpsilonKAt20() float64 {
	if x != nil {
		return x.EpsilonKAt20
	}
	return 0
}

func (x *FlangeResult) GetEpsilonK() float64 {
	if x != nil {
		return x.EpsilonK
	}
	return 0
}

func (x *FlangeResult) GetSigmaKAt20() float64 {
	if x != nil {
		return x.SigmaKAt20
	}
	return 0
}

func (x *FlangeResult) GetSigmaK() float64 {
	if x != nil {
		return x.SigmaK
	}
	return 0
}

func (x *FlangeResult) GetAlphaF() float64 {
	if x != nil {
		return x.AlphaF
	}
	return 0
}

func (x *FlangeResult) GetEpsilonAt20() float64 {
	if x != nil {
		return x.EpsilonAt20
	}
	return 0
}

func (x *FlangeResult) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *FlangeResult) GetSigmaAt20() float64 {
	if x != nil {
		return x.SigmaAt20
	}
	return 0
}

func (x *FlangeResult) GetSigma() float64 {
	if x != nil {
		return x.Sigma
	}
	return 0
}

func (x *FlangeResult) GetSigmaM() float64 {
	if x != nil {
		return x.SigmaM
	}
	return 0
}

func (x *FlangeResult) GetSigmaMAt20() float64 {
	if x != nil {
		return x.SigmaMAt20
	}
	return 0
}

func (x *FlangeResult) GetSigmaR() float64 {
	if x != nil {
		return x.SigmaR
	}
	return 0
}

func (x *FlangeResult) GetSigmaRAt20() float64 {
	if x != nil {
		return x.SigmaRAt20
	}
	return 0
}

func (x *FlangeResult) GetMaterial() string {
	if x != nil {
		return x.Material
	}
	return ""
}

func (x *FlangeResult) GetRingMaterial() string {
	if x != nil {
		return x.RingMaterial
	}
	return ""
}

func (x *FlangeResult) GetH0() float64 {
	if x != nil {
		return x.H0
	}
	return 0
}

func (x *FlangeResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FlangeResult) GetA() float64 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *FlangeResult) GetB() float64 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *FlangeResult) GetE() float64 {
	if x != nil {
		return x.E
	}
	return 0
}

func (x *FlangeResult) GetSe() float64 {
	if x != nil {
		return x.Se
	}
	return 0
}

func (x *FlangeResult) GetXi() float64 {
	if x != nil {
		return x.Xi
	}
	return 0
}

func (x *FlangeResult) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *FlangeResult) GetL0() float64 {
	if x != nil {
		return x.L0
	}
	return 0
}

func (x *FlangeResult) GetLymda() float64 {
	if x != nil {
		return x.Lymda
	}
	return 0
}

func (x *FlangeResult) GetYf() float64 {
	if x != nil {
		return x.Yf
	}
	return 0
}

func (x *FlangeResult) GetPsik() float64 {
	if x != nil {
		return x.Psik
	}
	return 0
}

func (x *FlangeResult) GetYk() float64 {
	if x != nil {
		return x.Yk
	}
	return 0
}

func (x *FlangeResult) GetYfn() float64 {
	if x != nil {
		return x.Yfn
	}
	return 0
}

func (x *FlangeResult) GetYfc() float64 {
	if x != nil {
		return x.Yfc
	}
	return 0
}

func (x *FlangeResult) GetK() float64 {
	if x != nil {
		return x.K
	}
	return 0
}

func (x *FlangeResult) GetBeta() float64 {
	if x != nil {
		return x.Beta
	}
	return 0
}

func (x *FlangeResult) GetBetaT() float64 {
	if x != nil {
		return x.BetaT
	}
	return 0
}

func (x *FlangeResult) GetBetaU() float64 {
	if x != nil {
		return x.BetaU
	}
	return 0
}

func (x *FlangeResult) GetBetaY() float64 {
	if x != nil {
		return x.BetaY
	}
	return 0
}

func (x *FlangeResult) GetBetaZ() float64 {
	if x != nil {
		return x.BetaZ
	}
	return 0
}

func (x *FlangeResult) GetBetaF() float64 {
	if x != nil {
		return x.BetaF
	}
	return 0
}

func (x *FlangeResult) GetBetaV() float64 {
	if x != nil {
		return x.BetaV
	}
	return 0
}

func (x *FlangeResult) GetF() float64 {
	if x != nil {
		return x.F
	}
	return 0
}

type BoltResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diameter    float64 `protobuf:"fixed64,1,opt,name=diameter,proto3" json:"diameter,omitempty"`
	Area        float64 `protobuf:"fixed64,2,opt,name=area,proto3" json:"area,omitempty"`
	Count       int32   `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Lenght      float64 `protobuf:"fixed64,4,opt,name=lenght,proto3" json:"lenght,omitempty"`
	Temp        float64 `protobuf:"fixed64,5,opt,name=temp,proto3" json:"temp,omitempty"`
	Alpha       float64 `protobuf:"fixed64,6,opt,name=alpha,proto3" json:"alpha,omitempty"`
	EpsilonAt20 float64 `protobuf:"fixed64,7,opt,name=epsilonAt20,proto3" json:"epsilonAt20,omitempty"`
	Epsilon     float64 `protobuf:"fixed64,8,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	SigmaAt20   float64 `protobuf:"fixed64,9,opt,name=sigmaAt20,proto3" json:"sigmaAt20,omitempty"`
	Sigma       float64 `protobuf:"fixed64,10,opt,name=sigma,proto3" json:"sigma,omitempty"`
	Material    string  `protobuf:"bytes,11,opt,name=material,proto3" json:"material,omitempty"`
}

func (x *BoltResult) Reset() {
	*x = BoltResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoltResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoltResult) ProtoMessage() {}

func (x *BoltResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoltResult.ProtoReflect.Descriptor instead.
func (*BoltResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{8}
}

func (x *BoltResult) GetDiameter() float64 {
	if x != nil {
		return x.Diameter
	}
	return 0
}

func (x *BoltResult) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *BoltResult) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BoltResult) GetLenght() float64 {
	if x != nil {
		return x.Lenght
	}
	return 0
}

func (x *BoltResult) GetTemp() float64 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *BoltResult) GetAlpha() float64 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *BoltResult) GetEpsilonAt20() float64 {
	if x != nil {
		return x.EpsilonAt20
	}
	return 0
}

func (x *BoltResult) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *BoltResult) GetSigmaAt20() float64 {
	if x != nil {
		return x.SigmaAt20
	}
	return 0
}

func (x *BoltResult) GetSigma() float64 {
	if x != nil {
		return x.Sigma
	}
	return 0
}

func (x *BoltResult) GetMaterial() string {
	if x != nil {
		return x.Material
	}
	return ""
}

type GasketResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gasket          string  `protobuf:"bytes,1,opt,name=gasket,proto3" json:"gasket,omitempty"`
	Env             string  `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	Thickness       float64 `protobuf:"fixed64,3,opt,name=thickness,proto3" json:"thickness,omitempty"`
	DOut            float64 `protobuf:"fixed64,4,opt,name=d_out,json=dOut,proto3" json:"d_out,omitempty"`
	Width           float64 `protobuf:"fixed64,5,opt,name=width,proto3" json:"width,omitempty"`
	M               float64 `protobuf:"fixed64,6,opt,name=m,proto3" json:"m,omitempty"`
	Pres            float64 `protobuf:"fixed64,7,opt,name=pres,proto3" json:"pres,omitempty"`
	Compression     float64 `protobuf:"fixed64,8,opt,name=compression,proto3" json:"compression,omitempty"`
	Epsilon         float64 `protobuf:"fixed64,9,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	PermissiblePres float64 `protobuf:"fixed64,10,opt,name=permissiblePres,proto3" json:"permissiblePres,omitempty"`
	Type            string  `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GasketResult) Reset() {
	*x = GasketResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasketResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasketResult) ProtoMessage() {}

func (x *GasketResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasketResult.ProtoReflect.Descriptor instead.
func (*GasketResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{9}
}

func (x *GasketResult) GetGasket() string {
	if x != nil {
		return x.Gasket
	}
	return ""
}

func (x *GasketResult) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *GasketResult) GetThickness() float64 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

func (x *GasketResult) GetDOut() float64 {
	if x != nil {
		return x.DOut
	}
	return 0
}

func (x *GasketResult) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *GasketResult) GetM() float64 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *GasketResult) GetPres() float64 {
	if x != nil {
		return x.Pres
	}
	return 0
}

func (x *GasketResult) GetCompression() float64 {
	if x != nil {
		return x.Compression
	}
	return 0
}

func (x *GasketResult) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *GasketResult) GetPermissiblePres() float64 {
	if x != nil {
		return x.PermissiblePres
	}
	return 0
}

func (x *GasketResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type EmbedResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Material  string  `protobuf:"bytes,1,opt,name=material,proto3" json:"material,omitempty"`
	Thickness float64 `protobuf:"fixed64,2,opt,name=thickness,proto3" json:"thickness,omitempty"`
	Alpha     float64 `protobuf:"fixed64,3,opt,name=alpha,proto3" json:"alpha,omitempty"`
	Temp      float64 `protobuf:"fixed64,4,opt,name=temp,proto3" json:"temp,omitempty"`
}

func (x *EmbedResult) Reset() {
	*x = EmbedResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedResult) ProtoMessage() {}

func (x *EmbedResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedResult.ProtoReflect.Descriptor instead.
func (*EmbedResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{10}
}

func (x *EmbedResult) GetMaterial() string {
	if x != nil {
		return x.Material
	}
	return ""
}

func (x *EmbedResult) GetThickness() float64 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

func (x *EmbedResult) GetAlpha() float64 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *EmbedResult) GetTemp() float64 {
	if x != nil {
		return x.Temp
	}
	return 0
}

type WasherResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Material  string  `protobuf:"bytes,1,opt,name=material,proto3" json:"material,omitempty"`
	Thickness float64 `protobuf:"fixed64,2,opt,name=thickness,proto3" json:"thickness,omitempty"`
	Alpha     float64 `protobuf:"fixed64,3,opt,name=alpha,proto3" json:"alpha,omitempty"`
	Temp      float64 `protobuf:"fixed64,4,opt,name=temp,proto3" json:"temp,omitempty"`
}

func (x *WasherResult) Reset() {
	*x = WasherResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WasherResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasherResult) ProtoMessage() {}

func (x *WasherResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasherResult.ProtoReflect.Descriptor instead.
func (*WasherResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{11}
}

func (x *WasherResult) GetMaterial() string {
	if x != nil {
		return x.Material
	}
	return ""
}

func (x *WasherResult) GetThickness() float64 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

func (x *WasherResult) GetAlpha() float64 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *WasherResult) GetTemp() float64 {
	if x != nil {
		return x.Temp
	}
	return 0
}

type StrengthResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cf          float64 `protobuf:"fixed64,1,opt,name=Cf,json=cf,proto3" json:"Cf,omitempty"`
	Dzv         float64 `protobuf:"fixed64,2,opt,name=Dzv,json=dzv,proto3" json:"Dzv,omitempty"`
	MM          float64 `protobuf:"fixed64,3,opt,name=MM,json=mM,proto3" json:"MM,omitempty"`
	MMk         float64 `protobuf:"fixed64,4,opt,name=MMk,json=mMk,proto3" json:"MMk,omitempty"`
	Mpk         float64 `protobuf:"fixed64,5,opt,name=Mpk,json=mpk,proto3" json:"Mpk,omitempty"`
	Mp          float64 `protobuf:"fixed64,6,opt,name=Mp,json=mp,proto3" json:"Mp,omitempty"`
	SigmaM1     float64 `protobuf:"fixed64,7,opt,name=sigmaM1,proto3" json:"sigmaM1,omitempty"`
	SigmaM0     float64 `protobuf:"fixed64,8,opt,name=sigmaM0,proto3" json:"sigmaM0,omitempty"`
	SigmaT      float64 `protobuf:"fixed64,9,opt,name=sigmaT,proto3" json:"sigmaT,omitempty"`
	SigmaR      float64 `protobuf:"fixed64,10,opt,name=sigmaR,proto3" json:"sigmaR,omitempty"`
	SigmaTp     float64 `protobuf:"fixed64,11,opt,name=sigmaTp,proto3" json:"sigmaTp,omitempty"`
	SigmaRp     float64 `protobuf:"fixed64,12,opt,name=sigmaRp,proto3" json:"sigmaRp,omitempty"`
	SigmaK      float64 `protobuf:"fixed64,13,opt,name=sigmaK,proto3" json:"sigmaK,omitempty"`
	SigmaP1     float64 `protobuf:"fixed64,14,opt,name=sigmaP1,proto3" json:"sigmaP1,omitempty"`
	SigmaP0     float64 `protobuf:"fixed64,15,opt,name=sigmaP0,proto3" json:"sigmaP0,omitempty"`
	SigmaMp     float64 `protobuf:"fixed64,16,opt,name=sigmaMp,proto3" json:"sigmaMp,omitempty"`
	SigmaMpm    float64 `protobuf:"fixed64,17,opt,name=sigmaMpm,proto3" json:"sigmaMpm,omitempty"`
	SigmaMp0    float64 `protobuf:"fixed64,18,opt,name=sigmaMp0,proto3" json:"sigmaMp0,omitempty"`
	SigmaMpm0   float64 `protobuf:"fixed64,19,opt,name=sigmaMpm0,proto3" json:"sigmaMpm0,omitempty"`
	SigmaMop    float64 `protobuf:"fixed64,20,opt,name=sigmaMop,proto3" json:"sigmaMop,omitempty"`
	SigmaKp     float64 `protobuf:"fixed64,21,opt,name=sigmaKp,proto3" json:"sigmaKp,omitempty"`
	Teta        float64 `protobuf:"fixed64,22,opt,name=teta,proto3" json:"teta,omitempty"`
	DTeta       float64 `protobuf:"fixed64,23,opt,name=dTeta,proto3" json:"dTeta,omitempty"`
	DTetaK      float64 `protobuf:"fixed64,24,opt,name=dTetaK,proto3" json:"dTetaK,omitempty"`
	TetaK       float64 `protobuf:"fixed64,25,opt,name=tetaK,proto3" json:"tetaK,omitempty"`
	Max1        float64 `protobuf:"fixed64,26,opt,name=Max1,json=max1,proto3" json:"Max1,omitempty"`
	Max2        float64 `protobuf:"fixed64,27,opt,name=Max2,json=max2,proto3" json:"Max2,omitempty"`
	Max3        float64 `protobuf:"fixed64,28,opt,name=Max3,json=max3,proto3" json:"Max3,omitempty"`
	Max4        float64 `protobuf:"fixed64,29,opt,name=Max4,json=max4,proto3" json:"Max4,omitempty"`
	Max5        float64 `protobuf:"fixed64,30,opt,name=Max5,json=max5,proto3" json:"Max5,omitempty"`
	Max6        float64 `protobuf:"fixed64,31,opt,name=Max6,json=max6,proto3" json:"Max6,omitempty"`
	Max7        float64 `protobuf:"fixed64,32,opt,name=Max7,json=max7,proto3" json:"Max7,omitempty"`
	Max8        float64 `protobuf:"fixed64,33,opt,name=Max8,json=max8,proto3" json:"Max8,omitempty"`
	Max9        float64 `protobuf:"fixed64,34,opt,name=Max9,json=max9,proto3" json:"Max9,omitempty"`
	Max10       float64 `protobuf:"fixed64,35,opt,name=Max10,json=max10,proto3" json:"Max10,omitempty"`
	Max11       float64 `protobuf:"fixed64,36,opt,name=Max11,json=max11,proto3" json:"Max11,omitempty"`
	IsSameSigma bool    `protobuf:"varint,37,opt,name=isSameSigma,proto3" json:"isSameSigma,omitempty"`
	CondMax1    float64 `protobuf:"fixed64,38,opt,name=condMax1,proto3" json:"condMax1,omitempty"`
	CondMax2    float64 `protobuf:"fixed64,39,opt,name=condMax2,proto3" json:"condMax2,omitempty"`
	CondMax3    float64 `protobuf:"fixed64,40,opt,name=condMax3,proto3" json:"condMax3,omitempty"`
	CondMax4    float64 `protobuf:"fixed64,41,opt,name=condMax4,proto3" json:"condMax4,omitempty"`
	CondMax5    float64 `protobuf:"fixed64,42,opt,name=condMax5,proto3" json:"condMax5,omitempty"`
	CondMax6    float64 `protobuf:"fixed64,43,opt,name=condMax6,proto3" json:"condMax6,omitempty"`
	CondMax7    float64 `protobuf:"fixed64,44,opt,name=condMax7,proto3" json:"condMax7,omitempty"`
	CondMax8    float64 `protobuf:"fixed64,45,opt,name=condMax8,proto3" json:"condMax8,omitempty"`
	CondMax9    float64 `protobuf:"fixed64,46,opt,name=condMax9,proto3" json:"condMax9,omitempty"`
	CondMax10   float64 `protobuf:"fixed64,47,opt,name=condMax10,proto3" json:"condMax10,omitempty"`
	CondMax11   float64 `protobuf:"fixed64,48,opt,name=condMax11,proto3" json:"condMax11,omitempty"`
}

func (x *StrengthResult) Reset() {
	*x = StrengthResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrengthResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrengthResult) ProtoMessage() {}

func (x *StrengthResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrengthResult.ProtoReflect.Descriptor instead.
func (*StrengthResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{12}
}

func (x *StrengthResult) GetCf() float64 {
	if x != nil {
		return x.Cf
	}
	return 0
}

func (x *StrengthResult) GetDzv() float64 {
	if x != nil {
		return x.Dzv
	}
	return 0
}

func (x *StrengthResult) GetMM() float64 {
	if x != nil {
		return x.MM
	}
	return 0
}

func (x *StrengthResult) GetMMk() float64 {
	if x != nil {
		return x.MMk
	}
	return 0
}

func (x *StrengthResult) GetMpk() float64 {
	if x != nil {
		return x.Mpk
	}
	return 0
}

func (x *StrengthResult) GetMp() float64 {
	if x != nil {
		return x.Mp
	}
	return 0
}

func (x *StrengthResult) GetSigmaM1() float64 {
	if x != nil {
		return x.SigmaM1
	}
	return 0
}

func (x *StrengthResult) GetSigmaM0() float64 {
	if x != nil {
		return x.SigmaM0
	}
	return 0
}

func (x *StrengthResult) GetSigmaT() float64 {
	if x != nil {
		return x.SigmaT
	}
	return 0
}

func (x *StrengthResult) GetSigmaR() float64 {
	if x != nil {
		return x.SigmaR
	}
	return 0
}

func (x *StrengthResult) GetSigmaTp() float64 {
	if x != nil {
		return x.SigmaTp
	}
	return 0
}

func (x *StrengthResult) GetSigmaRp() float64 {
	if x != nil {
		return x.SigmaRp
	}
	return 0
}

func (x *StrengthResult) GetSigmaK() float64 {
	if x != nil {
		return x.SigmaK
	}
	return 0
}

func (x *StrengthResult) GetSigmaP1() float64 {
	if x != nil {
		return x.SigmaP1
	}
	return 0
}

func (x *StrengthResult) GetSigmaP0() float64 {
	if x != nil {
		return x.SigmaP0
	}
	return 0
}

func (x *StrengthResult) GetSigmaMp() float64 {
	if x != nil {
		return x.SigmaMp
	}
	return 0
}

func (x *StrengthResult) GetSigmaMpm() float64 {
	if x != nil {
		return x.SigmaMpm
	}
	return 0
}

func (x *StrengthResult) GetSigmaMp0() float64 {
	if x != nil {
		return x.SigmaMp0
	}
	return 0
}

func (x *StrengthResult) GetSigmaMpm0() float64 {
	if x != nil {
		return x.SigmaMpm0
	}
	return 0
}

func (x *StrengthResult) GetSigmaMop() float64 {
	if x != nil {
		return x.SigmaMop
	}
	return 0
}

func (x *StrengthResult) GetSigmaKp() float64 {
	if x != nil {
		return x.SigmaKp
	}
	return 0
}

func (x *StrengthResult) GetTeta() float64 {
	if x != nil {
		return x.Teta
	}
	return 0
}

func (x *StrengthResult) GetDTeta() float64 {
	if x != nil {
		return x.DTeta
	}
	return 0
}

func (x *StrengthResult) GetDTetaK() float64 {
	if x != nil {
		return x.DTetaK
	}
	return 0
}

func (x *StrengthResult) GetTetaK() float64 {
	if x != nil {
		return x.TetaK
	}
	return 0
}

func (x *StrengthResult) GetMax1() float64 {
	if x != nil {
		return x.Max1
	}
	return 0
}

func (x *StrengthResult) GetMax2() float64 {
	if x != nil {
		return x.Max2
	}
	return 0
}

func (x *StrengthResult) GetMax3() float64 {
	if x != nil {
		return x.Max3
	}
	return 0
}

func (x *StrengthResult) GetMax4() float64 {
	if x != nil {
		return x.Max4
	}
	return 0
}

func (x *StrengthResult) GetMax5() float64 {
	if x != nil {
		return x.Max5
	}
	return 0
}

func (x *StrengthResult) GetMax6() float64 {
	if x != nil {
		return x.Max6
	}
	return 0
}

func (x *StrengthResult) GetMax7() float64 {
	if x != nil {
		return x.Max7
	}
	return 0
}

func (x *StrengthResult) GetMax8() float64 {
	if x != nil {
		return x.Max8
	}
	return 0
}

func (x *StrengthResult) GetMax9() float64 {
	if x != nil {
		return x.Max9
	}
	return 0
}

func (x *StrengthResult) GetMax10() float64 {
	if x != nil {
		return x.Max10
	}
	return 0
}

func (x *StrengthResult) GetMax11() float64 {
	if x != nil {
		return x.Max11
	}
	return 0
}

func (x *StrengthResult) GetIsSameSigma() bool {
	if x != nil {
		return x.IsSameSigma
	}
	return false
}

func (x *StrengthResult) GetCondMax1() float64 {
	if x != nil {
		return x.CondMax1
	}
	return 0
}

func (x *StrengthResult) GetCondMax2() float64 {
	if x != nil {
		return x.CondMax2
	}
	return 0
}

func (x *StrengthResult) GetCondMax3() float64 {
	if x != nil {
		return x.CondMax3
	}
	return 0
}

func (x *StrengthResult) GetCondMax4() float64 {
	if x != nil {
		return x.CondMax4
	}
	return 0
}

func (x *StrengthResult) GetCondMax5() float64 {
	if x != nil {
		return x.CondMax5
	}
	return 0
}

func (x *StrengthResult) GetCondMax6() float64 {
	if x != nil {
		return x.CondMax6
	}
	return 0
}

func (x *StrengthResult) GetCondMax7() float64 {
	if x != nil {
		return x.CondMax7
	}
	return 0
}

func (x *StrengthResult) GetCondMax8() float64 {
	if x != nil {
		return x.CondMax8
	}
	return 0
}

func (x *StrengthResult) GetCondMax9() float64 {
	if x != nil {
		return x.CondMax9
	}
	return 0
}

func (x *StrengthResult) GetCondMax10() float64 {
	if x != nil {
		return x.CondMax10
	}
	return 0
}

func (x *StrengthResult) GetCondMax11() float64 {
	if x != nil {
		return x.CondMax11
	}
	return 0
}

type CalcMomentStrength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FPb      float64           `protobuf:"fixed64,1,opt,name=fPb,proto3" json:"fPb,omitempty"`
	FPb1     float64           `protobuf:"fixed64,2,opt,name=fPb1,proto3" json:"fPb1,omitempty"`
	FPb2     float64           `protobuf:"fixed64,3,opt,name=fPb2,proto3" json:"fPb2,omitempty"`
	FPbr     float64           `protobuf:"fixed64,4,opt,name=fPbr,proto3" json:"fPbr,omitempty"`
	FSigmaB1 float64           `protobuf:"fixed64,5,opt,name=fSigmaB1,proto3" json:"fSigmaB1,omitempty"`
	FSigmaB2 float64           `protobuf:"fixed64,6,opt,name=fSigmaB2,proto3" json:"fSigmaB2,omitempty"`
	FDSigmaM float64           `protobuf:"fixed64,7,opt,name=fDSigmaM,proto3" json:"fDSigmaM,omitempty"`
	FDSigmaR float64           `protobuf:"fixed64,8,opt,name=fDSigmaR,proto3" json:"fDSigmaR,omitempty"`
	FQ       float64           `protobuf:"fixed64,9,opt,name=fQ,proto3" json:"fQ,omitempty"`
	FMkp     float64           `protobuf:"fixed64,10,opt,name=fMkp,proto3" json:"fMkp,omitempty"`
	FMkp1    float64           `protobuf:"fixed64,11,opt,name=fMkp1,proto3" json:"fMkp1,omitempty"`
	SPb      float64           `protobuf:"fixed64,12,opt,name=sPb,proto3" json:"sPb,omitempty"`
	SPb1     float64           `protobuf:"fixed64,13,opt,name=sPb1,proto3" json:"sPb1,omitempty"`
	SPb2     float64           `protobuf:"fixed64,14,opt,name=sPb2,proto3" json:"sPb2,omitempty"`
	SPbr     float64           `protobuf:"fixed64,15,opt,name=sPbr,proto3" json:"sPbr,omitempty"`
	SSigmaB1 float64           `protobuf:"fixed64,16,opt,name=sSigmaB1,proto3" json:"sSigmaB1,omitempty"`
	SSigmaB2 float64           `protobuf:"fixed64,17,opt,name=sSigmaB2,proto3" json:"sSigmaB2,omitempty"`
	SDSigmaM float64           `protobuf:"fixed64,18,opt,name=sDSigmaM,proto3" json:"sDSigmaM,omitempty"`
	SDSigmaR float64           `protobuf:"fixed64,19,opt,name=sDSigmaR,proto3" json:"sDSigmaR,omitempty"`
	SQ       float64           `protobuf:"fixed64,20,opt,name=sQ,proto3" json:"sQ,omitempty"`
	MinB     float64           `protobuf:"fixed64,21,opt,name=minB,proto3" json:"minB,omitempty"`
	SMkp     float64           `protobuf:"fixed64,22,opt,name=sMkp,proto3" json:"sMkp,omitempty"`
	SMkp1    float64           `protobuf:"fixed64,23,opt,name=sMkp1,proto3" json:"sMkp1,omitempty"`
	Mrek     float64           `protobuf:"fixed64,24,opt,name=Mrek,json=mrek,proto3" json:"Mrek,omitempty"`
	Qrek     float64           `protobuf:"fixed64,25,opt,name=Qrek,json=qrek,proto3" json:"Qrek,omitempty"`
	Mmax     float64           `protobuf:"fixed64,26,opt,name=Mmax,json=mmax,proto3" json:"Mmax,omitempty"`
	Qmax     float64           `protobuf:"fixed64,27,opt,name=Qmax,json=qmax,proto3" json:"Qmax,omitempty"`
	Strength []*StrengthResult `protobuf:"bytes,28,rep,name=strength,proto3" json:"strength,omitempty"`
	VSigmaB1 bool              `protobuf:"varint,29,opt,name=vSigmaB1,proto3" json:"vSigmaB1,omitempty"`
	VSigmaB2 bool              `protobuf:"varint,30,opt,name=vSigmaB2,proto3" json:"vSigmaB2,omitempty"`
	VQmax    bool              `protobuf:"varint,31,opt,name=vQmax,proto3" json:"vQmax,omitempty"`
	VTeta1   bool              `protobuf:"varint,32,opt,name=vTeta1,proto3" json:"vTeta1,omitempty"`
	VTetaK1  bool              `protobuf:"varint,33,opt,name=vTetaK1,proto3" json:"vTetaK1,omitempty"`
	VTeta2   bool              `protobuf:"varint,34,opt,name=vTeta2,proto3" json:"vTeta2,omitempty"`
	VTetaK2  bool              `protobuf:"varint,35,opt,name=vTetaK2,proto3" json:"vTetaK2,omitempty"`
	Yp       float64           `protobuf:"fixed64,36,opt,name=yp,proto3" json:"yp,omitempty"`
	Yb       float64           `protobuf:"fixed64,37,opt,name=yb,proto3" json:"yb,omitempty"`
	Lb       float64           `protobuf:"fixed64,38,opt,name=Lb,json=lb,proto3" json:"Lb,omitempty"`
	Gamma    float64           `protobuf:"fixed64,39,opt,name=gamma,proto3" json:"gamma,omitempty"`
}

func (x *CalcMomentStrength) Reset() {
	*x = CalcMomentStrength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcMomentStrength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcMomentStrength) ProtoMessage() {}

func (x *CalcMomentStrength) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcMomentStrength.ProtoReflect.Descriptor instead.
func (*CalcMomentStrength) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{13}
}

func (x *CalcMomentStrength) GetFPb() float64 {
	if x != nil {
		return x.FPb
	}
	return 0
}

func (x *CalcMomentStrength) GetFPb1() float64 {
	if x != nil {
		return x.FPb1
	}
	return 0
}

func (x *CalcMomentStrength) GetFPb2() float64 {
	if x != nil {
		return x.FPb2
	}
	return 0
}

func (x *CalcMomentStrength) GetFPbr() float64 {
	if x != nil {
		return x.FPbr
	}
	return 0
}

func (x *CalcMomentStrength) GetFSigmaB1() float64 {
	if x != nil {
		return x.FSigmaB1
	}
	return 0
}

func (x *CalcMomentStrength) GetFSigmaB2() float64 {
	if x != nil {
		return x.FSigmaB2
	}
	return 0
}

func (x *CalcMomentStrength) GetFDSigmaM() float64 {
	if x != nil {
		return x.FDSigmaM
	}
	return 0
}

func (x *CalcMomentStrength) GetFDSigmaR() float64 {
	if x != nil {
		return x.FDSigmaR
	}
	return 0
}

func (x *CalcMomentStrength) GetFQ() float64 {
	if x != nil {
		return x.FQ
	}
	return 0
}

func (x *CalcMomentStrength) GetFMkp() float64 {
	if x != nil {
		return x.FMkp
	}
	return 0
}

func (x *CalcMomentStrength) GetFMkp1() float64 {
	if x != nil {
		return x.FMkp1
	}
	return 0
}

func (x *CalcMomentStrength) GetSPb() float64 {
	if x != nil {
		return x.SPb
	}
	return 0
}

func (x *CalcMomentStrength) GetSPb1() float64 {
	if x != nil {
		return x.SPb1
	}
	return 0
}

func (x *CalcMomentStrength) GetSPb2() float64 {
	if x != nil {
		return x.SPb2
	}
	return 0
}

func (x *CalcMomentStrength) GetSPbr() float64 {
	if x != nil {
		return x.SPbr
	}
	return 0
}

func (x *CalcMomentStrength) GetSSigmaB1() float64 {
	if x != nil {
		return x.SSigmaB1
	}
	return 0
}

func (x *CalcMomentStrength) GetSSigmaB2() float64 {
	if x != nil {
		return x.SSigmaB2
	}
	return 0
}

func (x *CalcMomentStrength) GetSDSigmaM() float64 {
	if x != nil {
		return x.SDSigmaM
	}
	return 0
}

func (x *CalcMomentStrength) GetSDSigmaR() float64 {
	if x != nil {
		return x.SDSigmaR
	}
	return 0
}

func (x *CalcMomentStrength) GetSQ() float64 {
	if x != nil {
		return x.SQ
	}
	return 0
}

func (x *CalcMomentStrength) GetMinB() float64 {
	if x != nil {
		return x.MinB
	}
	return 0
}

func (x *CalcMomentStrength) GetSMkp() float64 {
	if x != nil {
		return x.SMkp
	}
	return 0
}

func (x *CalcMomentStrength) GetSMkp1() float64 {
	if x != nil {
		return x.SMkp1
	}
	return 0
}

func (x *CalcMomentStrength) GetMrek() float64 {
	if x != nil {
		return x.Mrek
	}
	return 0
}

func (x *CalcMomentStrength) GetQrek() float64 {
	if x != nil {
		return x.Qrek
	}
	return 0
}

func (x *CalcMomentStrength) GetMmax() float64 {
	if x != nil {
		return x.Mmax
	}
	return 0
}

func (x *CalcMomentStrength) GetQmax() float64 {
	if x != nil {
		return x.Qmax
	}
	return 0
}

func (x *CalcMomentStrength) GetStrength() []*StrengthResult {
	if x != nil {
		return x.Strength
	}
	return nil
}

func (x *CalcMomentStrength) GetVSigmaB1() bool {
	if x != nil {
		return x.VSigmaB1
	}
	return false
}

func (x *CalcMomentStrength) GetVSigmaB2() bool {
	if x != nil {
		return x.VSigmaB2
	}
	return false
}

func (x *CalcMomentStrength) GetVQmax() bool {
	if x != nil {
		return x.VQmax
	}
	return false
}

func (x *CalcMomentStrength) GetVTeta1() bool {
	if x != nil {
		return x.VTeta1
	}
	return false
}

func (x *CalcMomentStrength) GetVTetaK1() bool {
	if x != nil {
		return x.VTetaK1
	}
	return false
}

func (x *CalcMomentStrength) GetVTeta2() bool {
	if x != nil {
		return x.VTeta2
	}
	return false
}

func (x *CalcMomentStrength) GetVTetaK2() bool {
	if x != nil {
		return x.VTetaK2
	}
	return false
}

func (x *CalcMomentStrength) GetYp() float64 {
	if x != nil {
		return x.Yp
	}
	return 0
}

func (x *CalcMomentStrength) GetYb() float64 {
	if x != nil {
		return x.Yb
	}
	return 0
}

func (x *CalcMomentStrength) GetLb() float64 {
	if x != nil {
		return x.Lb
	}
	return 0
}

func (x *CalcMomentStrength) GetGamma() float64 {
	if x != nil {
		return x.Gamma
	}
	return 0
}

type CalcMomentBasis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pb       float64 `protobuf:"fixed64,1,opt,name=Pb,json=pb,proto3" json:"Pb,omitempty"`
	Pb1      float64 `protobuf:"fixed64,2,opt,name=Pb1,json=pb1,proto3" json:"Pb1,omitempty"`
	Pb2      float64 `protobuf:"fixed64,3,opt,name=Pb2,json=pb2,proto3" json:"Pb2,omitempty"`
	Pbr      float64 `protobuf:"fixed64,4,opt,name=Pbr,json=pbr,proto3" json:"Pbr,omitempty"`
	SigmaB1  float64 `protobuf:"fixed64,5,opt,name=sigmaB1,proto3" json:"sigmaB1,omitempty"`
	SigmaB2  float64 `protobuf:"fixed64,6,opt,name=sigmaB2,proto3" json:"sigmaB2,omitempty"`
	DSigmaM  float64 `protobuf:"fixed64,7,opt,name=dSigmaM,proto3" json:"dSigmaM,omitempty"`
	DSigmaR  float64 `protobuf:"fixed64,8,opt,name=dSigmaR,proto3" json:"dSigmaR,omitempty"`
	Q        float64 `protobuf:"fixed64,9,opt,name=q,proto3" json:"q,omitempty"`
	MinB     float64 `protobuf:"fixed64,10,opt,name=minB,proto3" json:"minB,omitempty"`
	Mkp      float64 `protobuf:"fixed64,11,opt,name=Mkp,json=mkp,proto3" json:"Mkp,omitempty"`
	Mkp1     float64 `protobuf:"fixed64,12,opt,name=Mkp1,json=mkp1,proto3" json:"Mkp1,omitempty"`
	Mrek     float64 `protobuf:"fixed64,13,opt,name=Mrek,json=mrek,proto3" json:"Mrek,omitempty"`
	Qrek     float64 `protobuf:"fixed64,14,opt,name=Qrek,json=qrek,proto3" json:"Qrek,omitempty"`
	Mmax     float64 `protobuf:"fixed64,15,opt,name=Mmax,json=mmax,proto3" json:"Mmax,omitempty"`
	Qmax     float64 `protobuf:"fixed64,16,opt,name=Qmax,json=qmax,proto3" json:"Qmax,omitempty"`
	VSigmaB1 bool    `protobuf:"varint,17,opt,name=vSigmaB1,proto3" json:"vSigmaB1,omitempty"`
	VSigmaB2 bool    `protobuf:"varint,18,opt,name=vSigmaB2,proto3" json:"vSigmaB2,omitempty"`
}

func (x *CalcMomentBasis) Reset() {
	*x = CalcMomentBasis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcMomentBasis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcMomentBasis) ProtoMessage() {}

func (x *CalcMomentBasis) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcMomentBasis.ProtoReflect.Descriptor instead.
func (*CalcMomentBasis) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{14}
}

func (x *CalcMomentBasis) GetPb() float64 {
	if x != nil {
		return x.Pb
	}
	return 0
}

func (x *CalcMomentBasis) GetPb1() float64 {
	if x != nil {
		return x.Pb1
	}
	return 0
}

func (x *CalcMomentBasis) GetPb2() float64 {
	if x != nil {
		return x.Pb2
	}
	return 0
}

func (x *CalcMomentBasis) GetPbr() float64 {
	if x != nil {
		return x.Pbr
	}
	return 0
}

func (x *CalcMomentBasis) GetSigmaB1() float64 {
	if x != nil {
		return x.SigmaB1
	}
	return 0
}

func (x *CalcMomentBasis) GetSigmaB2() float64 {
	if x != nil {
		return x.SigmaB2
	}
	return 0
}

func (x *CalcMomentBasis) GetDSigmaM() float64 {
	if x != nil {
		return x.DSigmaM
	}
	return 0
}

func (x *CalcMomentBasis) GetDSigmaR() float64 {
	if x != nil {
		return x.DSigmaR
	}
	return 0
}

func (x *CalcMomentBasis) GetQ() float64 {
	if x != nil {
		return x.Q
	}
	return 0
}

func (x *CalcMomentBasis) GetMinB() float64 {
	if x != nil {
		return x.MinB
	}
	return 0
}

func (x *CalcMomentBasis) GetMkp() float64 {
	if x != nil {
		return x.Mkp
	}
	return 0
}

func (x *CalcMomentBasis) GetMkp1() float64 {
	if x != nil {
		return x.Mkp1
	}
	return 0
}

func (x *CalcMomentBasis) GetMrek() float64 {
	if x != nil {
		return x.Mrek
	}
	return 0
}

func (x *CalcMomentBasis) GetQrek() float64 {
	if x != nil {
		return x.Qrek
	}
	return 0
}

func (x *CalcMomentBasis) GetMmax() float64 {
	if x != nil {
		return x.Mmax
	}
	return 0
}

func (x *CalcMomentBasis) GetQmax() float64 {
	if x != nil {
		return x.Qmax
	}
	return 0
}

func (x *CalcMomentBasis) GetVSigmaB1() bool {
	if x != nil {
		return x.VSigmaB1
	}
	return false
}

func (x *CalcMomentBasis) GetVSigmaB2() bool {
	if x != nil {
		return x.VSigmaB2
	}
	return false
}

type CalculatedFlange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	B0       float64             `protobuf:"fixed64,1,opt,name=b0,proto3" json:"b0,omitempty"`
	Dsp      float64             `protobuf:"fixed64,2,opt,name=Dsp,json=dsp,proto3" json:"Dsp,omitempty"`
	Po       float64             `protobuf:"fixed64,3,opt,name=Po,json=po,proto3" json:"Po,omitempty"`
	Rp       float64             `protobuf:"fixed64,4,opt,name=Rp,json=rp,proto3" json:"Rp,omitempty"`
	A        float64             `protobuf:"fixed64,5,opt,name=A,json=a,proto3" json:"A,omitempty"`
	Qd       float64             `protobuf:"fixed64,6,opt,name=Qd,json=qd,proto3" json:"Qd,omitempty"`
	Qfm      float64             `protobuf:"fixed64,7,opt,name=Qfm,json=qfm,proto3" json:"Qfm,omitempty"`
	Qt       float64             `protobuf:"fixed64,8,opt,name=Qt,json=qt,proto3" json:"Qt,omitempty"`
	Alpha    float64             `protobuf:"fixed64,9,opt,name=alpha,proto3" json:"alpha,omitempty"`
	AlphaM   float64             `protobuf:"fixed64,10,opt,name=alphaM,proto3" json:"alphaM,omitempty"`
	Strength *CalcMomentStrength `protobuf:"bytes,11,opt,name=strength,proto3" json:"strength,omitempty"`
	Basis    *CalcMomentBasis    `protobuf:"bytes,12,opt,name=basis,proto3" json:"basis,omitempty"`
}

func (x *CalculatedFlange) Reset() {
	*x = CalculatedFlange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculatedFlange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculatedFlange) ProtoMessage() {}

func (x *CalculatedFlange) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculatedFlange.ProtoReflect.Descriptor instead.
func (*CalculatedFlange) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{15}
}

func (x *CalculatedFlange) GetB0() float64 {
	if x != nil {
		return x.B0
	}
	return 0
}

func (x *CalculatedFlange) GetDsp() float64 {
	if x != nil {
		return x.Dsp
	}
	return 0
}

func (x *CalculatedFlange) GetPo() float64 {
	if x != nil {
		return x.Po
	}
	return 0
}

func (x *CalculatedFlange) GetRp() float64 {
	if x != nil {
		return x.Rp
	}
	return 0
}

func (x *CalculatedFlange) GetA() float64 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *CalculatedFlange) GetQd() float64 {
	if x != nil {
		return x.Qd
	}
	return 0
}

func (x *CalculatedFlange) GetQfm() float64 {
	if x != nil {
		return x.Qfm
	}
	return 0
}

func (x *CalculatedFlange) GetQt() float64 {
	if x != nil {
		return x.Qt
	}
	return 0
}

func (x *CalculatedFlange) GetAlpha() float64 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *CalculatedFlange) GetAlphaM() float64 {
	if x != nil {
		return x.AlphaM
	}
	return 0
}

func (x *CalculatedFlange) GetStrength() *CalcMomentStrength {
	if x != nil {
		return x.Strength
	}
	return nil
}

func (x *CalculatedFlange) GetBasis() *CalcMomentBasis {
	if x != nil {
		return x.Basis
	}
	return nil
}

type AddStrengthFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cf        string `protobuf:"bytes,1,opt,name=Cf,json=cf,proto3" json:"Cf,omitempty"`
	Dzv       string `protobuf:"bytes,2,opt,name=Dzv,json=dzv,proto3" json:"Dzv,omitempty"`
	MM        string `protobuf:"bytes,3,opt,name=MM,json=mM,proto3" json:"MM,omitempty"`
	MMk       string `protobuf:"bytes,4,opt,name=MMk,json=mMk,proto3" json:"MMk,omitempty"`
	Mpk       string `protobuf:"bytes,5,opt,name=Mpk,json=mpk,proto3" json:"Mpk,omitempty"`
	Mp        string `protobuf:"bytes,6,opt,name=Mp,json=mp,proto3" json:"Mp,omitempty"`
	SigmaM1   string `protobuf:"bytes,7,opt,name=sigmaM1,proto3" json:"sigmaM1,omitempty"`
	SigmaM0   string `protobuf:"bytes,8,opt,name=sigmaM0,proto3" json:"sigmaM0,omitempty"`
	SigmaT    string `protobuf:"bytes,9,opt,name=sigmaT,proto3" json:"sigmaT,omitempty"`
	SigmaR    string `protobuf:"bytes,10,opt,name=sigmaR,proto3" json:"sigmaR,omitempty"`
	SigmaTp   string `protobuf:"bytes,11,opt,name=sigmaTp,proto3" json:"sigmaTp,omitempty"`
	SigmaRp   string `protobuf:"bytes,12,opt,name=sigmaRp,proto3" json:"sigmaRp,omitempty"`
	SigmaK    string `protobuf:"bytes,13,opt,name=sigmaK,proto3" json:"sigmaK,omitempty"`
	SigmaP1   string `protobuf:"bytes,14,opt,name=sigmaP1,proto3" json:"sigmaP1,omitempty"`
	SigmaP0   string `protobuf:"bytes,15,opt,name=sigmaP0,proto3" json:"sigmaP0,omitempty"`
	SigmaMp   string `protobuf:"bytes,16,opt,name=sigmaMp,proto3" json:"sigmaMp,omitempty"`
	SigmaMpm  string `protobuf:"bytes,17,opt,name=sigmaMpm,proto3" json:"sigmaMpm,omitempty"`
	SigmaMp0  string `protobuf:"bytes,18,opt,name=sigmaMp0,proto3" json:"sigmaMp0,omitempty"`
	SigmaMpm0 string `protobuf:"bytes,19,opt,name=sigmaMpm0,proto3" json:"sigmaMpm0,omitempty"`
	SigmaMop  string `protobuf:"bytes,20,opt,name=sigmaMop,proto3" json:"sigmaMop,omitempty"`
	SigmaKp   string `protobuf:"bytes,21,opt,name=sigmaKp,proto3" json:"sigmaKp,omitempty"`
	Teta      string `protobuf:"bytes,22,opt,name=teta,proto3" json:"teta,omitempty"`
	DTeta     string `protobuf:"bytes,23,opt,name=dTeta,proto3" json:"dTeta,omitempty"`
	DTetaK    string `protobuf:"bytes,24,opt,name=dTetaK,proto3" json:"dTetaK,omitempty"`
	TetaK     string `protobuf:"bytes,25,opt,name=tetaK,proto3" json:"tetaK,omitempty"`
	Max1      string `protobuf:"bytes,26,opt,name=Max1,json=max1,proto3" json:"Max1,omitempty"`
	Max2      string `protobuf:"bytes,27,opt,name=Max2,json=max2,proto3" json:"Max2,omitempty"`
	Max3      string `protobuf:"bytes,28,opt,name=Max3,json=max3,proto3" json:"Max3,omitempty"`
	Max4      string `protobuf:"bytes,29,opt,name=Max4,json=max4,proto3" json:"Max4,omitempty"`
	Max5      string `protobuf:"bytes,30,opt,name=Max5,json=max5,proto3" json:"Max5,omitempty"`
	Max6      string `protobuf:"bytes,31,opt,name=Max6,json=max6,proto3" json:"Max6,omitempty"`
	Max7      string `protobuf:"bytes,32,opt,name=Max7,json=max7,proto3" json:"Max7,omitempty"`
	Max8      string `protobuf:"bytes,33,opt,name=Max8,json=max8,proto3" json:"Max8,omitempty"`
	Max9      string `protobuf:"bytes,34,opt,name=Max9,json=max9,proto3" json:"Max9,omitempty"`
	Max10     string `protobuf:"bytes,35,opt,name=Max10,json=max10,proto3" json:"Max10,omitempty"`
	Max11     string `protobuf:"bytes,36,opt,name=Max11,json=max11,proto3" json:"Max11,omitempty"`
}

func (x *AddStrengthFormulas) Reset() {
	*x = AddStrengthFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddStrengthFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddStrengthFormulas) ProtoMessage() {}

func (x *AddStrengthFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddStrengthFormulas.ProtoReflect.Descriptor instead.
func (*AddStrengthFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{16}
}

func (x *AddStrengthFormulas) GetCf() string {
	if x != nil {
		return x.Cf
	}
	return ""
}

func (x *AddStrengthFormulas) GetDzv() string {
	if x != nil {
		return x.Dzv
	}
	return ""
}

func (x *AddStrengthFormulas) GetMM() string {
	if x != nil {
		return x.MM
	}
	return ""
}

func (x *AddStrengthFormulas) GetMMk() string {
	if x != nil {
		return x.MMk
	}
	return ""
}

func (x *AddStrengthFormulas) GetMpk() string {
	if x != nil {
		return x.Mpk
	}
	return ""
}

func (x *AddStrengthFormulas) GetMp() string {
	if x != nil {
		return x.Mp
	}
	return ""
}

func (x *AddStrengthFormulas) GetSigmaM1() string {
	if x != nil {
		return x.SigmaM1
	}
	return ""
}

func (x *AddStrengthFormulas) GetSigmaM0() string {
	if x != nil {
		return x.SigmaM0
	}
	return ""
}

func (x *AddStrengthFormulas) GetSigmaT() string {
	if x != nil {
		return x.SigmaT
	}
	return ""
}

func (x *AddStrengthFormulas) GetSigmaR() string {
	if x != nil {
		return x.SigmaR
	}
	return ""
}

func (x *AddStrengthFormulas) GetSigmaTp() string {
	if x != nil {
		return x.SigmaTp
	}
	return ""
}

func (x *AddStrengthFormulas) GetSigmaRp() string {
	if x != nil {
		return x.SigmaRp
	}
	return ""
}

func (x *AddStrengthFormulas) GetSigmaK() string {
	if x != nil {
		return x.SigmaK
	}
	return ""
}

func (x *AddStrengthFormulas) GetSigmaP1() string {
	if x != nil {
		return x.SigmaP1
	}
	return ""
}

func (x *AddStrengthFormulas) GetSigmaP0() string {
	if x != nil {
		return x.SigmaP0
	}
	return ""
}

func (x *AddStrengthFormulas) GetSigmaMp() string {
	if x != nil {
		return x.SigmaMp
	}
	return ""
}

func (x *AddStrengthFormulas) GetSigmaMpm() string {
	if x != nil {
		return x.SigmaMpm
	}
	return ""
}

func (x *AddStrengthFormulas) GetSigmaMp0() string {
	if x != nil {
		return x.SigmaMp0
	}
	return ""
}

func (x *AddStrengthFormulas) GetSigmaMpm0() string {
	if x != nil {
		return x.SigmaMpm0
	}
	return ""
}

func (x *AddStrengthFormulas) GetSigmaMop() string {
	if x != nil {
		return x.SigmaMop
	}
	return ""
}

func (x *AddStrengthFormulas) GetSigmaKp() string {
	if x != nil {
		return x.SigmaKp
	}
	return ""
}

func (x *AddStrengthFormulas) GetTeta() string {
	if x != nil {
		return x.Teta
	}
	return ""
}

func (x *AddStrengthFormulas) GetDTeta() string {
	if x != nil {
		return x.DTeta
	}
	return ""
}

func (x *AddStrengthFormulas) GetDTetaK() string {
	if x != nil {
		return x.DTetaK
	}
	return ""
}

func (x *AddStrengthFormulas) GetTetaK() string {
	if x != nil {
		return x.TetaK
	}
	return ""
}

func (x *AddStrengthFormulas) GetMax1() string {
	if x != nil {
		return x.Max1
	}
	return ""
}

func (x *AddStrengthFormulas) GetMax2() string {
	if x != nil {
		return x.Max2
	}
	return ""
}

func (x *AddStrengthFormulas) GetMax3() string {
	if x != nil {
		return x.Max3
	}
	return ""
}

func (x *AddStrengthFormulas) GetMax4() string {
	if x != nil {
		return x.Max4
	}
	return ""
}

func (x *AddStrengthFormulas) GetMax5() string {
	if x != nil {
		return x.Max5
	}
	return ""
}

func (x *AddStrengthFormulas) GetMax6() string {
	if x != nil {
		return x.Max6
	}
	return ""
}

func (x *AddStrengthFormulas) GetMax7() string {
	if x != nil {
		return x.Max7
	}
	return ""
}

func (x *AddStrengthFormulas) GetMax8() string {
	if x != nil {
		return x.Max8
	}
	return ""
}

func (x *AddStrengthFormulas) GetMax9() string {
	if x != nil {
		return x.Max9
	}
	return ""
}

func (x *AddStrengthFormulas) GetMax10() string {
	if x != nil {
		return x.Max10
	}
	return ""
}

func (x *AddStrengthFormulas) GetMax11() string {
	if x != nil {
		return x.Max11
	}
	return ""
}

type FlangeFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A     string `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	B     string `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`
	E     string `protobuf:"bytes,3,opt,name=e,proto3" json:"e,omitempty"`
	Se    string `protobuf:"bytes,4,opt,name=Se,json=se,proto3" json:"Se,omitempty"`
	Xi    string `protobuf:"bytes,5,opt,name=xi,proto3" json:"xi,omitempty"`
	X     string `protobuf:"bytes,6,opt,name=x,proto3" json:"x,omitempty"`
	L0    string `protobuf:"bytes,7,opt,name=l0,proto3" json:"l0,omitempty"`
	Lymda string `protobuf:"bytes,8,opt,name=lymda,proto3" json:"lymda,omitempty"`
	Yf    string `protobuf:"bytes,9,opt,name=yf,proto3" json:"yf,omitempty"`
	Psik  string `protobuf:"bytes,10,opt,name=psik,proto3" json:"psik,omitempty"`
	Yk    string `protobuf:"bytes,11,opt,name=yk,proto3" json:"yk,omitempty"`
	Yfn   string `protobuf:"bytes,12,opt,name=yfn,proto3" json:"yfn,omitempty"`
	Yfc   string `protobuf:"bytes,13,opt,name=yfc,proto3" json:"yfc,omitempty"`
	K     string `protobuf:"bytes,14,opt,name=k,proto3" json:"k,omitempty"`
	Beta  string `protobuf:"bytes,15,opt,name=beta,proto3" json:"beta,omitempty"`
}

func (x *FlangeFormulas) Reset() {
	*x = FlangeFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlangeFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlangeFormulas) ProtoMessage() {}

func (x *FlangeFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlangeFormulas.ProtoReflect.Descriptor instead.
func (*FlangeFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{17}
}

func (x *FlangeFormulas) GetA() string {
	if x != nil {
		return x.A
	}
	return ""
}

func (x *FlangeFormulas) GetB() string {
	if x != nil {
		return x.B
	}
	return ""
}

func (x *FlangeFormulas) GetE() string {
	if x != nil {
		return x.E
	}
	return ""
}

func (x *FlangeFormulas) GetSe() string {
	if x != nil {
		return x.Se
	}
	return ""
}

func (x *FlangeFormulas) GetXi() string {
	if x != nil {
		return x.Xi
	}
	return ""
}

func (x *FlangeFormulas) GetX() string {
	if x != nil {
		return x.X
	}
	return ""
}

func (x *FlangeFormulas) GetL0() string {
	if x != nil {
		return x.L0
	}
	return ""
}

func (x *FlangeFormulas) GetLymda() string {
	if x != nil {
		return x.Lymda
	}
	return ""
}

func (x *FlangeFormulas) GetYf() string {
	if x != nil {
		return x.Yf
	}
	return ""
}

func (x *FlangeFormulas) GetPsik() string {
	if x != nil {
		return x.Psik
	}
	return ""
}

func (x *FlangeFormulas) GetYk() string {
	if x != nil {
		return x.Yk
	}
	return ""
}

func (x *FlangeFormulas) GetYfn() string {
	if x != nil {
		return x.Yfn
	}
	return ""
}

func (x *FlangeFormulas) GetYfc() string {
	if x != nil {
		return x.Yfc
	}
	return ""
}

func (x *FlangeFormulas) GetK() string {
	if x != nil {
		return x.K
	}
	return ""
}

func (x *FlangeFormulas) GetBeta() string {
	if x != nil {
		return x.Beta
	}
	return ""
}

type BasisFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pb      string `protobuf:"bytes,1,opt,name=Pb,json=pb,proto3" json:"Pb,omitempty"`
	Pb1     string `protobuf:"bytes,2,opt,name=Pb1,json=pb1,proto3" json:"Pb1,omitempty"`
	Pb2     string `protobuf:"bytes,3,opt,name=Pb2,json=pb2,proto3" json:"Pb2,omitempty"`
	Pbr     string `protobuf:"bytes,4,opt,name=Pbr,json=pbr,proto3" json:"Pbr,omitempty"`
	SigmaB1 string `protobuf:"bytes,5,opt,name=sigmaB1,proto3" json:"sigmaB1,omitempty"`
	SigmaB2 string `protobuf:"bytes,6,opt,name=sigmaB2,proto3" json:"sigmaB2,omitempty"`
	DSigmaM string `protobuf:"bytes,7,opt,name=dSigmaM,proto3" json:"dSigmaM,omitempty"`
	DSigmaR string `protobuf:"bytes,8,opt,name=dSigmaR,proto3" json:"dSigmaR,omitempty"`
	Q       string `protobuf:"bytes,9,opt,name=q,proto3" json:"q,omitempty"`
	Mkp     string `protobuf:"bytes,10,opt,name=Mkp,json=mkp,proto3" json:"Mkp,omitempty"`
	Mkp1    string `protobuf:"bytes,11,opt,name=Mkp1,json=mkp1,proto3" json:"Mkp1,omitempty"`
	Mrek    string `protobuf:"bytes,12,opt,name=Mrek,json=mrek,proto3" json:"Mrek,omitempty"`
	Qrek    string `protobuf:"bytes,13,opt,name=Qrek,json=qrek,proto3" json:"Qrek,omitempty"`
	Mmax    string `protobuf:"bytes,14,opt,name=Mmax,json=mmax,proto3" json:"Mmax,omitempty"`
	Qmax    string `protobuf:"bytes,15,opt,name=Qmax,json=qmax,proto3" json:"Qmax,omitempty"`
}

func (x *BasisFormulas) Reset() {
	*x = BasisFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasisFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasisFormulas) ProtoMessage() {}

func (x *BasisFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasisFormulas.ProtoReflect.Descriptor instead.
func (*BasisFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{18}
}

func (x *BasisFormulas) GetPb() string {
	if x != nil {
		return x.Pb
	}
	return ""
}

func (x *BasisFormulas) GetPb1() string {
	if x != nil {
		return x.Pb1
	}
	return ""
}

func (x *BasisFormulas) GetPb2() string {
	if x != nil {
		return x.Pb2
	}
	return ""
}

func (x *BasisFormulas) GetPbr() string {
	if x != nil {
		return x.Pbr
	}
	return ""
}

func (x *BasisFormulas) GetSigmaB1() string {
	if x != nil {
		return x.SigmaB1
	}
	return ""
}

func (x *BasisFormulas) GetSigmaB2() string {
	if x != nil {
		return x.SigmaB2
	}
	return ""
}

func (x *BasisFormulas) GetDSigmaM() string {
	if x != nil {
		return x.DSigmaM
	}
	return ""
}

func (x *BasisFormulas) GetDSigmaR() string {
	if x != nil {
		return x.DSigmaR
	}
	return ""
}

func (x *BasisFormulas) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *BasisFormulas) GetMkp() string {
	if x != nil {
		return x.Mkp
	}
	return ""
}

func (x *BasisFormulas) GetMkp1() string {
	if x != nil {
		return x.Mkp1
	}
	return ""
}

func (x *BasisFormulas) GetMrek() string {
	if x != nil {
		return x.Mrek
	}
	return ""
}

func (x *BasisFormulas) GetQrek() string {
	if x != nil {
		return x.Qrek
	}
	return ""
}

func (x *BasisFormulas) GetMmax() string {
	if x != nil {
		return x.Mmax
	}
	return ""
}

func (x *BasisFormulas) GetQmax() string {
	if x != nil {
		return x.Qmax
	}
	return ""
}

type StrengthFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FPb      string                 `protobuf:"bytes,1,opt,name=fPb,proto3" json:"fPb,omitempty"`
	FPb1     string                 `protobuf:"bytes,2,opt,name=fPb1,proto3" json:"fPb1,omitempty"`
	FPb2     string                 `protobuf:"bytes,3,opt,name=fPb2,proto3" json:"fPb2,omitempty"`
	FPbr     string                 `protobuf:"bytes,4,opt,name=fPbr,proto3" json:"fPbr,omitempty"`
	FSigmaB1 string                 `protobuf:"bytes,5,opt,name=fSigmaB1,proto3" json:"fSigmaB1,omitempty"`
	FSigmaB2 string                 `protobuf:"bytes,6,opt,name=fSigmaB2,proto3" json:"fSigmaB2,omitempty"`
	FDSigmaM string                 `protobuf:"bytes,7,opt,name=fDSigmaM,proto3" json:"fDSigmaM,omitempty"`
	FDSigmaR string                 `protobuf:"bytes,8,opt,name=fDSigmaR,proto3" json:"fDSigmaR,omitempty"`
	FQ       string                 `protobuf:"bytes,9,opt,name=fQ,proto3" json:"fQ,omitempty"`
	FMkp     string                 `protobuf:"bytes,10,opt,name=fMkp,proto3" json:"fMkp,omitempty"`
	FMkp1    string                 `protobuf:"bytes,11,opt,name=fMkp1,proto3" json:"fMkp1,omitempty"`
	SPb      string                 `protobuf:"bytes,12,opt,name=sPb,proto3" json:"sPb,omitempty"`
	SPb1     string                 `protobuf:"bytes,13,opt,name=sPb1,proto3" json:"sPb1,omitempty"`
	SPb2     string                 `protobuf:"bytes,14,opt,name=sPb2,proto3" json:"sPb2,omitempty"`
	SPbr     string                 `protobuf:"bytes,15,opt,name=sPbr,proto3" json:"sPbr,omitempty"`
	SSigmaB1 string                 `protobuf:"bytes,16,opt,name=sSigmaB1,proto3" json:"sSigmaB1,omitempty"`
	SSigmaB2 string                 `protobuf:"bytes,17,opt,name=sSigmaB2,proto3" json:"sSigmaB2,omitempty"`
	SDSigmaM string                 `protobuf:"bytes,18,opt,name=sDSigmaM,proto3" json:"sDSigmaM,omitempty"`
	SDSigmaR string                 `protobuf:"bytes,19,opt,name=sDSigmaR,proto3" json:"sDSigmaR,omitempty"`
	SQ       string                 `protobuf:"bytes,20,opt,name=sQ,proto3" json:"sQ,omitempty"`
	SMkp     string                 `protobuf:"bytes,21,opt,name=sMkp,proto3" json:"sMkp,omitempty"`
	SMkp1    string                 `protobuf:"bytes,22,opt,name=sMkp1,proto3" json:"sMkp1,omitempty"`
	Mrek     string                 `protobuf:"bytes,23,opt,name=Mrek,json=mrek,proto3" json:"Mrek,omitempty"`
	Qrek     string                 `protobuf:"bytes,24,opt,name=Qrek,json=qrek,proto3" json:"Qrek,omitempty"`
	Mmax     string                 `protobuf:"bytes,25,opt,name=Mmax,json=mmax,proto3" json:"Mmax,omitempty"`
	Qmax     string                 `protobuf:"bytes,26,opt,name=Qmax,json=qmax,proto3" json:"Qmax,omitempty"`
	Strength []*AddStrengthFormulas `protobuf:"bytes,27,rep,name=strength,proto3" json:"strength,omitempty"`
	Flange   []*FlangeFormulas      `protobuf:"bytes,28,rep,name=flange,proto3" json:"flange,omitempty"`
	Yp       string                 `protobuf:"bytes,29,opt,name=yp,proto3" json:"yp,omitempty"`
	Yb       string                 `protobuf:"bytes,30,opt,name=yb,proto3" json:"yb,omitempty"`
	Lb       string                 `protobuf:"bytes,31,opt,name=Lb,json=lb,proto3" json:"Lb,omitempty"`
	Gamma    string                 `protobuf:"bytes,32,opt,name=gamma,proto3" json:"gamma,omitempty"`
}

func (x *StrengthFormulas) Reset() {
	*x = StrengthFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrengthFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrengthFormulas) ProtoMessage() {}

func (x *StrengthFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrengthFormulas.ProtoReflect.Descriptor instead.
func (*StrengthFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{19}
}

func (x *StrengthFormulas) GetFPb() string {
	if x != nil {
		return x.FPb
	}
	return ""
}

func (x *StrengthFormulas) GetFPb1() string {
	if x != nil {
		return x.FPb1
	}
	return ""
}

func (x *StrengthFormulas) GetFPb2() string {
	if x != nil {
		return x.FPb2
	}
	return ""
}

func (x *StrengthFormulas) GetFPbr() string {
	if x != nil {
		return x.FPbr
	}
	return ""
}

func (x *StrengthFormulas) GetFSigmaB1() string {
	if x != nil {
		return x.FSigmaB1
	}
	return ""
}

func (x *StrengthFormulas) GetFSigmaB2() string {
	if x != nil {
		return x.FSigmaB2
	}
	return ""
}

func (x *StrengthFormulas) GetFDSigmaM() string {
	if x != nil {
		return x.FDSigmaM
	}
	return ""
}

func (x *StrengthFormulas) GetFDSigmaR() string {
	if x != nil {
		return x.FDSigmaR
	}
	return ""
}

func (x *StrengthFormulas) GetFQ() string {
	if x != nil {
		return x.FQ
	}
	return ""
}

func (x *StrengthFormulas) GetFMkp() string {
	if x != nil {
		return x.FMkp
	}
	return ""
}

func (x *StrengthFormulas) GetFMkp1() string {
	if x != nil {
		return x.FMkp1
	}
	return ""
}

func (x *StrengthFormulas) GetSPb() string {
	if x != nil {
		return x.SPb
	}
	return ""
}

func (x *StrengthFormulas) GetSPb1() string {
	if x != nil {
		return x.SPb1
	}
	return ""
}

func (x *StrengthFormulas) GetSPb2() string {
	if x != nil {
		return x.SPb2
	}
	return ""
}

func (x *StrengthFormulas) GetSPbr() string {
	if x != nil {
		return x.SPbr
	}
	return ""
}

func (x *StrengthFormulas) GetSSigmaB1() string {
	if x != nil {
		return x.SSigmaB1
	}
	return ""
}

func (x *StrengthFormulas) GetSSigmaB2() string {
	if x != nil {
		return x.SSigmaB2
	}
	return ""
}

func (x *StrengthFormulas) GetSDSigmaM() string {
	if x != nil {
		return x.SDSigmaM
	}
	return ""
}

func (x *StrengthFormulas) GetSDSigmaR() string {
	if x != nil {
		return x.SDSigmaR
	}
	return ""
}

func (x *StrengthFormulas) GetSQ() string {
	if x != nil {
		return x.SQ
	}
	return ""
}

func (x *StrengthFormulas) GetSMkp() string {
	if x != nil {
		return x.SMkp
	}
	return ""
}

func (x *StrengthFormulas) GetSMkp1() string {
	if x != nil {
		return x.SMkp1
	}
	return ""
}

func (x *StrengthFormulas) GetMrek() string {
	if x != nil {
		return x.Mrek
	}
	return ""
}

func (x *StrengthFormulas) GetQrek() string {
	if x != nil {
		return x.Qrek
	}
	return ""
}

func (x *StrengthFormulas) GetMmax() string {
	if x != nil {
		return x.Mmax
	}
	return ""
}

func (x *StrengthFormulas) GetQmax() string {
	if x != nil {
		return x.Qmax
	}
	return ""
}

func (x *StrengthFormulas) GetStrength() []*AddStrengthFormulas {
	if x != nil {
		return x.Strength
	}
	return nil
}

func (x *StrengthFormulas) GetFlange() []*FlangeFormulas {
	if x != nil {
		return x.Flange
	}
	return nil
}

func (x *StrengthFormulas) GetYp() string {
	if x != nil {
		return x.Yp
	}
	return ""
}

func (x *StrengthFormulas) GetYb() string {
	if x != nil {
		return x.Yb
	}
	return ""
}

func (x *StrengthFormulas) GetLb() string {
	if x != nil {
		return x.Lb
	}
	return ""
}

func (x *StrengthFormulas) GetGamma() string {
	if x != nil {
		return x.Gamma
	}
	return ""
}

type CalcFlangeFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	B0       string            `protobuf:"bytes,1,opt,name=b0,proto3" json:"b0,omitempty"`
	Dcp      string            `protobuf:"bytes,2,opt,name=Dcp,json=dcp,proto3" json:"Dcp,omitempty"`
	Po       string            `protobuf:"bytes,3,opt,name=Po,json=po,proto3" json:"Po,omitempty"`
	Rp       string            `protobuf:"bytes,4,opt,name=Rp,json=rp,proto3" json:"Rp,omitempty"`
	A        string            `protobuf:"bytes,5,opt,name=A,json=a,proto3" json:"A,omitempty"`
	Qd       string            `protobuf:"bytes,6,opt,name=Qd,json=qd,proto3" json:"Qd,omitempty"`
	Qfm      string            `protobuf:"bytes,7,opt,name=Qfm,json=qfm,proto3" json:"Qfm,omitempty"`
	Qt       string            `protobuf:"bytes,8,opt,name=Qt,json=qt,proto3" json:"Qt,omitempty"`
	Alpha    string            `protobuf:"bytes,9,opt,name=alpha,proto3" json:"alpha,omitempty"`
	AlphaM   string            `protobuf:"bytes,10,opt,name=alphaM,proto3" json:"alphaM,omitempty"`
	Basis    *BasisFormulas    `protobuf:"bytes,11,opt,name=basis,proto3" json:"basis,omitempty"`
	Strength *StrengthFormulas `protobuf:"bytes,12,opt,name=strength,proto3" json:"strength,omitempty"`
}

func (x *CalcFlangeFormulas) Reset() {
	*x = CalcFlangeFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcFlangeFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcFlangeFormulas) ProtoMessage() {}

func (x *CalcFlangeFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcFlangeFormulas.ProtoReflect.Descriptor instead.
func (*CalcFlangeFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{20}
}

func (x *CalcFlangeFormulas) GetB0() string {
	if x != nil {
		return x.B0
	}
	return ""
}

func (x *CalcFlangeFormulas) GetDcp() string {
	if x != nil {
		return x.Dcp
	}
	return ""
}

func (x *CalcFlangeFormulas) GetPo() string {
	if x != nil {
		return x.Po
	}
	return ""
}

func (x *CalcFlangeFormulas) GetRp() string {
	if x != nil {
		return x.Rp
	}
	return ""
}

func (x *CalcFlangeFormulas) GetA() string {
	if x != nil {
		return x.A
	}
	return ""
}

func (x *CalcFlangeFormulas) GetQd() string {
	if x != nil {
		return x.Qd
	}
	return ""
}

func (x *CalcFlangeFormulas) GetQfm() string {
	if x != nil {
		return x.Qfm
	}
	return ""
}

func (x *CalcFlangeFormulas) GetQt() string {
	if x != nil {
		return x.Qt
	}
	return ""
}

func (x *CalcFlangeFormulas) GetAlpha() string {
	if x != nil {
		return x.Alpha
	}
	return ""
}

func (x *CalcFlangeFormulas) GetAlphaM() string {
	if x != nil {
		return x.AlphaM
	}
	return ""
}

func (x *CalcFlangeFormulas) GetBasis() *BasisFormulas {
	if x != nil {
		return x.Basis
	}
	return nil
}

func (x *CalcFlangeFormulas) GetStrength() *StrengthFormulas {
	if x != nil {
		return x.Strength
	}
	return nil
}

type FlangeData_Size struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DOut float64 `protobuf:"fixed64,1,opt,name=dOut,proto3" json:"dOut,omitempty"`
	D    float64 `protobuf:"fixed64,2,opt,name=d,proto3" json:"d,omitempty"`
	H    float64 `protobuf:"fixed64,3,opt,name=h,proto3" json:"h,omitempty"`
	S0   float64 `protobuf:"fixed64,4,opt,name=s0,proto3" json:"s0,omitempty"`
	S1   float64 `protobuf:"fixed64,5,opt,name=s1,proto3" json:"s1,omitempty"`
	L    float64 `protobuf:"fixed64,6,opt,name=l,proto3" json:"l,omitempty"`
	D6   float64 `protobuf:"fixed64,7,opt,name=d6,proto3" json:"d6,omitempty"`
	Dnk  float64 `protobuf:"fixed64,8,opt,name=dnk,proto3" json:"dnk,omitempty"`
	Dk   float64 `protobuf:"fixed64,9,opt,name=dk,proto3" json:"dk,omitempty"`
	Ds   float64 `protobuf:"fixed64,10,opt,name=ds,proto3" json:"ds,omitempty"`
	H0   float64 `protobuf:"fixed64,11,opt,name=h0,proto3" json:"h0,omitempty"`
	Hk   float64 `protobuf:"fixed64,12,opt,name=hk,proto3" json:"hk,omitempty"`
}

func (x *FlangeData_Size) Reset() {
	*x = FlangeData_Size{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlangeData_Size) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlangeData_Size) ProtoMessage() {}

func (x *FlangeData_Size) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlangeData_Size.ProtoReflect.Descriptor instead.
func (*FlangeData_Size) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{1, 0}
}

func (x *FlangeData_Size) GetDOut() float64 {
	if x != nil {
		return x.DOut
	}
	return 0
}

func (x *FlangeData_Size) GetD() float64 {
	if x != nil {
		return x.D
	}
	return 0
}

func (x *FlangeData_Size) GetH() float64 {
	if x != nil {
		return x.H
	}
	return 0
}

func (x *FlangeData_Size) GetS0() float64 {
	if x != nil {
		return x.S0
	}
	return 0
}

func (x *FlangeData_Size) GetS1() float64 {
	if x != nil {
		return x.S1
	}
	return 0
}

func (x *FlangeData_Size) GetL() float64 {
	if x != nil {
		return x.L
	}
	return 0
}

func (x *FlangeData_Size) GetD6() float64 {
	if x != nil {
		return x.D6
	}
	return 0
}

func (x *FlangeData_Size) GetDnk() float64 {
	if x != nil {
		return x.Dnk
	}
	return 0
}

func (x *FlangeData_Size) GetDk() float64 {
	if x != nil {
		return x.Dk
	}
	return 0
}

func (x *FlangeData_Size) GetDs() float64 {
	if x != nil {
		return x.Ds
	}
	return 0
}

func (x *FlangeData_Size) GetH0() float64 {
	if x != nil {
		return x.H0
	}
	return 0
}

func (x *FlangeData_Size) GetHk() float64 {
	if x != nil {
		return x.Hk
	}
	return 0
}

type GasketData_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           string          `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Type            GasketData_Type `protobuf:"varint,2,opt,name=type,proto3,enum=flange_model.GasketData_Type" json:"type,omitempty"`
	Qo              float64         `protobuf:"fixed64,3,opt,name=qo,proto3" json:"qo,omitempty"`
	M               float64         `protobuf:"fixed64,4,opt,name=m,proto3" json:"m,omitempty"`
	Compression     float64         `protobuf:"fixed64,5,opt,name=compression,proto3" json:"compression,omitempty"`
	Epsilon         float64         `protobuf:"fixed64,6,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	PermissiblePres float64         `protobuf:"fixed64,7,opt,name=permissiblePres,proto3" json:"permissiblePres,omitempty"`
}

func (x *GasketData_Data) Reset() {
	*x = GasketData_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasketData_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasketData_Data) ProtoMessage() {}

func (x *GasketData_Data) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasketData_Data.ProtoReflect.Descriptor instead.
func (*GasketData_Data) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{4, 0}
}

func (x *GasketData_Data) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GasketData_Data) GetType() GasketData_Type {
	if x != nil {
		return x.Type
	}
	return GasketData_Soft
}

func (x *GasketData_Data) GetQo() float64 {
	if x != nil {
		return x.Qo
	}
	return 0
}

func (x *GasketData_Data) GetM() float64 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *GasketData_Data) GetCompression() float64 {
	if x != nil {
		return x.Compression
	}
	return 0
}

func (x *GasketData_Data) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *GasketData_Data) GetPermissiblePres() float64 {
	if x != nil {
		return x.PermissiblePres
	}
	return 0
}

var File_moment_calc_api_flange_model_proto protoreflect.FileDescriptor

var file_moment_calc_api_flange_model_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x22, 0xac, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x46, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x46, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x41, 0x74, 0x32, 0x30,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x41,
	0x74, 0x32, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x41, 0x74, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x41, 0x74, 0x32, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x69, 0x67, 0x6d, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x69, 0x67, 0x6d,
	0x61, 0x22, 0xb5, 0x05, 0x0a, 0x0a, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x64,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x64, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x70,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x70, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x72, 0x72, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x63, 0x6f, 0x72, 0x72, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x08,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x01, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x64, 0x6e, 0x1a, 0xc6, 0x01, 0x0a, 0x04, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x4f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x01, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01,
	0x68, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x73,
	0x30, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x73,
	0x31, 0x12, 0x0c, 0x0a, 0x01, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x6c, 0x12,
	0x0e, 0x0a, 0x02, 0x64, 0x36, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x64, 0x36, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x64, 0x6e,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x64,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x64,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x30, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x68,
	0x30, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x68,
	0x6b, 0x22, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x77, 0x65, 0x6c,
	0x64, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x74, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x10, 0x02, 0x22, 0xe2, 0x01, 0x0a, 0x08, 0x42, 0x6f,
	0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x6c, 0x64, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x7a,
	0x0a, 0x0a, 0x57, 0x61, 0x73, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0xb4, 0x03, 0x0a, 0x0a, 0x47,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x5f, 0x6f,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x11,
	0x0a, 0x04, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x64, 0x49,
	0x6e, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0xd3, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x71, 0x6f, 0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x22, 0x25, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x6f, 0x66, 0x74, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4f, 0x76, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x10,
	0x02, 0x22, 0x79, 0x0a, 0x09, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x9e, 0x02, 0x0a,
	0x0a, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x78, 0x69, 0x61, 0x6c,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x78, 0x69,
	0x61, 0x6c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x62, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x65, 0x6d,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x65, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x65, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe2, 0x08,
	0x0a, 0x0c, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x4f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x64, 0x4f,
	0x75, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x64, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x64, 0x6b,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x64,
	0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02,
	0x64, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x68,
	0x12, 0x0e, 0x0a, 0x02, 0x68, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x68, 0x6b,
	0x12, 0x0e, 0x0a, 0x02, 0x73, 0x30, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x73, 0x30,
	0x12, 0x0e, 0x0a, 0x02, 0x73, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x73, 0x31,
	0x12, 0x0c, 0x0a, 0x01, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x64, 0x36, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x64, 0x36, 0x12, 0x0c,
	0x0a, 0x01, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x63, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x74, 0x66, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x74, 0x6b, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x4b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x4b, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x4b,
	0x41, 0x74, 0x32, 0x30, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x65, 0x70, 0x73, 0x69,
	0x6c, 0x6f, 0x6e, 0x4b, 0x41, 0x74, 0x32, 0x30, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x70, 0x73, 0x69,
	0x6c, 0x6f, 0x6e, 0x4b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x70, 0x73, 0x69,
	0x6c, 0x6f, 0x6e, 0x4b, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4b, 0x41, 0x74,
	0x32, 0x30, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4b,
	0x41, 0x74, 0x32, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4b, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4b, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x46, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x46, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x41,
	0x74, 0x32, 0x30, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x65, 0x70, 0x73, 0x69, 0x6c,
	0x6f, 0x6e, 0x41, 0x74, 0x32, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x41, 0x74, 0x32, 0x30, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x41, 0x74, 0x32, 0x30, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73,
	0x69, 0x67, 0x6d, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x41, 0x74, 0x32, 0x30, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x41, 0x74, 0x32, 0x30, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6d, 0x61, 0x52, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x41, 0x74,
	0x32, 0x30, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x52,
	0x41, 0x74, 0x32, 0x30, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x30, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x02, 0x68, 0x30, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x62, 0x12, 0x0c, 0x0a, 0x01, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x01, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x53, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x69, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02,
	0x78, 0x69, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78,
	0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x30, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x6c, 0x30,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x79, 0x6d, 0x64, 0x61, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x6c, 0x79, 0x6d, 0x64, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x66, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x79, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x73, 0x69, 0x6b, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x73, 0x69, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x6b,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x79, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x79, 0x66,
	0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x79, 0x66, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x79, 0x66, 0x63, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x79, 0x66, 0x63, 0x12, 0x0c,
	0x0a, 0x01, 0x6b, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x65, 0x74, 0x61, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x62, 0x65, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x74, 0x61, 0x54, 0x18, 0x30, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x62, 0x65, 0x74, 0x61, 0x54, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x74, 0x61, 0x55, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x65, 0x74, 0x61, 0x55, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x65, 0x74, 0x61, 0x59, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x65, 0x74,
	0x61, 0x59, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x74, 0x61, 0x5a, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x62, 0x65, 0x74, 0x61, 0x5a, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x74, 0x61,
	0x46, 0x18, 0x34, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x65, 0x74, 0x61, 0x46, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x65, 0x74, 0x61, 0x56, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62,
	0x65, 0x74, 0x61, 0x56, 0x12, 0x0c, 0x0a, 0x01, 0x66, 0x18, 0x36, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x01, 0x66, 0x22, 0xa0, 0x02, 0x0a, 0x0a, 0x42, 0x6f, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x61, 0x72, 0x65,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x68, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74,
	0x65, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x70, 0x73,
	0x69, 0x6c, 0x6f, 0x6e, 0x41, 0x74, 0x32, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x41, 0x74, 0x32, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x70,
	0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x41, 0x74,
	0x32, 0x30, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x41,
	0x74, 0x32, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x9d, 0x02, 0x0a, 0x0c, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x13,
	0x0a, 0x05, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x64,
	0x4f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x71, 0x0a, 0x0b, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x22, 0x72, 0x0a, 0x0c, 0x57, 0x61, 0x73, 0x68,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x22, 0x92, 0x09, 0x0a,
	0x0e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x43, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x63, 0x66, 0x12,
	0x10, 0x0a, 0x03, 0x44, 0x7a, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x64, 0x7a,
	0x76, 0x12, 0x0e, 0x0a, 0x02, 0x4d, 0x4d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x6d,
	0x4d, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x4d, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6d, 0x4d, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x70, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x6d, 0x70, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x4d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x31,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x31, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x30, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67,
	0x6d, 0x61, 0x54, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6d, 0x61,
	0x54, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67,
	0x6d, 0x61, 0x54, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d,
	0x61, 0x54, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x70, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73,
	0x69, 0x67, 0x6d, 0x61, 0x4b, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x50, 0x31,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x50, 0x31, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x50, 0x30, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x50, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67,
	0x6d, 0x61, 0x4d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d,
	0x61, 0x4d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x6d, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x30, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x30, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x6d, 0x30, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x6d, 0x30, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67,
	0x6d, 0x61, 0x4d, 0x6f, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x69, 0x67,
	0x6d, 0x61, 0x4d, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4b, 0x70,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4b, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74,
	0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x54, 0x65, 0x74, 0x61, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x64, 0x54, 0x65, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x54, 0x65,
	0x74, 0x61, 0x4b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x64, 0x54, 0x65, 0x74, 0x61,
	0x4b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x74, 0x61, 0x4b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x74, 0x65, 0x74, 0x61, 0x4b, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x31, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x4d,
	0x61, 0x78, 0x32, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x32, 0x12,
	0x12, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x33, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d,
	0x61, 0x78, 0x33, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x34, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x35, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x4d,
	0x61, 0x78, 0x36, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x36, 0x12,
	0x12, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x37, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d,
	0x61, 0x78, 0x37, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x38, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x38, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x39, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x39, 0x12, 0x14, 0x0a, 0x05, 0x4d,
	0x61, 0x78, 0x31, 0x30, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x31,
	0x30, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x61, 0x78, 0x31, 0x31, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x6d, 0x61, 0x78, 0x31, 0x31, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x53, 0x61, 0x6d,
	0x65, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x53, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x64, 0x4d, 0x61, 0x78, 0x31, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x64, 0x4d, 0x61, 0x78, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x78,
	0x32, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x78,
	0x32, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x33, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x33, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x34, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x64, 0x4d, 0x61, 0x78, 0x35, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x64, 0x4d, 0x61, 0x78, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x78,
	0x36, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x78,
	0x36, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x37, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x37, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x38, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x38, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x64, 0x4d, 0x61, 0x78, 0x39, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x64, 0x4d, 0x61, 0x78, 0x39, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x78,
	0x31, 0x30, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x4d, 0x61,
	0x78, 0x31, 0x30, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x31, 0x31,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x31,
	0x31, 0x22, 0x9a, 0x07, 0x0a, 0x12, 0x43, 0x61, 0x6c, 0x63, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x50, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x50, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x50,
	0x62, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x66, 0x50, 0x62, 0x31, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x50, 0x62, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x66, 0x50,
	0x62, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x50, 0x62, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x66, 0x50, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x53, 0x69, 0x67, 0x6d, 0x61,
	0x42, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x66, 0x53, 0x69, 0x67, 0x6d, 0x61,
	0x42, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x32, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x66, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x32, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x44, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x66, 0x44, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x44,
	0x53, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x66, 0x44,
	0x53, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x51, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x66, 0x51, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x4d, 0x6b, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x66, 0x4d, 0x6b, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x4d,
	0x6b, 0x70, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x66, 0x4d, 0x6b, 0x70, 0x31,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x50, 0x62, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x73,
	0x50, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x50, 0x62, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x73, 0x50, 0x62, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x50, 0x62, 0x32, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x50, 0x62, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x50,
	0x62, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x50, 0x62, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x31, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x73, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x53,
	0x69, 0x67, 0x6d, 0x61, 0x42, 0x32, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x53,
	0x69, 0x67, 0x6d, 0x61, 0x42, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x44, 0x53, 0x69, 0x67, 0x6d,
	0x61, 0x4d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x44, 0x53, 0x69, 0x67, 0x6d,
	0x61, 0x4d, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x44, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x44, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x12, 0x0e,
	0x0a, 0x02, 0x73, 0x51, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x73, 0x51, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x42, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x69,
	0x6e, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x4d, 0x6b, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x73, 0x4d, 0x6b, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x4d, 0x6b, 0x70, 0x31, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x4d, 0x6b, 0x70, 0x31, 0x12, 0x12, 0x0a, 0x04,
	0x4d, 0x72, 0x65, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x72, 0x65, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x51, 0x72, 0x65, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x71, 0x72, 0x65, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6d, 0x61, 0x78, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x6d, 0x6d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x51, 0x6d, 0x61, 0x78,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x71, 0x6d, 0x61, 0x78, 0x12, 0x38, 0x0a, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x53, 0x69, 0x67, 0x6d, 0x61,
	0x42, 0x31, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x53, 0x69, 0x67, 0x6d, 0x61,
	0x42, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x32, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x32, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x51, 0x6d, 0x61, 0x78, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x51, 0x6d, 0x61, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x54, 0x65, 0x74, 0x61, 0x31, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x76, 0x54, 0x65, 0x74, 0x61, 0x31, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x54, 0x65, 0x74, 0x61, 0x4b, 0x31, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76,
	0x54, 0x65, 0x74, 0x61, 0x4b, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x54, 0x65, 0x74, 0x61, 0x32,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x76, 0x54, 0x65, 0x74, 0x61, 0x32, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x54, 0x65, 0x74, 0x61, 0x4b, 0x32, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x76, 0x54, 0x65, 0x74, 0x61, 0x4b, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x70, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x79, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x62, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x79, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x4c, 0x62, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x6c, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x6d,
	0x61, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x22, 0x8f,
	0x03, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x63, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02,
	0x70, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x62, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x70, 0x62, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x62, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x70, 0x62, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x62, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x62, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d,
	0x61, 0x42, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61,
	0x42, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x32, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x32, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64,
	0x53, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x53, 0x69, 0x67, 0x6d, 0x61,
	0x52, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x52,
	0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x42, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x69,
	0x6e, 0x42, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x6b, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6d, 0x6b, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6b, 0x70, 0x31, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x6d, 0x6b, 0x70, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x72, 0x65, 0x6b,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x72, 0x65, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x51, 0x72, 0x65, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x71, 0x72, 0x65, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6d, 0x61, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x6d, 0x6d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x51, 0x6d, 0x61, 0x78, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x71, 0x6d, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x53, 0x69, 0x67,
	0x6d, 0x61, 0x42, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x53, 0x69, 0x67,
	0x6d, 0x61, 0x42, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x32,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x32,
	0x22, 0xb5, 0x02, 0x0a, 0x10, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x46,
	0x6c, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x62, 0x30, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x64, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x02, 0x70, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x52, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x02, 0x72, 0x70, 0x12, 0x0c, 0x0a, 0x01, 0x41, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x01, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x51, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x71, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x51, 0x66, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x71, 0x66, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x51, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x02, 0x71, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x4d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x4d, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x73, 0x52, 0x05, 0x62, 0x61, 0x73, 0x69, 0x73, 0x22, 0xbd, 0x06, 0x0a, 0x13, 0x41, 0x64, 0x64,
	0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x43, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x66,
	0x12, 0x10, 0x0a, 0x03, 0x44, 0x7a, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64,
	0x7a, 0x76, 0x12, 0x0e, 0x0a, 0x02, 0x4d, 0x4d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x6d, 0x4d, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x4d, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x4d, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x70, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x70, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x4d, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d,
	0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x31,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x30, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69,
	0x67, 0x6d, 0x61, 0x54, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6d,
	0x61, 0x54, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69,
	0x67, 0x6d, 0x61, 0x54, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67,
	0x6d, 0x61, 0x54, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x70, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x69, 0x67, 0x6d, 0x61, 0x4b, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x50,
	0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x50, 0x31,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x50, 0x30, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x50, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69,
	0x67, 0x6d, 0x61, 0x4d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67,
	0x6d, 0x61, 0x4d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x6d,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x30, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x30, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x6d, 0x30, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x6d, 0x30, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69,
	0x67, 0x6d, 0x61, 0x4d, 0x6f, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69,
	0x67, 0x6d, 0x61, 0x4d, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4b,
	0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4b, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x54, 0x65, 0x74, 0x61, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x54, 0x65, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x54,
	0x65, 0x74, 0x61, 0x4b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x54, 0x65, 0x74,
	0x61, 0x4b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x74, 0x61, 0x4b, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x65, 0x74, 0x61, 0x4b, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x31,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x31, 0x12, 0x12, 0x0a, 0x04,
	0x4d, 0x61, 0x78, 0x32, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x32,
	0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x33, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x61, 0x78, 0x33, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x34, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x35,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x35, 0x12, 0x12, 0x0a, 0x04,
	0x4d, 0x61, 0x78, 0x36, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x36,
	0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x37, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x61, 0x78, 0x37, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x38, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x38, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x39,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x39, 0x12, 0x14, 0x0a, 0x05,
	0x4d, 0x61, 0x78, 0x31, 0x30, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x78,
	0x31, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x61, 0x78, 0x31, 0x31, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x31, 0x31, 0x22, 0x88, 0x02, 0x0a, 0x0e, 0x46, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x62, 0x12, 0x0c, 0x0a, 0x01, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x53, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x78, 0x69, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x6c, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x79, 0x6d, 0x64, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x79, 0x6d, 0x64, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x66, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x79, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x73, 0x69,
	0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x73, 0x69, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x79, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x79, 0x6b, 0x12, 0x10, 0x0a,
	0x03, 0x79, 0x66, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x79, 0x66, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x79, 0x66, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x79, 0x66,
	0x63, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x65, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62,
	0x65, 0x74, 0x61, 0x22, 0xc1, 0x02, 0x0a, 0x0d, 0x42, 0x61, 0x73, 0x69, 0x73, 0x46, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x70, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x62, 0x31, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x70, 0x62, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x62, 0x32, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x62, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x62, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x62, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x69, 0x67, 0x6d, 0x61, 0x42, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69,
	0x67, 0x6d, 0x61, 0x42, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x32,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x32, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x53, 0x69,
	0x67, 0x6d, 0x61, 0x52, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x53, 0x69, 0x67,
	0x6d, 0x61, 0x52, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x6b, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x6b, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6b, 0x70, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x6b, 0x70, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x72, 0x65, 0x6b, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x72, 0x65, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x51,
	0x72, 0x65, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x71, 0x72, 0x65, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x4d, 0x6d, 0x61, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x6d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x51, 0x6d, 0x61, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x71, 0x6d, 0x61, 0x78, 0x22, 0x8d, 0x06, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x66, 0x50, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x50, 0x62, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x50, 0x62, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x50,
	0x62, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x50, 0x62, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x50, 0x62, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x50, 0x62, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x50, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x53,
	0x69, 0x67, 0x6d, 0x61, 0x42, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x53,
	0x69, 0x67, 0x6d, 0x61, 0x42, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x53, 0x69, 0x67, 0x6d, 0x61,
	0x42, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x53, 0x69, 0x67, 0x6d, 0x61,
	0x42, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x44, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x44, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x44, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x44, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x51,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x66, 0x51, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x4d,
	0x6b, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x4d, 0x6b, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x4d, 0x6b, 0x70, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x4d, 0x6b, 0x70, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x50, 0x62, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x50, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x50, 0x62, 0x31, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x50, 0x62, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x50,
	0x62, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x50, 0x62, 0x32, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x50, 0x62, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x50,
	0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x31, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x31, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x32, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x44,
	0x53, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x44,
	0x53, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x44, 0x53, 0x69, 0x67, 0x6d,
	0x61, 0x52, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x44, 0x53, 0x69, 0x67, 0x6d,
	0x61, 0x52, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x51, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x73, 0x51, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x4d, 0x6b, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x4d, 0x6b, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x4d, 0x6b, 0x70, 0x31, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x4d, 0x6b, 0x70, 0x31, 0x12, 0x12, 0x0a, 0x04,
	0x4d, 0x72, 0x65, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x72, 0x65, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x51, 0x72, 0x65, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x71, 0x72, 0x65, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6d, 0x61, 0x78, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x6d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x51, 0x6d, 0x61, 0x78,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x71, 0x6d, 0x61, 0x78, 0x12, 0x3d, 0x0a, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x64,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x73, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x06, 0x66,
	0x6c, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x70, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x79,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x62, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x79,
	0x62, 0x12, 0x0e, 0x0a, 0x02, 0x4c, 0x62, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6c,
	0x62, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x22, 0xb3, 0x02, 0x0a, 0x12, 0x43, 0x61, 0x6c, 0x63,
	0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x62, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x62, 0x30, 0x12, 0x10,
	0x0a, 0x03, 0x44, 0x63, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x63, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x50, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x70, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x52, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x70,
	0x12, 0x0c, 0x0a, 0x01, 0x41, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x51, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x71, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x51, 0x66, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x71, 0x66, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x51, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x71, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x4d,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x4d, 0x12, 0x31,
	0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x05, 0x62, 0x61, 0x73, 0x69,
	0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x73, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x47, 0x5a,
	0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x6c, 0x65, 0x78,
	0x61, 0x6e, 0x64, 0x65, 0x72, 0x32, 0x37, 0x32, 0x2f, 0x73, 0x65, 0x61, 0x6c, 0x75, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_moment_calc_api_flange_model_proto_rawDescOnce sync.Once
	file_moment_calc_api_flange_model_proto_rawDescData = file_moment_calc_api_flange_model_proto_rawDesc
)

func file_moment_calc_api_flange_model_proto_rawDescGZIP() []byte {
	file_moment_calc_api_flange_model_proto_rawDescOnce.Do(func() {
		file_moment_calc_api_flange_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_moment_calc_api_flange_model_proto_rawDescData)
	})
	return file_moment_calc_api_flange_model_proto_rawDescData
}

var file_moment_calc_api_flange_model_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_moment_calc_api_flange_model_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_moment_calc_api_flange_model_proto_goTypes = []interface{}{
	(FlangeData_Type)(0),        // 0: flange_model.FlangeData.Type
	(GasketData_Type)(0),        // 1: flange_model.GasketData.Type
	(*MaterialData)(nil),        // 2: flange_model.MaterialData
	(*FlangeData)(nil),          // 3: flange_model.FlangeData
	(*BoltData)(nil),            // 4: flange_model.BoltData
	(*WasherData)(nil),          // 5: flange_model.WasherData
	(*GasketData)(nil),          // 6: flange_model.GasketData
	(*EmbedData)(nil),           // 7: flange_model.EmbedData
	(*DataResult)(nil),          // 8: flange_model.DataResult
	(*FlangeResult)(nil),        // 9: flange_model.FlangeResult
	(*BoltResult)(nil),          // 10: flange_model.BoltResult
	(*GasketResult)(nil),        // 11: flange_model.GasketResult
	(*EmbedResult)(nil),         // 12: flange_model.EmbedResult
	(*WasherResult)(nil),        // 13: flange_model.WasherResult
	(*StrengthResult)(nil),      // 14: flange_model.StrengthResult
	(*CalcMomentStrength)(nil),  // 15: flange_model.CalcMomentStrength
	(*CalcMomentBasis)(nil),     // 16: flange_model.CalcMomentBasis
	(*CalculatedFlange)(nil),    // 17: flange_model.CalculatedFlange
	(*AddStrengthFormulas)(nil), // 18: flange_model.AddStrengthFormulas
	(*FlangeFormulas)(nil),      // 19: flange_model.FlangeFormulas
	(*BasisFormulas)(nil),       // 20: flange_model.BasisFormulas
	(*StrengthFormulas)(nil),    // 21: flange_model.StrengthFormulas
	(*CalcFlangeFormulas)(nil),  // 22: flange_model.CalcFlangeFormulas
	(*FlangeData_Size)(nil),     // 23: flange_model.FlangeData.Size
	(*GasketData_Data)(nil),     // 24: flange_model.GasketData.Data
}
var file_moment_calc_api_flange_model_proto_depIdxs = []int32{
	0,  // 0: flange_model.FlangeData.type:type_name -> flange_model.FlangeData.Type
	23, // 1: flange_model.FlangeData.size:type_name -> flange_model.FlangeData.Size
	2,  // 2: flange_model.FlangeData.material:type_name -> flange_model.MaterialData
	2,  // 3: flange_model.FlangeData.ringMaterial:type_name -> flange_model.MaterialData
	2,  // 4: flange_model.BoltData.material:type_name -> flange_model.MaterialData
	2,  // 5: flange_model.WasherData.material:type_name -> flange_model.MaterialData
	24, // 6: flange_model.GasketData.data:type_name -> flange_model.GasketData.Data
	2,  // 7: flange_model.EmbedData.material:type_name -> flange_model.MaterialData
	14, // 8: flange_model.CalcMomentStrength.strength:type_name -> flange_model.StrengthResult
	15, // 9: flange_model.CalculatedFlange.strength:type_name -> flange_model.CalcMomentStrength
	16, // 10: flange_model.CalculatedFlange.basis:type_name -> flange_model.CalcMomentBasis
	18, // 11: flange_model.StrengthFormulas.strength:type_name -> flange_model.AddStrengthFormulas
	19, // 12: flange_model.StrengthFormulas.flange:type_name -> flange_model.FlangeFormulas
	20, // 13: flange_model.CalcFlangeFormulas.basis:type_name -> flange_model.BasisFormulas
	21, // 14: flange_model.CalcFlangeFormulas.strength:type_name -> flange_model.StrengthFormulas
	1,  // 15: flange_model.GasketData.Data.type:type_name -> flange_model.GasketData.Type
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_moment_calc_api_flange_model_proto_init() }
func file_moment_calc_api_flange_model_proto_init() {
	if File_moment_calc_api_flange_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_moment_calc_api_flange_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlangeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoltData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WasherData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlangeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoltResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasketResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WasherResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrengthResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcMomentStrength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcMomentBasis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculatedFlange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddStrengthFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlangeFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasisFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrengthFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcFlangeFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlangeData_Size); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasketData_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_moment_calc_api_flange_model_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_moment_calc_api_flange_model_proto_goTypes,
		DependencyIndexes: file_moment_calc_api_flange_model_proto_depIdxs,
		EnumInfos:         file_moment_calc_api_flange_model_proto_enumTypes,
		MessageInfos:      file_moment_calc_api_flange_model_proto_msgTypes,
	}.Build()
	File_moment_calc_api_flange_model_proto = out.File
	file_moment_calc_api_flange_model_proto_rawDesc = nil
	file_moment_calc_api_flange_model_proto_goTypes = nil
	file_moment_calc_api_flange_model_proto_depIdxs = nil
}
