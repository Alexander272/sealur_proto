// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: moment/calc_api/flange_model.proto

package flange_model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FlangeData_Type int32

const (
	FlangeData_welded FlangeData_Type = 0
	FlangeData_flat   FlangeData_Type = 1
	FlangeData_free   FlangeData_Type = 2
)

// Enum value maps for FlangeData_Type.
var (
	FlangeData_Type_name = map[int32]string{
		0: "welded",
		1: "flat",
		2: "free",
	}
	FlangeData_Type_value = map[string]int32{
		"welded": 0,
		"flat":   1,
		"free":   2,
	}
)

func (x FlangeData_Type) Enum() *FlangeData_Type {
	p := new(FlangeData_Type)
	*p = x
	return p
}

func (x FlangeData_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlangeData_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_flange_model_proto_enumTypes[0].Descriptor()
}

func (FlangeData_Type) Type() protoreflect.EnumType {
	return &file_moment_calc_api_flange_model_proto_enumTypes[0]
}

func (x FlangeData_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlangeData_Type.Descriptor instead.
func (FlangeData_Type) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{1, 0}
}

type GasketData_Type int32

const (
	GasketData_Soft  GasketData_Type = 0
	GasketData_Oval  GasketData_Type = 1
	GasketData_Metal GasketData_Type = 2
)

// Enum value maps for GasketData_Type.
var (
	GasketData_Type_name = map[int32]string{
		0: "Soft",
		1: "Oval",
		2: "Metal",
	}
	GasketData_Type_value = map[string]int32{
		"Soft":  0,
		"Oval":  1,
		"Metal": 2,
	}
)

func (x GasketData_Type) Enum() *GasketData_Type {
	p := new(GasketData_Type)
	*p = x
	return p
}

func (x GasketData_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GasketData_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_flange_model_proto_enumTypes[1].Descriptor()
}

func (GasketData_Type) Type() protoreflect.EnumType {
	return &file_moment_calc_api_flange_model_proto_enumTypes[1]
}

func (x GasketData_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GasketData_Type.Descriptor instead.
func (GasketData_Type) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{4, 0}
}

type MaterialData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	AlphaF      float64 `protobuf:"fixed64,2,opt,name=alphaF,proto3" json:"alphaF,omitempty"`
	EpsilonAt20 float64 `protobuf:"fixed64,3,opt,name=epsilonAt20,proto3" json:"epsilonAt20,omitempty"`
	Epsilon     float64 `protobuf:"fixed64,4,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	SigmaAt20   float64 `protobuf:"fixed64,5,opt,name=sigmaAt20,proto3" json:"sigmaAt20,omitempty"`
	Sigma       float64 `protobuf:"fixed64,6,opt,name=sigma,proto3" json:"sigma,omitempty"`
}

func (x *MaterialData) Reset() {
	*x = MaterialData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialData) ProtoMessage() {}

func (x *MaterialData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialData.ProtoReflect.Descriptor instead.
func (*MaterialData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{0}
}

func (x *MaterialData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MaterialData) GetAlphaF() float64 {
	if x != nil {
		return x.AlphaF
	}
	return 0
}

func (x *MaterialData) GetEpsilonAt20() float64 {
	if x != nil {
		return x.EpsilonAt20
	}
	return 0
}

func (x *MaterialData) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *MaterialData) GetSigmaAt20() float64 {
	if x != nil {
		return x.SigmaAt20
	}
	return 0
}

func (x *MaterialData) GetSigma() float64 {
	if x != nil {
		return x.Sigma
	}
	return 0
}

type FlangeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         FlangeData_Type  `protobuf:"varint,1,opt,name=type,proto3,enum=flange_model.FlangeData_Type" json:"type,omitempty"`
	StandartId   string           `protobuf:"bytes,2,opt,name=standartId,proto3" json:"standartId,omitempty"`
	MarkId       string           `protobuf:"bytes,3,opt,name=markId,proto3" json:"markId,omitempty"`
	Dy           float64          `protobuf:"fixed64,4,opt,name=dy,proto3" json:"dy,omitempty"`
	Py           float64          `protobuf:"fixed64,5,opt,name=py,proto3" json:"py,omitempty"`
	Corrosion    float64          `protobuf:"fixed64,6,opt,name=corrosion,proto3" json:"corrosion,omitempty"`
	Size         *FlangeData_Size `protobuf:"bytes,7,opt,name=size,proto3" json:"size,omitempty"`
	Material     *MaterialData    `protobuf:"bytes,8,opt,name=material,proto3" json:"material,omitempty"`
	Temp         float64          `protobuf:"fixed64,9,opt,name=temp,proto3" json:"temp,omitempty"`
	RingMarkId   string           `protobuf:"bytes,10,opt,name=ringMarkId,proto3" json:"ringMarkId,omitempty"`
	RingMaterial *MaterialData    `protobuf:"bytes,11,opt,name=ringMaterial,proto3" json:"ringMaterial,omitempty"`
	B            float64          `protobuf:"fixed64,12,opt,name=b,proto3" json:"b,omitempty"`
	Row          int32            `protobuf:"varint,13,opt,name=row,proto3" json:"row,omitempty"`
	Dn           string           `protobuf:"bytes,14,opt,name=dn,proto3" json:"dn,omitempty"`
}

func (x *FlangeData) Reset() {
	*x = FlangeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlangeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlangeData) ProtoMessage() {}

func (x *FlangeData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlangeData.ProtoReflect.Descriptor instead.
func (*FlangeData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{1}
}

func (x *FlangeData) GetType() FlangeData_Type {
	if x != nil {
		return x.Type
	}
	return FlangeData_welded
}

func (x *FlangeData) GetStandartId() string {
	if x != nil {
		return x.StandartId
	}
	return ""
}

func (x *FlangeData) GetMarkId() string {
	if x != nil {
		return x.MarkId
	}
	return ""
}

func (x *FlangeData) GetDy() float64 {
	if x != nil {
		return x.Dy
	}
	return 0
}

func (x *FlangeData) GetPy() float64 {
	if x != nil {
		return x.Py
	}
	return 0
}

func (x *FlangeData) GetCorrosion() float64 {
	if x != nil {
		return x.Corrosion
	}
	return 0
}

func (x *FlangeData) GetSize() *FlangeData_Size {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *FlangeData) GetMaterial() *MaterialData {
	if x != nil {
		return x.Material
	}
	return nil
}

func (x *FlangeData) GetTemp() float64 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *FlangeData) GetRingMarkId() string {
	if x != nil {
		return x.RingMarkId
	}
	return ""
}

func (x *FlangeData) GetRingMaterial() *MaterialData {
	if x != nil {
		return x.RingMaterial
	}
	return nil
}

func (x *FlangeData) GetB() float64 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *FlangeData) GetRow() int32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *FlangeData) GetDn() string {
	if x != nil {
		return x.Dn
	}
	return ""
}

type BoltData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkId   string        `protobuf:"bytes,1,opt,name=markId,proto3" json:"markId,omitempty"`
	Diameter float64       `protobuf:"fixed64,2,opt,name=diameter,proto3" json:"diameter,omitempty"`
	Count    int32         `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Material *MaterialData `protobuf:"bytes,4,opt,name=material,proto3" json:"material,omitempty"`
	Temp     float64       `protobuf:"fixed64,5,opt,name=temp,proto3" json:"temp,omitempty"`
	Title    string        `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Area     float64       `protobuf:"fixed64,7,opt,name=area,proto3" json:"area,omitempty"`
	BoltId   string        `protobuf:"bytes,8,opt,name=boltId,proto3" json:"boltId,omitempty"`
}

func (x *BoltData) Reset() {
	*x = BoltData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoltData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoltData) ProtoMessage() {}

func (x *BoltData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoltData.ProtoReflect.Descriptor instead.
func (*BoltData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{2}
}

func (x *BoltData) GetMarkId() string {
	if x != nil {
		return x.MarkId
	}
	return ""
}

func (x *BoltData) GetDiameter() float64 {
	if x != nil {
		return x.Diameter
	}
	return 0
}

func (x *BoltData) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BoltData) GetMaterial() *MaterialData {
	if x != nil {
		return x.Material
	}
	return nil
}

func (x *BoltData) GetTemp() float64 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *BoltData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BoltData) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *BoltData) GetBoltId() string {
	if x != nil {
		return x.BoltId
	}
	return ""
}

type WasherData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkId    string        `protobuf:"bytes,1,opt,name=markId,proto3" json:"markId,omitempty"`
	Thickness float64       `protobuf:"fixed64,2,opt,name=thickness,proto3" json:"thickness,omitempty"`
	Material  *MaterialData `protobuf:"bytes,3,opt,name=material,proto3" json:"material,omitempty"`
}

func (x *WasherData) Reset() {
	*x = WasherData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WasherData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasherData) ProtoMessage() {}

func (x *WasherData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasherData.ProtoReflect.Descriptor instead.
func (*WasherData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{3}
}

func (x *WasherData) GetMarkId() string {
	if x != nil {
		return x.MarkId
	}
	return ""
}

func (x *WasherData) GetThickness() float64 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

func (x *WasherData) GetMaterial() *MaterialData {
	if x != nil {
		return x.Material
	}
	return nil
}

type GasketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasketId  string           `protobuf:"bytes,1,opt,name=gasketId,proto3" json:"gasketId,omitempty"`
	EnvId     string           `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	Thickness float64          `protobuf:"fixed64,3,opt,name=thickness,proto3" json:"thickness,omitempty"`
	DOut      float64          `protobuf:"fixed64,4,opt,name=d_out,json=dOut,proto3" json:"d_out,omitempty"`
	DIn       float64          `protobuf:"fixed64,5,opt,name=d_in,json=dIn,proto3" json:"d_in,omitempty"`
	Data      *GasketData_Data `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GasketData) Reset() {
	*x = GasketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasketData) ProtoMessage() {}

func (x *GasketData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasketData.ProtoReflect.Descriptor instead.
func (*GasketData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{4}
}

func (x *GasketData) GetGasketId() string {
	if x != nil {
		return x.GasketId
	}
	return ""
}

func (x *GasketData) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *GasketData) GetThickness() float64 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

func (x *GasketData) GetDOut() float64 {
	if x != nil {
		return x.DOut
	}
	return 0
}

func (x *GasketData) GetDIn() float64 {
	if x != nil {
		return x.DIn
	}
	return 0
}

func (x *GasketData) GetData() *GasketData_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type EmbedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkId    string        `protobuf:"bytes,1,opt,name=markId,proto3" json:"markId,omitempty"`
	Thickness float64       `protobuf:"fixed64,2,opt,name=thickness,proto3" json:"thickness,omitempty"`
	Material  *MaterialData `protobuf:"bytes,3,opt,name=material,proto3" json:"material,omitempty"`
}

func (x *EmbedData) Reset() {
	*x = EmbedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedData) ProtoMessage() {}

func (x *EmbedData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedData.ProtoReflect.Descriptor instead.
func (*EmbedData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{5}
}

func (x *EmbedData) GetMarkId() string {
	if x != nil {
		return x.MarkId
	}
	return ""
}

func (x *EmbedData) GetThickness() float64 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

func (x *EmbedData) GetMaterial() *MaterialData {
	if x != nil {
		return x.Material
	}
	return nil
}

type DataResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Расчетное давление
	Pressure float64 `protobuf:"fixed64,1,opt,name=pressure,proto3" json:"pressure,omitempty"`
	// Внешняя осевая сила
	AxialForce int32 `protobuf:"varint,2,opt,name=axialForce,proto3" json:"axialForce,omitempty"`
	// Внешний изгибающий момент
	BendingMoment int32 `protobuf:"varint,3,opt,name=bendingMoment,proto3" json:"bendingMoment,omitempty"`
	// Расчетная температура
	Temp float64 `protobuf:"fixed64,4,opt,name=temp,proto3" json:"temp,omitempty"`
	// Условия работы
	Work string `protobuf:"bytes,5,opt,name=work,proto3" json:"work,omitempty"`
	// Температура элементов фланцевого соединения
	Flanges string `protobuf:"bytes,6,opt,name=flanges,proto3" json:"flanges,omitempty"`
	// Одинаковые фланцы
	SameFlange string `protobuf:"bytes,7,opt,name=sameFlange,proto3" json:"sameFlange,omitempty"`
	// Закладная деталь
	Embedded string `protobuf:"bytes,8,opt,name=embedded,proto3" json:"embedded,omitempty"`
	// Тип соединения
	Type string `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	// Условие затяжки
	Condition string `protobuf:"bytes,10,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *DataResult) Reset() {
	*x = DataResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataResult) ProtoMessage() {}

func (x *DataResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataResult.ProtoReflect.Descriptor instead.
func (*DataResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{6}
}

func (x *DataResult) GetPressure() float64 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *DataResult) GetAxialForce() int32 {
	if x != nil {
		return x.AxialForce
	}
	return 0
}

func (x *DataResult) GetBendingMoment() int32 {
	if x != nil {
		return x.BendingMoment
	}
	return 0
}

func (x *DataResult) GetTemp() float64 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *DataResult) GetWork() string {
	if x != nil {
		return x.Work
	}
	return ""
}

func (x *DataResult) GetFlanges() string {
	if x != nil {
		return x.Flanges
	}
	return ""
}

func (x *DataResult) GetSameFlange() string {
	if x != nil {
		return x.SameFlange
	}
	return ""
}

func (x *DataResult) GetEmbedded() string {
	if x != nil {
		return x.Embedded
	}
	return ""
}

func (x *DataResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DataResult) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

type FlangeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Наружный диаметр фланца
	DOut float64 `protobuf:"fixed64,1,opt,name=dOut,proto3" json:"dOut,omitempty"`
	// Внутренний диаметр фланца
	D float64 `protobuf:"fixed64,2,opt,name=d,proto3" json:"d,omitempty"`
	// Внутренний диаметр кольца свободного фланца
	Dk float64 `protobuf:"fixed64,3,opt,name=dk,proto3" json:"dk,omitempty"`
	// Наружный диаметр кольца свободного фланца
	Dnk float64 `protobuf:"fixed64,4,opt,name=dnk,proto3" json:"dnk,omitempty"`
	// Наружный диаметр контакта бурта и кольца свободного фланца
	Ds float64 `protobuf:"fixed64,5,opt,name=ds,proto3" json:"ds,omitempty"`
	// Толщина тарелки фланца
	H float64 `protobuf:"fixed64,6,opt,name=h,proto3" json:"h,omitempty"`
	// Расстояние от наружной поверхности обечайки до внутренней окружности контакта бурта
	H0 float64 `protobuf:"fixed64,7,opt,name=h0,proto3" json:"h0,omitempty"`
	// Толщина кольца свободного фланца
	Hk float64 `protobuf:"fixed64,8,opt,name=hk,proto3" json:"hk,omitempty"`
	// Толщина втулки приварного встык фланца в месте приварки к обечайке (трубе)
	S0 float64 `protobuf:"fixed64,9,opt,name=s0,proto3" json:"s0,omitempty"`
	// Толщина втулки приварного встык фланца в месте присоединения к тарелке
	S1 float64 `protobuf:"fixed64,10,opt,name=s1,proto3" json:"s1,omitempty"`
	// Длина конической втулки приварного встык фланца
	L float64 `protobuf:"fixed64,11,opt,name=l,proto3" json:"l,omitempty"`
	// Диаметр окружности расположения болтов (шпилек)
	D6 float64 `protobuf:"fixed64,12,opt,name=d6,proto3" json:"d6,omitempty"`
	// Прибавка на коррозию
	C float64 `protobuf:"fixed64,13,opt,name=c,proto3" json:"c,omitempty"`
	// Расчетная температура фланца
	Tf          float64 `protobuf:"fixed64,14,opt,name=tf,proto3" json:"tf,omitempty"`
	AlphaF      float64 `protobuf:"fixed64,15,opt,name=alphaF,proto3" json:"alphaF,omitempty"`
	EpsilonAt20 float64 `protobuf:"fixed64,16,opt,name=epsilonAt20,proto3" json:"epsilonAt20,omitempty"`
	Epsilon     float64 `protobuf:"fixed64,17,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	SigmaAt20   float64 `protobuf:"fixed64,18,opt,name=sigmaAt20,proto3" json:"sigmaAt20,omitempty"`
	Sigma       float64 `protobuf:"fixed64,19,opt,name=sigma,proto3" json:"sigma,omitempty"`
	// Допускаемое значение общих мембранных и изгибных напряжений во фланце в рабочих условиях
	SigmaM float64 `protobuf:"fixed64,20,opt,name=sigmaM,proto3" json:"sigmaM,omitempty"`
	// Допускаемое значение общих мембранных и изгибных напряжений во фланце при затяжке
	SigmaMAt20 float64 `protobuf:"fixed64,21,opt,name=sigmaMAt20,proto3" json:"sigmaMAt20,omitempty"`
	// Допускаемое значение суммарных общих и местных условных упругих мембранных и изгибных напряжений во фланце в рабочих условиях
	SigmaR float64 `protobuf:"fixed64,22,opt,name=sigmaR,proto3" json:"sigmaR,omitempty"`
	// Допускаемое значение суммарных общих и местных условных упругих мембранных и изгибных напряжений во фланце при затяжке
	SigmaRAt20 float64            `protobuf:"fixed64,23,opt,name=sigmaRAt20,proto3" json:"sigmaRAt20,omitempty"`
	Material   string             `protobuf:"bytes,24,opt,name=material,proto3" json:"material,omitempty"`
	Ring       *FlangeResult_Ring `protobuf:"bytes,25,opt,name=ring,proto3" json:"ring,omitempty"`
	// Тип фланца
	Type string `protobuf:"bytes,26,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *FlangeResult) Reset() {
	*x = FlangeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlangeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlangeResult) ProtoMessage() {}

func (x *FlangeResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlangeResult.ProtoReflect.Descriptor instead.
func (*FlangeResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{7}
}

func (x *FlangeResult) GetDOut() float64 {
	if x != nil {
		return x.DOut
	}
	return 0
}

func (x *FlangeResult) GetD() float64 {
	if x != nil {
		return x.D
	}
	return 0
}

func (x *FlangeResult) GetDk() float64 {
	if x != nil {
		return x.Dk
	}
	return 0
}

func (x *FlangeResult) GetDnk() float64 {
	if x != nil {
		return x.Dnk
	}
	return 0
}

func (x *FlangeResult) GetDs() float64 {
	if x != nil {
		return x.Ds
	}
	return 0
}

func (x *FlangeResult) GetH() float64 {
	if x != nil {
		return x.H
	}
	return 0
}

func (x *FlangeResult) GetH0() float64 {
	if x != nil {
		return x.H0
	}
	return 0
}

func (x *FlangeResult) GetHk() float64 {
	if x != nil {
		return x.Hk
	}
	return 0
}

func (x *FlangeResult) GetS0() float64 {
	if x != nil {
		return x.S0
	}
	return 0
}

func (x *FlangeResult) GetS1() float64 {
	if x != nil {
		return x.S1
	}
	return 0
}

func (x *FlangeResult) GetL() float64 {
	if x != nil {
		return x.L
	}
	return 0
}

func (x *FlangeResult) GetD6() float64 {
	if x != nil {
		return x.D6
	}
	return 0
}

func (x *FlangeResult) GetC() float64 {
	if x != nil {
		return x.C
	}
	return 0
}

func (x *FlangeResult) GetTf() float64 {
	if x != nil {
		return x.Tf
	}
	return 0
}

func (x *FlangeResult) GetAlphaF() float64 {
	if x != nil {
		return x.AlphaF
	}
	return 0
}

func (x *FlangeResult) GetEpsilonAt20() float64 {
	if x != nil {
		return x.EpsilonAt20
	}
	return 0
}

func (x *FlangeResult) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *FlangeResult) GetSigmaAt20() float64 {
	if x != nil {
		return x.SigmaAt20
	}
	return 0
}

func (x *FlangeResult) GetSigma() float64 {
	if x != nil {
		return x.Sigma
	}
	return 0
}

func (x *FlangeResult) GetSigmaM() float64 {
	if x != nil {
		return x.SigmaM
	}
	return 0
}

func (x *FlangeResult) GetSigmaMAt20() float64 {
	if x != nil {
		return x.SigmaMAt20
	}
	return 0
}

func (x *FlangeResult) GetSigmaR() float64 {
	if x != nil {
		return x.SigmaR
	}
	return 0
}

func (x *FlangeResult) GetSigmaRAt20() float64 {
	if x != nil {
		return x.SigmaRAt20
	}
	return 0
}

func (x *FlangeResult) GetMaterial() string {
	if x != nil {
		return x.Material
	}
	return ""
}

func (x *FlangeResult) GetRing() *FlangeResult_Ring {
	if x != nil {
		return x.Ring
	}
	return nil
}

func (x *FlangeResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type BoltResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Наружный диаметр болта (шпильки)
	Diameter float64 `protobuf:"fixed64,1,opt,name=diameter,proto3" json:"diameter,omitempty"`
	// Площадь болта (шпильки)
	Area float64 `protobuf:"fixed64,2,opt,name=area,proto3" json:"area,omitempty"`
	// Число болтов (шпилек)
	Count int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	// Расстояние между опорными поверхностями гайки и головки болта
	Length float64 `protobuf:"fixed64,4,opt,name=length,proto3" json:"length,omitempty"`
	// Расчетная температура болта (шпильки)
	Temp        float64 `protobuf:"fixed64,5,opt,name=temp,proto3" json:"temp,omitempty"`
	Alpha       float64 `protobuf:"fixed64,6,opt,name=alpha,proto3" json:"alpha,omitempty"`
	EpsilonAt20 float64 `protobuf:"fixed64,7,opt,name=epsilonAt20,proto3" json:"epsilonAt20,omitempty"`
	Epsilon     float64 `protobuf:"fixed64,8,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	SigmaAt20   float64 `protobuf:"fixed64,9,opt,name=sigmaAt20,proto3" json:"sigmaAt20,omitempty"`
	Sigma       float64 `protobuf:"fixed64,10,opt,name=sigma,proto3" json:"sigma,omitempty"`
	Material    string  `protobuf:"bytes,11,opt,name=material,proto3" json:"material,omitempty"`
}

func (x *BoltResult) Reset() {
	*x = BoltResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoltResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoltResult) ProtoMessage() {}

func (x *BoltResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoltResult.ProtoReflect.Descriptor instead.
func (*BoltResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{8}
}

func (x *BoltResult) GetDiameter() float64 {
	if x != nil {
		return x.Diameter
	}
	return 0
}

func (x *BoltResult) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *BoltResult) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BoltResult) GetLength() float64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *BoltResult) GetTemp() float64 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *BoltResult) GetAlpha() float64 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *BoltResult) GetEpsilonAt20() float64 {
	if x != nil {
		return x.EpsilonAt20
	}
	return 0
}

func (x *BoltResult) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *BoltResult) GetSigmaAt20() float64 {
	if x != nil {
		return x.SigmaAt20
	}
	return 0
}

func (x *BoltResult) GetSigma() float64 {
	if x != nil {
		return x.Sigma
	}
	return 0
}

func (x *BoltResult) GetMaterial() string {
	if x != nil {
		return x.Material
	}
	return ""
}

type GasketResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Название прокладки
	Gasket string `protobuf:"bytes,1,opt,name=gasket,proto3" json:"gasket,omitempty"`
	// Уплотняемая среда
	Env string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	// Толщина прокладки
	Thickness float64 `protobuf:"fixed64,3,opt,name=thickness,proto3" json:"thickness,omitempty"`
	// Наружный диаметр прокладки
	DOut float64 `protobuf:"fixed64,4,opt,name=d_out,json=dOut,proto3" json:"d_out,omitempty"`
	// Ширина прокладки
	Width float64 `protobuf:"fixed64,5,opt,name=width,proto3" json:"width,omitempty"`
	// Прокладочный коэффициент
	M float64 `protobuf:"fixed64,6,opt,name=m,proto3" json:"m,omitempty"`
	// Удельное давление обжатия прокладки
	Pres float64 `protobuf:"fixed64,7,opt,name=pres,proto3" json:"pres,omitempty"`
	// Коэффициент обжатия
	Compression float64 `protobuf:"fixed64,8,opt,name=compression,proto3" json:"compression,omitempty"`
	// Условный модуль сжатия прокладки
	Epsilon float64 `protobuf:"fixed64,9,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	// Допускаемое удельное давление
	PermissiblePres float64 `protobuf:"fixed64,10,opt,name=permissiblePres,proto3" json:"permissiblePres,omitempty"`
	Type            string  `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GasketResult) Reset() {
	*x = GasketResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasketResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasketResult) ProtoMessage() {}

func (x *GasketResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasketResult.ProtoReflect.Descriptor instead.
func (*GasketResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{9}
}

func (x *GasketResult) GetGasket() string {
	if x != nil {
		return x.Gasket
	}
	return ""
}

func (x *GasketResult) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *GasketResult) GetThickness() float64 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

func (x *GasketResult) GetDOut() float64 {
	if x != nil {
		return x.DOut
	}
	return 0
}

func (x *GasketResult) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *GasketResult) GetM() float64 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *GasketResult) GetPres() float64 {
	if x != nil {
		return x.Pres
	}
	return 0
}

func (x *GasketResult) GetCompression() float64 {
	if x != nil {
		return x.Compression
	}
	return 0
}

func (x *GasketResult) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *GasketResult) GetPermissiblePres() float64 {
	if x != nil {
		return x.PermissiblePres
	}
	return 0
}

func (x *GasketResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type EmbedResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Material  string  `protobuf:"bytes,1,opt,name=material,proto3" json:"material,omitempty"`
	Thickness float64 `protobuf:"fixed64,2,opt,name=thickness,proto3" json:"thickness,omitempty"`
	Alpha     float64 `protobuf:"fixed64,3,opt,name=alpha,proto3" json:"alpha,omitempty"`
	Temp      float64 `protobuf:"fixed64,4,opt,name=temp,proto3" json:"temp,omitempty"`
}

func (x *EmbedResult) Reset() {
	*x = EmbedResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedResult) ProtoMessage() {}

func (x *EmbedResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedResult.ProtoReflect.Descriptor instead.
func (*EmbedResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{10}
}

func (x *EmbedResult) GetMaterial() string {
	if x != nil {
		return x.Material
	}
	return ""
}

func (x *EmbedResult) GetThickness() float64 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

func (x *EmbedResult) GetAlpha() float64 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *EmbedResult) GetTemp() float64 {
	if x != nil {
		return x.Temp
	}
	return 0
}

type WasherResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Material  string  `protobuf:"bytes,1,opt,name=material,proto3" json:"material,omitempty"`
	Thickness float64 `protobuf:"fixed64,2,opt,name=thickness,proto3" json:"thickness,omitempty"`
	Alpha     float64 `protobuf:"fixed64,3,opt,name=alpha,proto3" json:"alpha,omitempty"`
	Temp      float64 `protobuf:"fixed64,4,opt,name=temp,proto3" json:"temp,omitempty"`
}

func (x *WasherResult) Reset() {
	*x = WasherResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WasherResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasherResult) ProtoMessage() {}

func (x *WasherResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasherResult.ProtoReflect.Descriptor instead.
func (*WasherResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{11}
}

func (x *WasherResult) GetMaterial() string {
	if x != nil {
		return x.Material
	}
	return ""
}

func (x *WasherResult) GetThickness() float64 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

func (x *WasherResult) GetAlpha() float64 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *WasherResult) GetTemp() float64 {
	if x != nil {
		return x.Temp
	}
	return 0
}

type Calculated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Basis    *Calculated_Basis    `protobuf:"bytes,1,opt,name=basis,proto3" json:"basis,omitempty"`
	Strength *Calculated_Strength `protobuf:"bytes,2,opt,name=strength,proto3" json:"strength,omitempty"`
}

func (x *Calculated) Reset() {
	*x = Calculated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Calculated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Calculated) ProtoMessage() {}

func (x *Calculated) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Calculated.ProtoReflect.Descriptor instead.
func (*Calculated) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{12}
}

func (x *Calculated) GetBasis() *Calculated_Basis {
	if x != nil {
		return x.Basis
	}
	return nil
}

func (x *Calculated) GetStrength() *Calculated_Strength {
	if x != nil {
		return x.Strength
	}
	return nil
}

// Усилия, необходимые для смятия прокладки и обеспечения герметичности фланцевого соединения
type CalcDeformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Эффективная ширина прокладки
	B0 float64 `protobuf:"fixed64,1,opt,name=b0,proto3" json:"b0,omitempty"`
	// Расчетный диаметр прокладки
	Dcp float64 `protobuf:"fixed64,2,opt,name=Dcp,json=dcp,proto3" json:"Dcp,omitempty"`
	// Усилие необходимое для смятия прокладки при затяжке
	Po float64 `protobuf:"fixed64,3,opt,name=Po,json=po,proto3" json:"Po,omitempty"`
	// Усилие на прокладке в рабочих условиях необходимое для обеспечения герметичности фланцевого соединения
	Rp float64 `protobuf:"fixed64,4,opt,name=Rp,json=rp,proto3" json:"Rp,omitempty"`
}

func (x *CalcDeformation) Reset() {
	*x = CalcDeformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcDeformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcDeformation) ProtoMessage() {}

func (x *CalcDeformation) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcDeformation.ProtoReflect.Descriptor instead.
func (*CalcDeformation) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{13}
}

func (x *CalcDeformation) GetB0() float64 {
	if x != nil {
		return x.B0
	}
	return 0
}

func (x *CalcDeformation) GetDcp() float64 {
	if x != nil {
		return x.Dcp
	}
	return 0
}

func (x *CalcDeformation) GetPo() float64 {
	if x != nil {
		return x.Po
	}
	return 0
}

func (x *CalcDeformation) GetRp() float64 {
	if x != nil {
		return x.Rp
	}
	return 0
}

// Усилия в болтах (шпильках) фланцевого соединения при затяжке и в рабочих условиях
type CalcForcesInBolts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Суммарная площадь сечения болтов/шпилек
	A float64 `protobuf:"fixed64,1,opt,name=A,json=a,proto3" json:"A,omitempty"`
	// Равнодействующая нагрузка от давления
	Qd float64 `protobuf:"fixed64,2,opt,name=Qd,json=qd,proto3" json:"Qd,omitempty"`
	// Приведенная нагрузка, вызванная воздействием внешней силы и изгибающего момента
	Qfm float64 `protobuf:"fixed64,3,opt,name=Qfm,json=qfm,proto3" json:"Qfm,omitempty"`
	// Нагрузка вызванная стесненностью температурных деформаций
	Qt float64 `protobuf:"fixed64,4,opt,name=Qt,json=qt,proto3" json:"Qt,omitempty"`
	// Расчетная нагрузка на болты/шпильки фланцевых соединений
	Pb float64 `protobuf:"fixed64,5,opt,name=Pb,json=pb,proto3" json:"Pb,omitempty"`
	// Коэффициент жесткости фланцевого соединения нагруженного внутренним давлением или внешней осевой силой
	Alpha float64 `protobuf:"fixed64,6,opt,name=alpha,proto3" json:"alpha,omitempty"`
	// Коэффициент жесткости фланцевого соединения нагруженного внешним изгибающим моментом
	AlphaM float64 `protobuf:"fixed64,7,opt,name=alphaM,proto3" json:"alphaM,omitempty"`
	// Расчетная нагрузка на болты/шпильки при затяжке необходимая для обеспечения в рабочих условиях давления
	Pb1 float64 `protobuf:"fixed64,8,opt,name=Pb1,json=pb1,proto3" json:"Pb1,omitempty"`
	// Минимальное начальное натяжение болтов (шпилек)
	MinB float64 `protobuf:"fixed64,9,opt,name=minB,proto3" json:"minB,omitempty"`
	// Расчетная нагрузка на болты/шпильки при затяжке необходимая для обеспечения обжатия прокладки
	Pb2 float64 `protobuf:"fixed64,10,opt,name=Pb2,json=pb2,proto3" json:"Pb2,omitempty"`
	// Расчетная нагрузка на болты/шпильки фланцевых соединений в рабочих условиях
	Pbr float64 `protobuf:"fixed64,11,opt,name=Pbr,json=pbr,proto3" json:"Pbr,omitempty"`
}

func (x *CalcForcesInBolts) Reset() {
	*x = CalcForcesInBolts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcForcesInBolts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcForcesInBolts) ProtoMessage() {}

func (x *CalcForcesInBolts) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcForcesInBolts.ProtoReflect.Descriptor instead.
func (*CalcForcesInBolts) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{14}
}

func (x *CalcForcesInBolts) GetA() float64 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *CalcForcesInBolts) GetQd() float64 {
	if x != nil {
		return x.Qd
	}
	return 0
}

func (x *CalcForcesInBolts) GetQfm() float64 {
	if x != nil {
		return x.Qfm
	}
	return 0
}

func (x *CalcForcesInBolts) GetQt() float64 {
	if x != nil {
		return x.Qt
	}
	return 0
}

func (x *CalcForcesInBolts) GetPb() float64 {
	if x != nil {
		return x.Pb
	}
	return 0
}

func (x *CalcForcesInBolts) GetAlpha() float64 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *CalcForcesInBolts) GetAlphaM() float64 {
	if x != nil {
		return x.AlphaM
	}
	return 0
}

func (x *CalcForcesInBolts) GetPb1() float64 {
	if x != nil {
		return x.Pb1
	}
	return 0
}

func (x *CalcForcesInBolts) GetMinB() float64 {
	if x != nil {
		return x.MinB
	}
	return 0
}

func (x *CalcForcesInBolts) GetPb2() float64 {
	if x != nil {
		return x.Pb2
	}
	return 0
}

func (x *CalcForcesInBolts) GetPbr() float64 {
	if x != nil {
		return x.Pbr
	}
	return 0
}

// Проверка прочности болтов (шпилек) и прокладки
type CalcBoltStrength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Расчетное напряжение в болтах/шпильках - при затяжке
	SigmaB1 float64 `protobuf:"fixed64,1,opt,name=sigmaB1,proto3" json:"sigmaB1,omitempty"`
	// Расчетное напряжение в болтах/шпильках - в рабочих условиях
	SigmaB2 float64 `protobuf:"fixed64,2,opt,name=sigmaB2,proto3" json:"sigmaB2,omitempty"`
	// Допускаемое напряжение для болтов шпилек - при затяжке
	DSigmaM float64 `protobuf:"fixed64,3,opt,name=dSigmaM,proto3" json:"dSigmaM,omitempty"`
	// Допускаемое напряжение для болтов шпилек в рабочих условиях и при расчете на условия испытания
	DSigmaR float64 `protobuf:"fixed64,4,opt,name=dSigmaR,proto3" json:"dSigmaR,omitempty"`
	// Условие прочности прокладки (проверяется для мягких прокладок)
	Q float64 `protobuf:"fixed64,5,opt,name=q,proto3" json:"q,omitempty"`
	// Условия прочности болтов шпилек - при затяжке
	VSigmaB1 bool `protobuf:"varint,6,opt,name=vSigmaB1,proto3" json:"vSigmaB1,omitempty"`
	// Условия прочности болтов шпилек - в рабочих условиях
	VSigmaB2 bool `protobuf:"varint,7,opt,name=vSigmaB2,proto3" json:"vSigmaB2,omitempty"`
}

func (x *CalcBoltStrength) Reset() {
	*x = CalcBoltStrength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcBoltStrength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcBoltStrength) ProtoMessage() {}

func (x *CalcBoltStrength) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcBoltStrength.ProtoReflect.Descriptor instead.
func (*CalcBoltStrength) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{15}
}

func (x *CalcBoltStrength) GetSigmaB1() float64 {
	if x != nil {
		return x.SigmaB1
	}
	return 0
}

func (x *CalcBoltStrength) GetSigmaB2() float64 {
	if x != nil {
		return x.SigmaB2
	}
	return 0
}

func (x *CalcBoltStrength) GetDSigmaM() float64 {
	if x != nil {
		return x.DSigmaM
	}
	return 0
}

func (x *CalcBoltStrength) GetDSigmaR() float64 {
	if x != nil {
		return x.DSigmaR
	}
	return 0
}

func (x *CalcBoltStrength) GetQ() float64 {
	if x != nil {
		return x.Q
	}
	return 0
}

func (x *CalcBoltStrength) GetVSigmaB1() bool {
	if x != nil {
		return x.VSigmaB1
	}
	return false
}

func (x *CalcBoltStrength) GetVSigmaB2() bool {
	if x != nil {
		return x.VSigmaB2
	}
	return false
}

// Расчет момента затяжки
type CalcMoment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Крутящий момент при затяжке болтов/шпилек
	Mkp float64 `protobuf:"fixed64,1,opt,name=Mkp,json=mkp,proto3" json:"Mkp,omitempty"`
	// Крутящий момент при затяжке болтов/шпилек со смазкой
	Mkp1 float64 `protobuf:"fixed64,2,opt,name=Mkp1,json=mkp1,proto3" json:"Mkp1,omitempty"`
	// Момент затяжки при применении уплотнения на старых (изношенных) фланцах, имеющих перекосы
	Mrek float64 `protobuf:"fixed64,3,opt,name=Mrek,json=mrek,proto3" json:"Mrek,omitempty"`
	// Напряжение на прокладке
	Qrek float64 `protobuf:"fixed64,4,opt,name=Qrek,json=qrek,proto3" json:"Qrek,omitempty"`
	// Максимальный крутящий момент при затяжке болтов/шпилек
	Mmax float64 `protobuf:"fixed64,5,opt,name=Mmax,json=mmax,proto3" json:"Mmax,omitempty"`
	// Максимальное напряжение на прокладке
	Qmax float64 `protobuf:"fixed64,6,opt,name=Qmax,json=qmax,proto3" json:"Qmax,omitempty"`
}

func (x *CalcMoment) Reset() {
	*x = CalcMoment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcMoment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcMoment) ProtoMessage() {}

func (x *CalcMoment) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcMoment.ProtoReflect.Descriptor instead.
func (*CalcMoment) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{16}
}

func (x *CalcMoment) GetMkp() float64 {
	if x != nil {
		return x.Mkp
	}
	return 0
}

func (x *CalcMoment) GetMkp1() float64 {
	if x != nil {
		return x.Mkp1
	}
	return 0
}

func (x *CalcMoment) GetMrek() float64 {
	if x != nil {
		return x.Mrek
	}
	return 0
}

func (x *CalcMoment) GetQrek() float64 {
	if x != nil {
		return x.Qrek
	}
	return 0
}

func (x *CalcMoment) GetMmax() float64 {
	if x != nil {
		return x.Mmax
	}
	return 0
}

func (x *CalcMoment) GetQmax() float64 {
	if x != nil {
		return x.Qmax
	}
	return 0
}

// Расчет вспомогательных величин
type CalcAuxiliary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Эффективная ширина прокладки
	B0 float64 `protobuf:"fixed64,1,opt,name=b0,proto3" json:"b0,omitempty"`
	// Расчетный диаметр прокладки
	Dcp float64 `protobuf:"fixed64,2,opt,name=Dcp,json=dcp,proto3" json:"Dcp,omitempty"`
	// Податливость прокладки
	Yp float64 `protobuf:"fixed64,3,opt,name=yp,proto3" json:"yp,omitempty"`
	// Податливость болтов/шпилек
	Yb float64 `protobuf:"fixed64,4,opt,name=yb,proto3" json:"yb,omitempty"`
	Lb float64 `protobuf:"fixed64,5,opt,name=Lb,json=lb,proto3" json:"Lb,omitempty"`
	// Суммарная площадь сечения болтов/шпилек
	A float64 `protobuf:"fixed64,6,opt,name=A,json=a,proto3" json:"A,omitempty"`
	// для первого фланца
	Flange1 *CalcAuxiliary_Flange `protobuf:"bytes,7,opt,name=flange1,proto3" json:"flange1,omitempty"`
	// для второго фланца
	Flange2 *CalcAuxiliary_Flange `protobuf:"bytes,8,opt,name=flange2,proto3" json:"flange2,omitempty"`
	// Жесткость фланцевого соединения
	Gamma float64 `protobuf:"fixed64,9,opt,name=gamma,proto3" json:"gamma,omitempty"`
	// Коэффициент жесткости фланцевого соединения нагруженного внутренним давлением или внешней осевой силой
	Alpha float64 `protobuf:"fixed64,10,opt,name=alpha,proto3" json:"alpha,omitempty"`
	// Коэффициент жесткости фланцевого соединения нагруженного внешним изгибающим моментом
	AlphaM float64 `protobuf:"fixed64,11,opt,name=alphaM,proto3" json:"alphaM,omitempty"`
}

func (x *CalcAuxiliary) Reset() {
	*x = CalcAuxiliary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcAuxiliary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcAuxiliary) ProtoMessage() {}

func (x *CalcAuxiliary) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcAuxiliary.ProtoReflect.Descriptor instead.
func (*CalcAuxiliary) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{17}
}

func (x *CalcAuxiliary) GetB0() float64 {
	if x != nil {
		return x.B0
	}
	return 0
}

func (x *CalcAuxiliary) GetDcp() float64 {
	if x != nil {
		return x.Dcp
	}
	return 0
}

func (x *CalcAuxiliary) GetYp() float64 {
	if x != nil {
		return x.Yp
	}
	return 0
}

func (x *CalcAuxiliary) GetYb() float64 {
	if x != nil {
		return x.Yb
	}
	return 0
}

func (x *CalcAuxiliary) GetLb() float64 {
	if x != nil {
		return x.Lb
	}
	return 0
}

func (x *CalcAuxiliary) GetA() float64 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *CalcAuxiliary) GetFlange1() *CalcAuxiliary_Flange {
	if x != nil {
		return x.Flange1
	}
	return nil
}

func (x *CalcAuxiliary) GetFlange2() *CalcAuxiliary_Flange {
	if x != nil {
		return x.Flange2
	}
	return nil
}

func (x *CalcAuxiliary) GetGamma() float64 {
	if x != nil {
		return x.Gamma
	}
	return 0
}

func (x *CalcAuxiliary) GetAlpha() float64 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *CalcAuxiliary) GetAlphaM() float64 {
	if x != nil {
		return x.AlphaM
	}
	return 0
}

// Расчет фланцевого соединения на прочность и герметичность без учета нагрузки вызванной стесненностью температурных деформаций
type CalcTightness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Усилие необходимое для смятия прокладки при затяжке
	Po float64 `protobuf:"fixed64,1,opt,name=Po,json=po,proto3" json:"Po,omitempty"`
	// Усилие на прокладке в рабочих условиях необходимое для обеспечения герметичности фланцевого соединения
	Rp float64 `protobuf:"fixed64,2,opt,name=Rp,json=rp,proto3" json:"Rp,omitempty"`
	// Равнодействующая нагрузка от давления
	Qd float64 `protobuf:"fixed64,3,opt,name=Qd,json=qd,proto3" json:"Qd,omitempty"`
	// Приведенная нагрузка, вызванная воздействием внешней силы и изгибающего момента
	Qfm float64 `protobuf:"fixed64,4,opt,name=Qfm,json=qfm,proto3" json:"Qfm,omitempty"`
	// Расчетная нагрузка на болты/шпильки фланцевых соединений
	Pb float64 `protobuf:"fixed64,5,opt,name=Pb,json=pb,proto3" json:"Pb,omitempty"`
	// Расчетная нагрузка на болты/шпильки при затяжке необходимая для обеспечения в рабочих условиях давления
	Pb1 float64 `protobuf:"fixed64,6,opt,name=Pb1,json=pb1,proto3" json:"Pb1,omitempty"`
	// Расчетная нагрузка на болты/шпильки при затяжке необходимая для обеспечения обжатия прокладки
	Pb2 float64 `protobuf:"fixed64,7,opt,name=Pb2,json=pb2,proto3" json:"Pb2,omitempty"`
	// Расчетная нагрузка на болты/шпильки фланцевых соединений в рабочих условиях
	Pbr float64 `protobuf:"fixed64,8,opt,name=Pbr,json=pbr,proto3" json:"Pbr,omitempty"`
}

func (x *CalcTightness) Reset() {
	*x = CalcTightness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcTightness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcTightness) ProtoMessage() {}

func (x *CalcTightness) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcTightness.ProtoReflect.Descriptor instead.
func (*CalcTightness) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{18}
}

func (x *CalcTightness) GetPo() float64 {
	if x != nil {
		return x.Po
	}
	return 0
}

func (x *CalcTightness) GetRp() float64 {
	if x != nil {
		return x.Rp
	}
	return 0
}

func (x *CalcTightness) GetQd() float64 {
	if x != nil {
		return x.Qd
	}
	return 0
}

func (x *CalcTightness) GetQfm() float64 {
	if x != nil {
		return x.Qfm
	}
	return 0
}

func (x *CalcTightness) GetPb() float64 {
	if x != nil {
		return x.Pb
	}
	return 0
}

func (x *CalcTightness) GetPb1() float64 {
	if x != nil {
		return x.Pb1
	}
	return 0
}

func (x *CalcTightness) GetPb2() float64 {
	if x != nil {
		return x.Pb2
	}
	return 0
}

func (x *CalcTightness) GetPbr() float64 {
	if x != nil {
		return x.Pbr
	}
	return 0
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{19}
}

func (x *Condition) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Condition) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

// Расчет фланца на статическую прочность
type CalcStaticResistance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Коэффициент учитывающий изгиб тарелки фланца между болтами шпильками
	Cf float64 `protobuf:"fixed64,1,opt,name=Cf,json=cf,proto3" json:"Cf,omitempty"`
	// Приведенный диаметр
	Dzv float64 `protobuf:"fixed64,2,opt,name=Dzv,json=dzv,proto3" json:"Dzv,omitempty"`
	// Расчетный изгибающий момент действующий на фланец при затяжке - для приварного встык фланца плоского и бурта свободного фланца
	MM float64 `protobuf:"fixed64,3,opt,name=MM,json=mM,proto3" json:"MM,omitempty"`
	// Расчетный изгибающий момент действующий на фланец при затяжке - для кольца свободного фланца
	MMk float64 `protobuf:"fixed64,4,opt,name=MMk,json=mMk,proto3" json:"MMk,omitempty"`
	// Расчетный изгибающий момент действующий на фланец в рабочих условиях - для кольца свободного фланца
	Mpk float64 `protobuf:"fixed64,5,opt,name=Mpk,json=mpk,proto3" json:"Mpk,omitempty"`
	// Расчетный изгибающий момент действующий на фланец в рабочих условиях - для приварного встык фланца плоского и бурта свободного фланца
	Mp float64 `protobuf:"fixed64,6,opt,name=Mp,json=mp,proto3" json:"Mp,omitempty"`
	// Меридиональное изгибное напряжение - для приварных встык фланцев с конической втулкой в сечении S1
	SigmaM1 float64 `protobuf:"fixed64,7,opt,name=sigmaM1,proto3" json:"sigmaM1,omitempty"`
	// Меридиональное изгибное напряжение - для приварных встык фланцев с конической втулкой в сечении S0
	SigmaM0 float64 `protobuf:"fixed64,8,opt,name=sigmaM0,proto3" json:"sigmaM0,omitempty"`
	// Окружное напряжение в тарелке
	SigmaT float64 `protobuf:"fixed64,9,opt,name=sigmaT,proto3" json:"sigmaT,omitempty"`
	// Радиальное напряжение в тарелке
	SigmaR float64 `protobuf:"fixed64,10,opt,name=sigmaR,proto3" json:"sigmaR,omitempty"`
	// Напряжения в тарелке - окружное напряжения
	SigmaTp float64 `protobuf:"fixed64,11,opt,name=sigmaTp,proto3" json:"sigmaTp,omitempty"`
	// Напряжения в тарелке - радиальные напряжения
	SigmaRp float64 `protobuf:"fixed64,12,opt,name=sigmaRp,proto3" json:"sigmaRp,omitempty"`
	// Окружное напряжение в кольце свободного фланца в условиях затяжки
	SigmaK float64 `protobuf:"fixed64,13,opt,name=sigmaK,proto3" json:"sigmaK,omitempty"`
	// Меридиональные изгибные напряжения во втулке - для приварных встык фланцев с конической втулкой в сечении S1
	SigmaP1 float64 `protobuf:"fixed64,14,opt,name=sigmaP1,proto3" json:"sigmaP1,omitempty"`
	// Меридиональные изгибные напряжения во втулке - для приварных встык фланцев с конической втулкой в сечении S0
	SigmaP0 float64 `protobuf:"fixed64,15,opt,name=sigmaP0,proto3" json:"sigmaP0,omitempty"`
	// Меридиональные мембранные напряжения во втулке - для приварных встык фланцев с конической втулкой в сечении S1
	SigmaMp float64 `protobuf:"fixed64,16,opt,name=sigmaMp,proto3" json:"sigmaMp,omitempty"`
	// Меридиональные мембранные напряжения во втулке - для приварных встык фланцев с конической втулкой в сечении S0
	SigmaMp0 float64 `protobuf:"fixed64,17,opt,name=sigmaMp0,proto3" json:"sigmaMp0,omitempty"`
	// Окружные мембранные напряжения от действия давления во втулке
	SigmaMop float64 `protobuf:"fixed64,18,opt,name=sigmaMop,proto3" json:"sigmaMop,omitempty"`
	// Окружное напряжение в кольце свободного фланца в рабочих условиях
	SigmaKp float64 `protobuf:"fixed64,19,opt,name=sigmaKp,proto3" json:"sigmaKp,omitempty"`
	// одинаковые сигмы
	IsEqualSigma bool    `protobuf:"varint,20,opt,name=isEqualSigma,proto3" json:"isEqualSigma,omitempty"`
	SigmaMpm     float64 `protobuf:"fixed64,21,opt,name=sigmaMpm,proto3" json:"sigmaMpm,omitempty"`
	SigmaMpm0    float64 `protobuf:"fixed64,22,opt,name=sigmaMpm0,proto3" json:"sigmaMpm0,omitempty"`
}

func (x *CalcStaticResistance) Reset() {
	*x = CalcStaticResistance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcStaticResistance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcStaticResistance) ProtoMessage() {}

func (x *CalcStaticResistance) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcStaticResistance.ProtoReflect.Descriptor instead.
func (*CalcStaticResistance) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{20}
}

func (x *CalcStaticResistance) GetCf() float64 {
	if x != nil {
		return x.Cf
	}
	return 0
}

func (x *CalcStaticResistance) GetDzv() float64 {
	if x != nil {
		return x.Dzv
	}
	return 0
}

func (x *CalcStaticResistance) GetMM() float64 {
	if x != nil {
		return x.MM
	}
	return 0
}

func (x *CalcStaticResistance) GetMMk() float64 {
	if x != nil {
		return x.MMk
	}
	return 0
}

func (x *CalcStaticResistance) GetMpk() float64 {
	if x != nil {
		return x.Mpk
	}
	return 0
}

func (x *CalcStaticResistance) GetMp() float64 {
	if x != nil {
		return x.Mp
	}
	return 0
}

func (x *CalcStaticResistance) GetSigmaM1() float64 {
	if x != nil {
		return x.SigmaM1
	}
	return 0
}

func (x *CalcStaticResistance) GetSigmaM0() float64 {
	if x != nil {
		return x.SigmaM0
	}
	return 0
}

func (x *CalcStaticResistance) GetSigmaT() float64 {
	if x != nil {
		return x.SigmaT
	}
	return 0
}

func (x *CalcStaticResistance) GetSigmaR() float64 {
	if x != nil {
		return x.SigmaR
	}
	return 0
}

func (x *CalcStaticResistance) GetSigmaTp() float64 {
	if x != nil {
		return x.SigmaTp
	}
	return 0
}

func (x *CalcStaticResistance) GetSigmaRp() float64 {
	if x != nil {
		return x.SigmaRp
	}
	return 0
}

func (x *CalcStaticResistance) GetSigmaK() float64 {
	if x != nil {
		return x.SigmaK
	}
	return 0
}

func (x *CalcStaticResistance) GetSigmaP1() float64 {
	if x != nil {
		return x.SigmaP1
	}
	return 0
}

func (x *CalcStaticResistance) GetSigmaP0() float64 {
	if x != nil {
		return x.SigmaP0
	}
	return 0
}

func (x *CalcStaticResistance) GetSigmaMp() float64 {
	if x != nil {
		return x.SigmaMp
	}
	return 0
}

func (x *CalcStaticResistance) GetSigmaMp0() float64 {
	if x != nil {
		return x.SigmaMp0
	}
	return 0
}

func (x *CalcStaticResistance) GetSigmaMop() float64 {
	if x != nil {
		return x.SigmaMop
	}
	return 0
}

func (x *CalcStaticResistance) GetSigmaKp() float64 {
	if x != nil {
		return x.SigmaKp
	}
	return 0
}

func (x *CalcStaticResistance) GetIsEqualSigma() bool {
	if x != nil {
		return x.IsEqualSigma
	}
	return false
}

func (x *CalcStaticResistance) GetSigmaMpm() float64 {
	if x != nil {
		return x.SigmaMpm
	}
	return 0
}

func (x *CalcStaticResistance) GetSigmaMpm0() float64 {
	if x != nil {
		return x.SigmaMpm0
	}
	return 0
}

// Условия статической прочности фланцев
type CalcConditionsForStrength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Для приварных встык фланцев с конической втулкой в сечении S1 - при затяжке
	Max1 *Condition `protobuf:"bytes,1,opt,name=Max1,json=max1,proto3" json:"Max1,omitempty"`
	// Для приварных встык фланцев с конической втулкой в сечении S1 - в рабочих условиях
	Max2 *Condition `protobuf:"bytes,2,opt,name=Max2,json=max2,proto3" json:"Max2,omitempty"`
	// Для приварных встык фланцев с конической втулкой в сечении S0 - при затяжке
	Max3 *Condition `protobuf:"bytes,3,opt,name=Max3,json=max3,proto3" json:"Max3,omitempty"`
	// Для приварных встык фланцев с конической втулкой в сечении S0 - в рабочих условиях
	Max4 *Condition `protobuf:"bytes,4,opt,name=Max4,json=max4,proto3" json:"Max4,omitempty"`
	// Для приварных встык фланцев с прямой втулкой - при затяжке
	Max5 *Condition `protobuf:"bytes,5,opt,name=Max5,json=max5,proto3" json:"Max5,omitempty"`
	// Для приварных встык фланцев с прямой втулкой - в рабочих условиях
	Max6 *Condition `protobuf:"bytes,6,opt,name=Max6,json=max6,proto3" json:"Max6,omitempty"`
	// Для фланцев всех типов в сечении S0 должно выполняться условие
	Max7 *Condition `protobuf:"bytes,7,opt,name=Max7,json=max7,proto3" json:"Max7,omitempty"`
	// Для тарелок приварных встык фланцев, плоских фланцев - при затяжке
	Max8 *Condition `protobuf:"bytes,8,opt,name=Max8,json=max8,proto3" json:"Max8,omitempty"`
	// Для тарелок приварных встык фланцев, плоских фланцев - в рабочих условиях
	Max9 *Condition `protobuf:"bytes,9,opt,name=Max9,json=max9,proto3" json:"Max9,omitempty"`
	// Для колец свободных фланцев - при затяжке
	Max10 *Condition `protobuf:"bytes,10,opt,name=Max10,json=max10,proto3" json:"Max10,omitempty"`
	// Для колец свободных фланцев - в рабочих условиях
	Max11 *Condition `protobuf:"bytes,11,opt,name=Max11,json=max11,proto3" json:"Max11,omitempty"`
	// Угол поворота приварного встык фланца и бурта свободного фланца в рабочих условия
	Teta float64 `protobuf:"fixed64,12,opt,name=teta,proto3" json:"teta,omitempty"`
	// Условие
	CondTeta *Condition `protobuf:"bytes,13,opt,name=condTeta,proto3" json:"condTeta,omitempty"`
	// Условие
	CondTetaK *Condition `protobuf:"bytes,14,opt,name=condTetaK,proto3" json:"condTetaK,omitempty"`
	// Угол поворота кольца свободного фланца в рабочих условиях
	TetaK float64 `protobuf:"fixed64,15,opt,name=tetaK,proto3" json:"tetaK,omitempty"`
}

func (x *CalcConditionsForStrength) Reset() {
	*x = CalcConditionsForStrength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcConditionsForStrength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcConditionsForStrength) ProtoMessage() {}

func (x *CalcConditionsForStrength) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcConditionsForStrength.ProtoReflect.Descriptor instead.
func (*CalcConditionsForStrength) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{21}
}

func (x *CalcConditionsForStrength) GetMax1() *Condition {
	if x != nil {
		return x.Max1
	}
	return nil
}

func (x *CalcConditionsForStrength) GetMax2() *Condition {
	if x != nil {
		return x.Max2
	}
	return nil
}

func (x *CalcConditionsForStrength) GetMax3() *Condition {
	if x != nil {
		return x.Max3
	}
	return nil
}

func (x *CalcConditionsForStrength) GetMax4() *Condition {
	if x != nil {
		return x.Max4
	}
	return nil
}

func (x *CalcConditionsForStrength) GetMax5() *Condition {
	if x != nil {
		return x.Max5
	}
	return nil
}

func (x *CalcConditionsForStrength) GetMax6() *Condition {
	if x != nil {
		return x.Max6
	}
	return nil
}

func (x *CalcConditionsForStrength) GetMax7() *Condition {
	if x != nil {
		return x.Max7
	}
	return nil
}

func (x *CalcConditionsForStrength) GetMax8() *Condition {
	if x != nil {
		return x.Max8
	}
	return nil
}

func (x *CalcConditionsForStrength) GetMax9() *Condition {
	if x != nil {
		return x.Max9
	}
	return nil
}

func (x *CalcConditionsForStrength) GetMax10() *Condition {
	if x != nil {
		return x.Max10
	}
	return nil
}

func (x *CalcConditionsForStrength) GetMax11() *Condition {
	if x != nil {
		return x.Max11
	}
	return nil
}

func (x *CalcConditionsForStrength) GetTeta() float64 {
	if x != nil {
		return x.Teta
	}
	return 0
}

func (x *CalcConditionsForStrength) GetCondTeta() *Condition {
	if x != nil {
		return x.CondTeta
	}
	return nil
}

func (x *CalcConditionsForStrength) GetCondTetaK() *Condition {
	if x != nil {
		return x.CondTetaK
	}
	return nil
}

func (x *CalcConditionsForStrength) GetTetaK() float64 {
	if x != nil {
		return x.TetaK
	}
	return 0
}

type CalcTightnessLoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Нагрузка вызванная стесненностью температурных деформаций
	Qt float64 `protobuf:"fixed64,1,opt,name=Qt,json=qt,proto3" json:"Qt,omitempty"`
	// Расчетная нагрузка на болты/шпильки фланцевых соединений
	Pb float64 `protobuf:"fixed64,2,opt,name=Pb,json=pb,proto3" json:"Pb,omitempty"`
	// Расчетная нагрузка на болты/шпильки при затяжке необходимая для обеспечения в рабочих условиях давления
	Pb1 float64 `protobuf:"fixed64,3,opt,name=Pb1,json=pb1,proto3" json:"Pb1,omitempty"`
	// Расчетная нагрузка на болты/шпильки фланцевых соединений в рабочих условиях
	Pbr float64 `protobuf:"fixed64,4,opt,name=Pbr,json=pbr,proto3" json:"Pbr,omitempty"`
}

func (x *CalcTightnessLoad) Reset() {
	*x = CalcTightnessLoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcTightnessLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcTightnessLoad) ProtoMessage() {}

func (x *CalcTightnessLoad) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcTightnessLoad.ProtoReflect.Descriptor instead.
func (*CalcTightnessLoad) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{22}
}

func (x *CalcTightnessLoad) GetQt() float64 {
	if x != nil {
		return x.Qt
	}
	return 0
}

func (x *CalcTightnessLoad) GetPb() float64 {
	if x != nil {
		return x.Pb
	}
	return 0
}

func (x *CalcTightnessLoad) GetPb1() float64 {
	if x != nil {
		return x.Pb1
	}
	return 0
}

func (x *CalcTightnessLoad) GetPbr() float64 {
	if x != nil {
		return x.Pbr
	}
	return 0
}

type Formulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Basis    *Formulas_Basis    `protobuf:"bytes,1,opt,name=basis,proto3" json:"basis,omitempty"`
	Strength *Formulas_Strength `protobuf:"bytes,2,opt,name=strength,proto3" json:"strength,omitempty"`
}

func (x *Formulas) Reset() {
	*x = Formulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Formulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Formulas) ProtoMessage() {}

func (x *Formulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Formulas.ProtoReflect.Descriptor instead.
func (*Formulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{23}
}

func (x *Formulas) GetBasis() *Formulas_Basis {
	if x != nil {
		return x.Basis
	}
	return nil
}

func (x *Formulas) GetStrength() *Formulas_Strength {
	if x != nil {
		return x.Strength
	}
	return nil
}

// Усилия, необходимые для смятия прокладки и обеспечения герметичности фланцевого соединения
type DeformationFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Эффективная ширина прокладки
	B0 string `protobuf:"bytes,1,opt,name=b0,proto3" json:"b0,omitempty"`
	// Расчетный диаметр прокладки
	Dcp string `protobuf:"bytes,2,opt,name=Dcp,json=dcp,proto3" json:"Dcp,omitempty"`
	// Усилие необходимое для смятия прокладки при затяжке
	Po string `protobuf:"bytes,3,opt,name=Po,json=po,proto3" json:"Po,omitempty"`
	// Усилие на прокладке в рабочих условиях необходимое для обеспечения герметичности фланцевого соединения
	Rp string `protobuf:"bytes,4,opt,name=Rp,json=rp,proto3" json:"Rp,omitempty"`
}

func (x *DeformationFormulas) Reset() {
	*x = DeformationFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeformationFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeformationFormulas) ProtoMessage() {}

func (x *DeformationFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeformationFormulas.ProtoReflect.Descriptor instead.
func (*DeformationFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{24}
}

func (x *DeformationFormulas) GetB0() string {
	if x != nil {
		return x.B0
	}
	return ""
}

func (x *DeformationFormulas) GetDcp() string {
	if x != nil {
		return x.Dcp
	}
	return ""
}

func (x *DeformationFormulas) GetPo() string {
	if x != nil {
		return x.Po
	}
	return ""
}

func (x *DeformationFormulas) GetRp() string {
	if x != nil {
		return x.Rp
	}
	return ""
}

// Усилия в болтах (шпильках) фланцевого соединения при затяжке и в рабочих условиях
type ForcesInBoltsFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Суммарная площадь сечения болтов/шпилек
	A string `protobuf:"bytes,1,opt,name=A,json=a,proto3" json:"A,omitempty"`
	// Равнодействующая нагрузка от давления
	Qd string `protobuf:"bytes,2,opt,name=Qd,json=qd,proto3" json:"Qd,omitempty"`
	// Приведенная нагрузка, вызванная воздействием внешней силы и изгибающего момента
	Qfm string `protobuf:"bytes,3,opt,name=Qfm,json=qfm,proto3" json:"Qfm,omitempty"`
	// Нагрузка вызванная стесненностью температурных деформаций
	Qt string `protobuf:"bytes,4,opt,name=Qt,json=qt,proto3" json:"Qt,omitempty"`
	// Расчетная нагрузка на болты/шпильки фланцевых соединений
	Pb string `protobuf:"bytes,5,opt,name=Pb,json=pb,proto3" json:"Pb,omitempty"`
	// Коэффициент жесткости фланцевого соединения нагруженного внутренним давлением или внешней осевой силой
	Alpha string `protobuf:"bytes,6,opt,name=alpha,proto3" json:"alpha,omitempty"`
	// Коэффициент жесткости фланцевого соединения нагруженного внешним изгибающим моментом
	AlphaM string `protobuf:"bytes,7,opt,name=alphaM,proto3" json:"alphaM,omitempty"`
	// Расчетная нагрузка на болты/шпильки при затяжке необходимая для обеспечения в рабочих условиях давления
	Pb1 string `protobuf:"bytes,8,opt,name=Pb1,json=pb1,proto3" json:"Pb1,omitempty"`
	// Расчетная нагрузка на болты/шпильки при затяжке необходимая для обеспечения обжатия прокладки
	Pb2 string `protobuf:"bytes,9,opt,name=Pb2,json=pb2,proto3" json:"Pb2,omitempty"`
	// Расчетная нагрузка на болты/шпильки фланцевых соединений в рабочих условиях
	Pbr string `protobuf:"bytes,10,opt,name=Pbr,json=pbr,proto3" json:"Pbr,omitempty"`
}

func (x *ForcesInBoltsFormulas) Reset() {
	*x = ForcesInBoltsFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForcesInBoltsFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForcesInBoltsFormulas) ProtoMessage() {}

func (x *ForcesInBoltsFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForcesInBoltsFormulas.ProtoReflect.Descriptor instead.
func (*ForcesInBoltsFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{25}
}

func (x *ForcesInBoltsFormulas) GetA() string {
	if x != nil {
		return x.A
	}
	return ""
}

func (x *ForcesInBoltsFormulas) GetQd() string {
	if x != nil {
		return x.Qd
	}
	return ""
}

func (x *ForcesInBoltsFormulas) GetQfm() string {
	if x != nil {
		return x.Qfm
	}
	return ""
}

func (x *ForcesInBoltsFormulas) GetQt() string {
	if x != nil {
		return x.Qt
	}
	return ""
}

func (x *ForcesInBoltsFormulas) GetPb() string {
	if x != nil {
		return x.Pb
	}
	return ""
}

func (x *ForcesInBoltsFormulas) GetAlpha() string {
	if x != nil {
		return x.Alpha
	}
	return ""
}

func (x *ForcesInBoltsFormulas) GetAlphaM() string {
	if x != nil {
		return x.AlphaM
	}
	return ""
}

func (x *ForcesInBoltsFormulas) GetPb1() string {
	if x != nil {
		return x.Pb1
	}
	return ""
}

func (x *ForcesInBoltsFormulas) GetPb2() string {
	if x != nil {
		return x.Pb2
	}
	return ""
}

func (x *ForcesInBoltsFormulas) GetPbr() string {
	if x != nil {
		return x.Pbr
	}
	return ""
}

// Проверка прочности болтов (шпилек) и прокладки
type BoltStrengthFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Расчетное напряжение в болтах/шпильках - при затяжке
	SigmaB1 string `protobuf:"bytes,1,opt,name=sigmaB1,proto3" json:"sigmaB1,omitempty"`
	// Расчетное напряжение в болтах/шпильках - в рабочих условиях
	SigmaB2 string `protobuf:"bytes,2,opt,name=sigmaB2,proto3" json:"sigmaB2,omitempty"`
	// Допускаемое напряжение для болтов шпилек - при затяжке
	DSigmaM string `protobuf:"bytes,3,opt,name=dSigmaM,proto3" json:"dSigmaM,omitempty"`
	// Допускаемое напряжение для болтов шпилек в рабочих условиях и при расчете на условия испытания
	DSigmaR string `protobuf:"bytes,4,opt,name=dSigmaR,proto3" json:"dSigmaR,omitempty"`
	// Условие прочности прокладки (проверяется для мягких прокладок)
	Q string `protobuf:"bytes,5,opt,name=q,proto3" json:"q,omitempty"`
}

func (x *BoltStrengthFormulas) Reset() {
	*x = BoltStrengthFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoltStrengthFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoltStrengthFormulas) ProtoMessage() {}

func (x *BoltStrengthFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoltStrengthFormulas.ProtoReflect.Descriptor instead.
func (*BoltStrengthFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{26}
}

func (x *BoltStrengthFormulas) GetSigmaB1() string {
	if x != nil {
		return x.SigmaB1
	}
	return ""
}

func (x *BoltStrengthFormulas) GetSigmaB2() string {
	if x != nil {
		return x.SigmaB2
	}
	return ""
}

func (x *BoltStrengthFormulas) GetDSigmaM() string {
	if x != nil {
		return x.DSigmaM
	}
	return ""
}

func (x *BoltStrengthFormulas) GetDSigmaR() string {
	if x != nil {
		return x.DSigmaR
	}
	return ""
}

func (x *BoltStrengthFormulas) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

// Расчет момента затяжки
type MomentFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Крутящий момент при затяжке болтов/шпилек
	Mkp string `protobuf:"bytes,1,opt,name=Mkp,json=mkp,proto3" json:"Mkp,omitempty"`
	// Крутящий момент при затяжке болтов/шпилек со смазкой
	Mkp1 string `protobuf:"bytes,2,opt,name=Mkp1,json=mkp1,proto3" json:"Mkp1,omitempty"`
	// Момент затяжки при применении уплотнения на старых (изношенных) фланцах, имеющих перекосы
	Mrek string `protobuf:"bytes,3,opt,name=Mrek,json=mrek,proto3" json:"Mrek,omitempty"`
	// Напряжение на прокладке
	Qrek string `protobuf:"bytes,4,opt,name=Qrek,json=qrek,proto3" json:"Qrek,omitempty"`
	// Максимальный крутящий момент при затяжке болтов/шпилек
	Mmax string `protobuf:"bytes,5,opt,name=Mmax,json=mmax,proto3" json:"Mmax,omitempty"`
	// Максимальное напряжение на прокладке
	Qmax string `protobuf:"bytes,6,opt,name=Qmax,json=qmax,proto3" json:"Qmax,omitempty"`
}

func (x *MomentFormulas) Reset() {
	*x = MomentFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MomentFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomentFormulas) ProtoMessage() {}

func (x *MomentFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomentFormulas.ProtoReflect.Descriptor instead.
func (*MomentFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{27}
}

func (x *MomentFormulas) GetMkp() string {
	if x != nil {
		return x.Mkp
	}
	return ""
}

func (x *MomentFormulas) GetMkp1() string {
	if x != nil {
		return x.Mkp1
	}
	return ""
}

func (x *MomentFormulas) GetMrek() string {
	if x != nil {
		return x.Mrek
	}
	return ""
}

func (x *MomentFormulas) GetQrek() string {
	if x != nil {
		return x.Qrek
	}
	return ""
}

func (x *MomentFormulas) GetMmax() string {
	if x != nil {
		return x.Mmax
	}
	return ""
}

func (x *MomentFormulas) GetQmax() string {
	if x != nil {
		return x.Qmax
	}
	return ""
}

// Расчет вспомогательных величин
type AuxiliaryFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Эффективная ширина прокладки
	B0 string `protobuf:"bytes,1,opt,name=b0,proto3" json:"b0,omitempty"`
	// Расчетный диаметр прокладки
	Dcp string `protobuf:"bytes,2,opt,name=Dcp,json=dcp,proto3" json:"Dcp,omitempty"`
	// Податливость прокладки
	Yp string `protobuf:"bytes,3,opt,name=yp,proto3" json:"yp,omitempty"`
	// Податливость болтов/шпилек
	Yb string `protobuf:"bytes,4,opt,name=yb,proto3" json:"yb,omitempty"`
	Lb string `protobuf:"bytes,5,opt,name=Lb,json=lb,proto3" json:"Lb,omitempty"`
	// Суммарная площадь сечения болтов/шпилек
	A string `protobuf:"bytes,6,opt,name=A,json=a,proto3" json:"A,omitempty"`
	// для первого фланца
	Flange1 *AuxiliaryFormulas_Flange `protobuf:"bytes,7,opt,name=flange1,proto3" json:"flange1,omitempty"`
	// для второго фланца
	Flange2 *AuxiliaryFormulas_Flange `protobuf:"bytes,8,opt,name=flange2,proto3" json:"flange2,omitempty"`
	// Жесткость фланцевого соединения
	Gamma string `protobuf:"bytes,9,opt,name=gamma,proto3" json:"gamma,omitempty"`
	// Коэффициент жесткости фланцевого соединения нагруженного внутренним давлением или внешней осевой силой
	Alpha string `protobuf:"bytes,10,opt,name=alpha,proto3" json:"alpha,omitempty"`
	// Коэффициент жесткости фланцевого соединения нагруженного внешним изгибающим моментом
	AlphaM string `protobuf:"bytes,11,opt,name=alphaM,proto3" json:"alphaM,omitempty"`
}

func (x *AuxiliaryFormulas) Reset() {
	*x = AuxiliaryFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuxiliaryFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuxiliaryFormulas) ProtoMessage() {}

func (x *AuxiliaryFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuxiliaryFormulas.ProtoReflect.Descriptor instead.
func (*AuxiliaryFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{28}
}

func (x *AuxiliaryFormulas) GetB0() string {
	if x != nil {
		return x.B0
	}
	return ""
}

func (x *AuxiliaryFormulas) GetDcp() string {
	if x != nil {
		return x.Dcp
	}
	return ""
}

func (x *AuxiliaryFormulas) GetYp() string {
	if x != nil {
		return x.Yp
	}
	return ""
}

func (x *AuxiliaryFormulas) GetYb() string {
	if x != nil {
		return x.Yb
	}
	return ""
}

func (x *AuxiliaryFormulas) GetLb() string {
	if x != nil {
		return x.Lb
	}
	return ""
}

func (x *AuxiliaryFormulas) GetA() string {
	if x != nil {
		return x.A
	}
	return ""
}

func (x *AuxiliaryFormulas) GetFlange1() *AuxiliaryFormulas_Flange {
	if x != nil {
		return x.Flange1
	}
	return nil
}

func (x *AuxiliaryFormulas) GetFlange2() *AuxiliaryFormulas_Flange {
	if x != nil {
		return x.Flange2
	}
	return nil
}

func (x *AuxiliaryFormulas) GetGamma() string {
	if x != nil {
		return x.Gamma
	}
	return ""
}

func (x *AuxiliaryFormulas) GetAlpha() string {
	if x != nil {
		return x.Alpha
	}
	return ""
}

func (x *AuxiliaryFormulas) GetAlphaM() string {
	if x != nil {
		return x.AlphaM
	}
	return ""
}

// Расчет фланцевого соединения на прочность и герметичность без учета нагрузки вызванной стесненностью температурных деформаций
type TightnessFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Усилие необходимое для смятия прокладки при затяжке
	Po string `protobuf:"bytes,1,opt,name=Po,json=po,proto3" json:"Po,omitempty"`
	// Усилие на прокладке в рабочих условиях необходимое для обеспечения герметичности фланцевого соединения
	Rp string `protobuf:"bytes,2,opt,name=Rp,json=rp,proto3" json:"Rp,omitempty"`
	// Равнодействующая нагрузка от давления
	Qd string `protobuf:"bytes,3,opt,name=Qd,json=qd,proto3" json:"Qd,omitempty"`
	// Приведенная нагрузка, вызванная воздействием внешней силы и изгибающего момента
	Qfm string `protobuf:"bytes,4,opt,name=Qfm,json=qfm,proto3" json:"Qfm,omitempty"`
	// Расчетная нагрузка на болты/шпильки фланцевых соединений
	Pb string `protobuf:"bytes,5,opt,name=Pb,json=pb,proto3" json:"Pb,omitempty"`
	// Расчетная нагрузка на болты/шпильки при затяжке необходимая для обеспечения в рабочих условиях давления
	Pb1 string `protobuf:"bytes,6,opt,name=Pb1,json=pb1,proto3" json:"Pb1,omitempty"`
	// Расчетная нагрузка на болты/шпильки при затяжке необходимая для обеспечения обжатия прокладки
	Pb2 string `protobuf:"bytes,7,opt,name=Pb2,json=pb2,proto3" json:"Pb2,omitempty"`
	// Расчетная нагрузка на болты/шпильки фланцевых соединений в рабочих условиях
	Pbr string `protobuf:"bytes,8,opt,name=Pbr,json=pbr,proto3" json:"Pbr,omitempty"`
}

func (x *TightnessFormulas) Reset() {
	*x = TightnessFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TightnessFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TightnessFormulas) ProtoMessage() {}

func (x *TightnessFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TightnessFormulas.ProtoReflect.Descriptor instead.
func (*TightnessFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{29}
}

func (x *TightnessFormulas) GetPo() string {
	if x != nil {
		return x.Po
	}
	return ""
}

func (x *TightnessFormulas) GetRp() string {
	if x != nil {
		return x.Rp
	}
	return ""
}

func (x *TightnessFormulas) GetQd() string {
	if x != nil {
		return x.Qd
	}
	return ""
}

func (x *TightnessFormulas) GetQfm() string {
	if x != nil {
		return x.Qfm
	}
	return ""
}

func (x *TightnessFormulas) GetPb() string {
	if x != nil {
		return x.Pb
	}
	return ""
}

func (x *TightnessFormulas) GetPb1() string {
	if x != nil {
		return x.Pb1
	}
	return ""
}

func (x *TightnessFormulas) GetPb2() string {
	if x != nil {
		return x.Pb2
	}
	return ""
}

func (x *TightnessFormulas) GetPbr() string {
	if x != nil {
		return x.Pbr
	}
	return ""
}

// Расчет фланца на статическую прочность
type StaticResistanceFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Коэффициент учитывающий изгиб тарелки фланца между болтами шпильками
	Cf string `protobuf:"bytes,1,opt,name=Cf,json=cf,proto3" json:"Cf,omitempty"`
	// Приведенный диаметр
	Dzv string `protobuf:"bytes,2,opt,name=Dzv,json=dzv,proto3" json:"Dzv,omitempty"`
	// Расчетный изгибающий момент действующий на фланец при затяжке - для приварного встык фланца плоского и бурта свободного фланца
	MM string `protobuf:"bytes,3,opt,name=MM,json=mM,proto3" json:"MM,omitempty"`
	// Расчетный изгибающий момент действующий на фланец при затяжке - для кольца свободного фланца
	MMk string `protobuf:"bytes,4,opt,name=MMk,json=mMk,proto3" json:"MMk,omitempty"`
	// Расчетный изгибающий момент действующий на фланец в рабочих условиях - для кольца свободного фланца
	Mpk string `protobuf:"bytes,5,opt,name=Mpk,json=mpk,proto3" json:"Mpk,omitempty"`
	// Расчетный изгибающий момент действующий на фланец в рабочих условиях - для приварного встык фланца плоского и бурта свободного фланца
	Mp string `protobuf:"bytes,6,opt,name=Mp,json=mp,proto3" json:"Mp,omitempty"`
	// Меридиональное изгибное напряжение - для приварных встык фланцев с конической втулкой в сечении S1
	SigmaM1 string `protobuf:"bytes,7,opt,name=sigmaM1,proto3" json:"sigmaM1,omitempty"`
	// Меридиональное изгибное напряжение - для приварных встык фланцев с конической втулкой в сечении S0
	SigmaM0 string `protobuf:"bytes,8,opt,name=sigmaM0,proto3" json:"sigmaM0,omitempty"`
	// Окружное напряжение в тарелке
	SigmaT string `protobuf:"bytes,9,opt,name=sigmaT,proto3" json:"sigmaT,omitempty"`
	// Радиальное напряжение в тарелке
	SigmaR string `protobuf:"bytes,10,opt,name=sigmaR,proto3" json:"sigmaR,omitempty"`
	// Напряжения в тарелке - окружное напряжения
	SigmaTp string `protobuf:"bytes,11,opt,name=sigmaTp,proto3" json:"sigmaTp,omitempty"`
	// Напряжения в тарелке - радиальные напряжения
	SigmaRp string `protobuf:"bytes,12,opt,name=sigmaRp,proto3" json:"sigmaRp,omitempty"`
	// Окружное напряжение в кольце свободного фланца в условиях затяжки
	SigmaK string `protobuf:"bytes,13,opt,name=sigmaK,proto3" json:"sigmaK,omitempty"`
	// Меридиональные изгибные напряжения во втулке - для приварных встык фланцев с конической втулкой в сечении S1
	SigmaP1 string `protobuf:"bytes,14,opt,name=sigmaP1,proto3" json:"sigmaP1,omitempty"`
	// Меридиональные изгибные напряжения во втулке - для приварных встык фланцев с конической втулкой в сечении S0
	SigmaP0 string `protobuf:"bytes,15,opt,name=sigmaP0,proto3" json:"sigmaP0,omitempty"`
	// Меридиональные мембранные напряжения во втулке - для приварных встык фланцев с конической втулкой в сечении S1
	SigmaMp string `protobuf:"bytes,16,opt,name=sigmaMp,proto3" json:"sigmaMp,omitempty"`
	// Меридиональные мембранные напряжения во втулке - для приварных встык фланцев с конической втулкой в сечении S0
	SigmaMp0 string `protobuf:"bytes,17,opt,name=sigmaMp0,proto3" json:"sigmaMp0,omitempty"`
	// Окружные мембранные напряжения от действия давления во втулке
	SigmaMop string `protobuf:"bytes,18,opt,name=sigmaMop,proto3" json:"sigmaMop,omitempty"`
	// Окружное напряжение в кольце свободного фланца в рабочих условиях
	SigmaKp string `protobuf:"bytes,19,opt,name=sigmaKp,proto3" json:"sigmaKp,omitempty"`
}

func (x *StaticResistanceFormulas) Reset() {
	*x = StaticResistanceFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticResistanceFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticResistanceFormulas) ProtoMessage() {}

func (x *StaticResistanceFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticResistanceFormulas.ProtoReflect.Descriptor instead.
func (*StaticResistanceFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{30}
}

func (x *StaticResistanceFormulas) GetCf() string {
	if x != nil {
		return x.Cf
	}
	return ""
}

func (x *StaticResistanceFormulas) GetDzv() string {
	if x != nil {
		return x.Dzv
	}
	return ""
}

func (x *StaticResistanceFormulas) GetMM() string {
	if x != nil {
		return x.MM
	}
	return ""
}

func (x *StaticResistanceFormulas) GetMMk() string {
	if x != nil {
		return x.MMk
	}
	return ""
}

func (x *StaticResistanceFormulas) GetMpk() string {
	if x != nil {
		return x.Mpk
	}
	return ""
}

func (x *StaticResistanceFormulas) GetMp() string {
	if x != nil {
		return x.Mp
	}
	return ""
}

func (x *StaticResistanceFormulas) GetSigmaM1() string {
	if x != nil {
		return x.SigmaM1
	}
	return ""
}

func (x *StaticResistanceFormulas) GetSigmaM0() string {
	if x != nil {
		return x.SigmaM0
	}
	return ""
}

func (x *StaticResistanceFormulas) GetSigmaT() string {
	if x != nil {
		return x.SigmaT
	}
	return ""
}

func (x *StaticResistanceFormulas) GetSigmaR() string {
	if x != nil {
		return x.SigmaR
	}
	return ""
}

func (x *StaticResistanceFormulas) GetSigmaTp() string {
	if x != nil {
		return x.SigmaTp
	}
	return ""
}

func (x *StaticResistanceFormulas) GetSigmaRp() string {
	if x != nil {
		return x.SigmaRp
	}
	return ""
}

func (x *StaticResistanceFormulas) GetSigmaK() string {
	if x != nil {
		return x.SigmaK
	}
	return ""
}

func (x *StaticResistanceFormulas) GetSigmaP1() string {
	if x != nil {
		return x.SigmaP1
	}
	return ""
}

func (x *StaticResistanceFormulas) GetSigmaP0() string {
	if x != nil {
		return x.SigmaP0
	}
	return ""
}

func (x *StaticResistanceFormulas) GetSigmaMp() string {
	if x != nil {
		return x.SigmaMp
	}
	return ""
}

func (x *StaticResistanceFormulas) GetSigmaMp0() string {
	if x != nil {
		return x.SigmaMp0
	}
	return ""
}

func (x *StaticResistanceFormulas) GetSigmaMop() string {
	if x != nil {
		return x.SigmaMop
	}
	return ""
}

func (x *StaticResistanceFormulas) GetSigmaKp() string {
	if x != nil {
		return x.SigmaKp
	}
	return ""
}

type ConditionFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X string `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	Y string `protobuf:"bytes,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *ConditionFormulas) Reset() {
	*x = ConditionFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionFormulas) ProtoMessage() {}

func (x *ConditionFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionFormulas.ProtoReflect.Descriptor instead.
func (*ConditionFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{31}
}

func (x *ConditionFormulas) GetX() string {
	if x != nil {
		return x.X
	}
	return ""
}

func (x *ConditionFormulas) GetY() string {
	if x != nil {
		return x.Y
	}
	return ""
}

// Условия статической прочности фланцев
type ConditionsForStrengthFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Для приварных встык фланцев с конической втулкой в сечении S1 - при затяжке
	Max1 *ConditionFormulas `protobuf:"bytes,1,opt,name=Max1,json=max1,proto3" json:"Max1,omitempty"`
	// Для приварных встык фланцев с конической втулкой в сечении S1 - в рабочих условиях
	Max2 *ConditionFormulas `protobuf:"bytes,2,opt,name=Max2,json=max2,proto3" json:"Max2,omitempty"`
	// Для приварных встык фланцев с конической втулкой в сечении S0 - при затяжке
	Max3 *ConditionFormulas `protobuf:"bytes,3,opt,name=Max3,json=max3,proto3" json:"Max3,omitempty"`
	// Для приварных встык фланцев с конической втулкой в сечении S0 - в рабочих условиях
	Max4 *ConditionFormulas `protobuf:"bytes,4,opt,name=Max4,json=max4,proto3" json:"Max4,omitempty"`
	// Для приварных встык фланцев с прямой втулкой - при затяжке
	Max5 *ConditionFormulas `protobuf:"bytes,5,opt,name=Max5,json=max5,proto3" json:"Max5,omitempty"`
	// Для приварных встык фланцев с прямой втулкой - в рабочих условиях
	Max6 *ConditionFormulas `protobuf:"bytes,6,opt,name=Max6,json=max6,proto3" json:"Max6,omitempty"`
	// Для фланцев всех типов в сечении S0 должно выполняться условие
	Max7 *ConditionFormulas `protobuf:"bytes,7,opt,name=Max7,json=max7,proto3" json:"Max7,omitempty"`
	// Для тарелок приварных встык фланцев, плоских фланцев - при затяжке
	Max8 *ConditionFormulas `protobuf:"bytes,8,opt,name=Max8,json=max8,proto3" json:"Max8,omitempty"`
	// Для тарелок приварных встык фланцев, плоских фланцев - в рабочих условиях
	Max9 *ConditionFormulas `protobuf:"bytes,9,opt,name=Max9,json=max9,proto3" json:"Max9,omitempty"`
	// Для колец свободных фланцев - при затяжке
	Max10 *ConditionFormulas `protobuf:"bytes,10,opt,name=Max10,json=max10,proto3" json:"Max10,omitempty"`
	// Для колец свободных фланцев - в рабочих условиях
	Max11 *ConditionFormulas `protobuf:"bytes,11,opt,name=Max11,json=max11,proto3" json:"Max11,omitempty"`
	// Угол поворота приварного встык фланца и бурта свободного фланца в рабочих условия
	Teta string `protobuf:"bytes,12,opt,name=teta,proto3" json:"teta,omitempty"`
	// Условие
	CondTeta *ConditionFormulas `protobuf:"bytes,13,opt,name=condTeta,proto3" json:"condTeta,omitempty"`
	// Условие
	CondTetaK *ConditionFormulas `protobuf:"bytes,14,opt,name=condTetaK,proto3" json:"condTetaK,omitempty"`
	// Угол поворота кольца свободного фланца в рабочих условиях
	TetaK string `protobuf:"bytes,15,opt,name=tetaK,proto3" json:"tetaK,omitempty"`
}

func (x *ConditionsForStrengthFormulas) Reset() {
	*x = ConditionsForStrengthFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionsForStrengthFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionsForStrengthFormulas) ProtoMessage() {}

func (x *ConditionsForStrengthFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionsForStrengthFormulas.ProtoReflect.Descriptor instead.
func (*ConditionsForStrengthFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{32}
}

func (x *ConditionsForStrengthFormulas) GetMax1() *ConditionFormulas {
	if x != nil {
		return x.Max1
	}
	return nil
}

func (x *ConditionsForStrengthFormulas) GetMax2() *ConditionFormulas {
	if x != nil {
		return x.Max2
	}
	return nil
}

func (x *ConditionsForStrengthFormulas) GetMax3() *ConditionFormulas {
	if x != nil {
		return x.Max3
	}
	return nil
}

func (x *ConditionsForStrengthFormulas) GetMax4() *ConditionFormulas {
	if x != nil {
		return x.Max4
	}
	return nil
}

func (x *ConditionsForStrengthFormulas) GetMax5() *ConditionFormulas {
	if x != nil {
		return x.Max5
	}
	return nil
}

func (x *ConditionsForStrengthFormulas) GetMax6() *ConditionFormulas {
	if x != nil {
		return x.Max6
	}
	return nil
}

func (x *ConditionsForStrengthFormulas) GetMax7() *ConditionFormulas {
	if x != nil {
		return x.Max7
	}
	return nil
}

func (x *ConditionsForStrengthFormulas) GetMax8() *ConditionFormulas {
	if x != nil {
		return x.Max8
	}
	return nil
}

func (x *ConditionsForStrengthFormulas) GetMax9() *ConditionFormulas {
	if x != nil {
		return x.Max9
	}
	return nil
}

func (x *ConditionsForStrengthFormulas) GetMax10() *ConditionFormulas {
	if x != nil {
		return x.Max10
	}
	return nil
}

func (x *ConditionsForStrengthFormulas) GetMax11() *ConditionFormulas {
	if x != nil {
		return x.Max11
	}
	return nil
}

func (x *ConditionsForStrengthFormulas) GetTeta() string {
	if x != nil {
		return x.Teta
	}
	return ""
}

func (x *ConditionsForStrengthFormulas) GetCondTeta() *ConditionFormulas {
	if x != nil {
		return x.CondTeta
	}
	return nil
}

func (x *ConditionsForStrengthFormulas) GetCondTetaK() *ConditionFormulas {
	if x != nil {
		return x.CondTetaK
	}
	return nil
}

func (x *ConditionsForStrengthFormulas) GetTetaK() string {
	if x != nil {
		return x.TetaK
	}
	return ""
}

type TightnessLoadFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Нагрузка вызванная стесненностью температурных деформаций
	Qt string `protobuf:"bytes,1,opt,name=Qt,json=qt,proto3" json:"Qt,omitempty"`
	// Расчетная нагрузка на болты/шпильки фланцевых соединений
	Pb string `protobuf:"bytes,2,opt,name=Pb,json=pb,proto3" json:"Pb,omitempty"`
	// Расчетная нагрузка на болты/шпильки при затяжке необходимая для обеспечения в рабочих условиях давления
	Pb1 string `protobuf:"bytes,3,opt,name=Pb1,json=pb1,proto3" json:"Pb1,omitempty"`
	// Расчетная нагрузка на болты/шпильки фланцевых соединений в рабочих условиях
	Pbr string `protobuf:"bytes,4,opt,name=Pbr,json=pbr,proto3" json:"Pbr,omitempty"`
}

func (x *TightnessLoadFormulas) Reset() {
	*x = TightnessLoadFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TightnessLoadFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TightnessLoadFormulas) ProtoMessage() {}

func (x *TightnessLoadFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TightnessLoadFormulas.ProtoReflect.Descriptor instead.
func (*TightnessLoadFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{33}
}

func (x *TightnessLoadFormulas) GetQt() string {
	if x != nil {
		return x.Qt
	}
	return ""
}

func (x *TightnessLoadFormulas) GetPb() string {
	if x != nil {
		return x.Pb
	}
	return ""
}

func (x *TightnessLoadFormulas) GetPb1() string {
	if x != nil {
		return x.Pb1
	}
	return ""
}

func (x *TightnessLoadFormulas) GetPbr() string {
	if x != nil {
		return x.Pbr
	}
	return ""
}

type FlangeData_Size struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DOut float64 `protobuf:"fixed64,1,opt,name=dOut,proto3" json:"dOut,omitempty"`
	D    float64 `protobuf:"fixed64,2,opt,name=d,proto3" json:"d,omitempty"`
	H    float64 `protobuf:"fixed64,3,opt,name=h,proto3" json:"h,omitempty"`
	S0   float64 `protobuf:"fixed64,4,opt,name=s0,proto3" json:"s0,omitempty"`
	S1   float64 `protobuf:"fixed64,5,opt,name=s1,proto3" json:"s1,omitempty"`
	L    float64 `protobuf:"fixed64,6,opt,name=l,proto3" json:"l,omitempty"`
	D6   float64 `protobuf:"fixed64,7,opt,name=d6,proto3" json:"d6,omitempty"`
	Dnk  float64 `protobuf:"fixed64,8,opt,name=dnk,proto3" json:"dnk,omitempty"`
	Dk   float64 `protobuf:"fixed64,9,opt,name=dk,proto3" json:"dk,omitempty"`
	Ds   float64 `protobuf:"fixed64,10,opt,name=ds,proto3" json:"ds,omitempty"`
	H0   float64 `protobuf:"fixed64,11,opt,name=h0,proto3" json:"h0,omitempty"`
	Hk   float64 `protobuf:"fixed64,12,opt,name=hk,proto3" json:"hk,omitempty"`
}

func (x *FlangeData_Size) Reset() {
	*x = FlangeData_Size{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlangeData_Size) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlangeData_Size) ProtoMessage() {}

func (x *FlangeData_Size) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlangeData_Size.ProtoReflect.Descriptor instead.
func (*FlangeData_Size) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{1, 0}
}

func (x *FlangeData_Size) GetDOut() float64 {
	if x != nil {
		return x.DOut
	}
	return 0
}

func (x *FlangeData_Size) GetD() float64 {
	if x != nil {
		return x.D
	}
	return 0
}

func (x *FlangeData_Size) GetH() float64 {
	if x != nil {
		return x.H
	}
	return 0
}

func (x *FlangeData_Size) GetS0() float64 {
	if x != nil {
		return x.S0
	}
	return 0
}

func (x *FlangeData_Size) GetS1() float64 {
	if x != nil {
		return x.S1
	}
	return 0
}

func (x *FlangeData_Size) GetL() float64 {
	if x != nil {
		return x.L
	}
	return 0
}

func (x *FlangeData_Size) GetD6() float64 {
	if x != nil {
		return x.D6
	}
	return 0
}

func (x *FlangeData_Size) GetDnk() float64 {
	if x != nil {
		return x.Dnk
	}
	return 0
}

func (x *FlangeData_Size) GetDk() float64 {
	if x != nil {
		return x.Dk
	}
	return 0
}

func (x *FlangeData_Size) GetDs() float64 {
	if x != nil {
		return x.Ds
	}
	return 0
}

func (x *FlangeData_Size) GetH0() float64 {
	if x != nil {
		return x.H0
	}
	return 0
}

func (x *FlangeData_Size) GetHk() float64 {
	if x != nil {
		return x.Hk
	}
	return 0
}

type GasketData_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           string          `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Type            GasketData_Type `protobuf:"varint,2,opt,name=type,proto3,enum=flange_model.GasketData_Type" json:"type,omitempty"`
	Qo              float64         `protobuf:"fixed64,3,opt,name=qo,proto3" json:"qo,omitempty"`
	M               float64         `protobuf:"fixed64,4,opt,name=m,proto3" json:"m,omitempty"`
	Compression     float64         `protobuf:"fixed64,5,opt,name=compression,proto3" json:"compression,omitempty"`
	Epsilon         float64         `protobuf:"fixed64,6,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	PermissiblePres float64         `protobuf:"fixed64,7,opt,name=permissiblePres,proto3" json:"permissiblePres,omitempty"`
}

func (x *GasketData_Data) Reset() {
	*x = GasketData_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasketData_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasketData_Data) ProtoMessage() {}

func (x *GasketData_Data) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasketData_Data.ProtoReflect.Descriptor instead.
func (*GasketData_Data) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{4, 0}
}

func (x *GasketData_Data) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GasketData_Data) GetType() GasketData_Type {
	if x != nil {
		return x.Type
	}
	return GasketData_Soft
}

func (x *GasketData_Data) GetQo() float64 {
	if x != nil {
		return x.Qo
	}
	return 0
}

func (x *GasketData_Data) GetM() float64 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *GasketData_Data) GetCompression() float64 {
	if x != nil {
		return x.Compression
	}
	return 0
}

func (x *GasketData_Data) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *GasketData_Data) GetPermissiblePres() float64 {
	if x != nil {
		return x.PermissiblePres
	}
	return 0
}

type FlangeResult_Ring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Расчетная температура свободного кольца
	Tk           float64 `protobuf:"fixed64,1,opt,name=tk,proto3" json:"tk,omitempty"`
	AlphaK       float64 `protobuf:"fixed64,2,opt,name=alphaK,proto3" json:"alphaK,omitempty"`
	EpsilonKAt20 float64 `protobuf:"fixed64,3,opt,name=epsilonKAt20,proto3" json:"epsilonKAt20,omitempty"`
	EpsilonK     float64 `protobuf:"fixed64,4,opt,name=epsilonK,proto3" json:"epsilonK,omitempty"`
	SigmaKAt20   float64 `protobuf:"fixed64,5,opt,name=sigmaKAt20,proto3" json:"sigmaKAt20,omitempty"`
	SigmaK       float64 `protobuf:"fixed64,6,opt,name=sigmaK,proto3" json:"sigmaK,omitempty"`
	Material     string  `protobuf:"bytes,7,opt,name=Material,json=material,proto3" json:"Material,omitempty"`
}

func (x *FlangeResult_Ring) Reset() {
	*x = FlangeResult_Ring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlangeResult_Ring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlangeResult_Ring) ProtoMessage() {}

func (x *FlangeResult_Ring) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlangeResult_Ring.ProtoReflect.Descriptor instead.
func (*FlangeResult_Ring) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{7, 0}
}

func (x *FlangeResult_Ring) GetTk() float64 {
	if x != nil {
		return x.Tk
	}
	return 0
}

func (x *FlangeResult_Ring) GetAlphaK() float64 {
	if x != nil {
		return x.AlphaK
	}
	return 0
}

func (x *FlangeResult_Ring) GetEpsilonKAt20() float64 {
	if x != nil {
		return x.EpsilonKAt20
	}
	return 0
}

func (x *FlangeResult_Ring) GetEpsilonK() float64 {
	if x != nil {
		return x.EpsilonK
	}
	return 0
}

func (x *FlangeResult_Ring) GetSigmaKAt20() float64 {
	if x != nil {
		return x.SigmaKAt20
	}
	return 0
}

func (x *FlangeResult_Ring) GetSigmaK() float64 {
	if x != nil {
		return x.SigmaK
	}
	return 0
}

func (x *FlangeResult_Ring) GetMaterial() string {
	if x != nil {
		return x.Material
	}
	return ""
}

type Calculated_Basis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deformation   *CalcDeformation   `protobuf:"bytes,1,opt,name=deformation,proto3" json:"deformation,omitempty"`
	ForcesInBolts *CalcForcesInBolts `protobuf:"bytes,2,opt,name=forcesInBolts,proto3" json:"forcesInBolts,omitempty"`
	BoltStrength  *CalcBoltStrength  `protobuf:"bytes,3,opt,name=boltStrength,proto3" json:"boltStrength,omitempty"`
	Moment        *CalcMoment        `protobuf:"bytes,4,opt,name=moment,proto3" json:"moment,omitempty"`
}

func (x *Calculated_Basis) Reset() {
	*x = Calculated_Basis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Calculated_Basis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Calculated_Basis) ProtoMessage() {}

func (x *Calculated_Basis) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Calculated_Basis.ProtoReflect.Descriptor instead.
func (*Calculated_Basis) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Calculated_Basis) GetDeformation() *CalcDeformation {
	if x != nil {
		return x.Deformation
	}
	return nil
}

func (x *Calculated_Basis) GetForcesInBolts() *CalcForcesInBolts {
	if x != nil {
		return x.ForcesInBolts
	}
	return nil
}

func (x *Calculated_Basis) GetBoltStrength() *CalcBoltStrength {
	if x != nil {
		return x.BoltStrength
	}
	return nil
}

func (x *Calculated_Basis) GetMoment() *CalcMoment {
	if x != nil {
		return x.Moment
	}
	return nil
}

type Calculated_Strength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auxiliary              *CalcAuxiliary               `protobuf:"bytes,1,opt,name=auxiliary,proto3" json:"auxiliary,omitempty"`
	Tightness              *CalcTightness               `protobuf:"bytes,2,opt,name=tightness,proto3" json:"tightness,omitempty"`
	BoltStrength1          *CalcBoltStrength            `protobuf:"bytes,3,opt,name=boltStrength1,proto3" json:"boltStrength1,omitempty"`
	Moment1                *CalcMoment                  `protobuf:"bytes,4,opt,name=moment1,proto3" json:"moment1,omitempty"`
	StaticResistance1      []*CalcStaticResistance      `protobuf:"bytes,5,rep,name=staticResistance1,proto3" json:"staticResistance1,omitempty"`
	ConditionsForStrength1 []*CalcConditionsForStrength `protobuf:"bytes,6,rep,name=conditionsForStrength1,proto3" json:"conditionsForStrength1,omitempty"`
	TightnessLoad          *CalcTightnessLoad           `protobuf:"bytes,7,opt,name=tightnessLoad,proto3" json:"tightnessLoad,omitempty"`
	BoltStrength2          *CalcBoltStrength            `protobuf:"bytes,8,opt,name=boltStrength2,proto3" json:"boltStrength2,omitempty"`
	Moment2                *CalcMoment                  `protobuf:"bytes,9,opt,name=moment2,proto3" json:"moment2,omitempty"`
	StaticResistance2      []*CalcStaticResistance      `protobuf:"bytes,10,rep,name=staticResistance2,proto3" json:"staticResistance2,omitempty"`
	ConditionsForStrength2 []*CalcConditionsForStrength `protobuf:"bytes,11,rep,name=conditionsForStrength2,proto3" json:"conditionsForStrength2,omitempty"`
	Deformation            *CalcDeformation             `protobuf:"bytes,12,opt,name=deformation,proto3" json:"deformation,omitempty"`
	ForcesInBolts          *CalcForcesInBolts           `protobuf:"bytes,13,opt,name=forcesInBolts,proto3" json:"forcesInBolts,omitempty"`
	FinalMoment            *CalcMoment                  `protobuf:"bytes,14,opt,name=finalMoment,proto3" json:"finalMoment,omitempty"`
}

func (x *Calculated_Strength) Reset() {
	*x = Calculated_Strength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Calculated_Strength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Calculated_Strength) ProtoMessage() {}

func (x *Calculated_Strength) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Calculated_Strength.ProtoReflect.Descriptor instead.
func (*Calculated_Strength) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{12, 1}
}

func (x *Calculated_Strength) GetAuxiliary() *CalcAuxiliary {
	if x != nil {
		return x.Auxiliary
	}
	return nil
}

func (x *Calculated_Strength) GetTightness() *CalcTightness {
	if x != nil {
		return x.Tightness
	}
	return nil
}

func (x *Calculated_Strength) GetBoltStrength1() *CalcBoltStrength {
	if x != nil {
		return x.BoltStrength1
	}
	return nil
}

func (x *Calculated_Strength) GetMoment1() *CalcMoment {
	if x != nil {
		return x.Moment1
	}
	return nil
}

func (x *Calculated_Strength) GetStaticResistance1() []*CalcStaticResistance {
	if x != nil {
		return x.StaticResistance1
	}
	return nil
}

func (x *Calculated_Strength) GetConditionsForStrength1() []*CalcConditionsForStrength {
	if x != nil {
		return x.ConditionsForStrength1
	}
	return nil
}

func (x *Calculated_Strength) GetTightnessLoad() *CalcTightnessLoad {
	if x != nil {
		return x.TightnessLoad
	}
	return nil
}

func (x *Calculated_Strength) GetBoltStrength2() *CalcBoltStrength {
	if x != nil {
		return x.BoltStrength2
	}
	return nil
}

func (x *Calculated_Strength) GetMoment2() *CalcMoment {
	if x != nil {
		return x.Moment2
	}
	return nil
}

func (x *Calculated_Strength) GetStaticResistance2() []*CalcStaticResistance {
	if x != nil {
		return x.StaticResistance2
	}
	return nil
}

func (x *Calculated_Strength) GetConditionsForStrength2() []*CalcConditionsForStrength {
	if x != nil {
		return x.ConditionsForStrength2
	}
	return nil
}

func (x *Calculated_Strength) GetDeformation() *CalcDeformation {
	if x != nil {
		return x.Deformation
	}
	return nil
}

func (x *Calculated_Strength) GetForcesInBolts() *CalcForcesInBolts {
	if x != nil {
		return x.ForcesInBolts
	}
	return nil
}

func (x *Calculated_Strength) GetFinalMoment() *CalcMoment {
	if x != nil {
		return x.FinalMoment
	}
	return nil
}

type CalcAuxiliary_Flange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Плечи действия усилий в болтах/шпильках
	A float64 `protobuf:"fixed64,1,opt,name=a,proto3" json:"a,omitempty"`
	// Плечи действия усилий в болтах/шпильках
	B float64 `protobuf:"fixed64,2,opt,name=b,proto3" json:"b,omitempty"`
	// Плечо усилия от действия давления на фланец
	E float64 `protobuf:"fixed64,3,opt,name=e,proto3" json:"e,omitempty"`
	// Эквивалентная толщина втулки
	Se float64 `protobuf:"fixed64,4,opt,name=Se,json=se,proto3" json:"Se,omitempty"`
	// Коэффициент зависящий от соотношения размеров конической втулки фланца
	Xi float64 `protobuf:"fixed64,5,opt,name=xi,proto3" json:"xi,omitempty"`
	X  float64 `protobuf:"fixed64,6,opt,name=x,proto3" json:"x,omitempty"`
	// Параметр длины обечайки
	L0    float64 `protobuf:"fixed64,7,opt,name=l0,proto3" json:"l0,omitempty"`
	Lymda float64 `protobuf:"fixed64,8,opt,name=lymda,proto3" json:"lymda,omitempty"`
	// Угловая податливость фланца при затяжке
	Yf   float64 `protobuf:"fixed64,9,opt,name=yf,proto3" json:"yf,omitempty"`
	Psik float64 `protobuf:"fixed64,10,opt,name=psik,proto3" json:"psik,omitempty"`
	// Угловая податливость кольца свободного фланца при затяжке
	Yk float64 `protobuf:"fixed64,11,opt,name=yk,proto3" json:"yk,omitempty"`
	// Угловая податливость фланца нагруженного внешним изгибающим моментом для фланцев приварных встык и плоских
	Yfn float64 `protobuf:"fixed64,12,opt,name=yfn,proto3" json:"yfn,omitempty"`
	// Угловая податливость фланца нагруженного внешним изгибающим моментом для свободного фланца
	Yfc float64 `protobuf:"fixed64,13,opt,name=yfc,proto3" json:"yfc,omitempty"`
	// Отношение наружного диаметра тарелки фланца к внутреннему диаметру
	K    float64 `protobuf:"fixed64,14,opt,name=k,proto3" json:"k,omitempty"`
	Beta float64 `protobuf:"fixed64,15,opt,name=beta,proto3" json:"beta,omitempty"`
	// Расчетные коэффициенты
	BetaT float64 `protobuf:"fixed64,16,opt,name=betaT,proto3" json:"betaT,omitempty"`
	BetaU float64 `protobuf:"fixed64,17,opt,name=betaU,proto3" json:"betaU,omitempty"`
	BetaY float64 `protobuf:"fixed64,18,opt,name=betaY,proto3" json:"betaY,omitempty"`
	BetaZ float64 `protobuf:"fixed64,19,opt,name=betaZ,proto3" json:"betaZ,omitempty"`
	BetaF float64 `protobuf:"fixed64,20,opt,name=betaF,proto3" json:"betaF,omitempty"`
	BetaV float64 `protobuf:"fixed64,21,opt,name=betaV,proto3" json:"betaV,omitempty"`
	F     float64 `protobuf:"fixed64,22,opt,name=f,proto3" json:"f,omitempty"`
}

func (x *CalcAuxiliary_Flange) Reset() {
	*x = CalcAuxiliary_Flange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcAuxiliary_Flange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcAuxiliary_Flange) ProtoMessage() {}

func (x *CalcAuxiliary_Flange) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcAuxiliary_Flange.ProtoReflect.Descriptor instead.
func (*CalcAuxiliary_Flange) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{17, 0}
}

func (x *CalcAuxiliary_Flange) GetA() float64 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *CalcAuxiliary_Flange) GetB() float64 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *CalcAuxiliary_Flange) GetE() float64 {
	if x != nil {
		return x.E
	}
	return 0
}

func (x *CalcAuxiliary_Flange) GetSe() float64 {
	if x != nil {
		return x.Se
	}
	return 0
}

func (x *CalcAuxiliary_Flange) GetXi() float64 {
	if x != nil {
		return x.Xi
	}
	return 0
}

func (x *CalcAuxiliary_Flange) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *CalcAuxiliary_Flange) GetL0() float64 {
	if x != nil {
		return x.L0
	}
	return 0
}

func (x *CalcAuxiliary_Flange) GetLymda() float64 {
	if x != nil {
		return x.Lymda
	}
	return 0
}

func (x *CalcAuxiliary_Flange) GetYf() float64 {
	if x != nil {
		return x.Yf
	}
	return 0
}

func (x *CalcAuxiliary_Flange) GetPsik() float64 {
	if x != nil {
		return x.Psik
	}
	return 0
}

func (x *CalcAuxiliary_Flange) GetYk() float64 {
	if x != nil {
		return x.Yk
	}
	return 0
}

func (x *CalcAuxiliary_Flange) GetYfn() float64 {
	if x != nil {
		return x.Yfn
	}
	return 0
}

func (x *CalcAuxiliary_Flange) GetYfc() float64 {
	if x != nil {
		return x.Yfc
	}
	return 0
}

func (x *CalcAuxiliary_Flange) GetK() float64 {
	if x != nil {
		return x.K
	}
	return 0
}

func (x *CalcAuxiliary_Flange) GetBeta() float64 {
	if x != nil {
		return x.Beta
	}
	return 0
}

func (x *CalcAuxiliary_Flange) GetBetaT() float64 {
	if x != nil {
		return x.BetaT
	}
	return 0
}

func (x *CalcAuxiliary_Flange) GetBetaU() float64 {
	if x != nil {
		return x.BetaU
	}
	return 0
}

func (x *CalcAuxiliary_Flange) GetBetaY() float64 {
	if x != nil {
		return x.BetaY
	}
	return 0
}

func (x *CalcAuxiliary_Flange) GetBetaZ() float64 {
	if x != nil {
		return x.BetaZ
	}
	return 0
}

func (x *CalcAuxiliary_Flange) GetBetaF() float64 {
	if x != nil {
		return x.BetaF
	}
	return 0
}

func (x *CalcAuxiliary_Flange) GetBetaV() float64 {
	if x != nil {
		return x.BetaV
	}
	return 0
}

func (x *CalcAuxiliary_Flange) GetF() float64 {
	if x != nil {
		return x.F
	}
	return 0
}

type Formulas_Basis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deformation   *DeformationFormulas   `protobuf:"bytes,1,opt,name=deformation,proto3" json:"deformation,omitempty"`
	ForcesInBolts *ForcesInBoltsFormulas `protobuf:"bytes,2,opt,name=forcesInBolts,proto3" json:"forcesInBolts,omitempty"`
	BoltStrength  *BoltStrengthFormulas  `protobuf:"bytes,3,opt,name=boltStrength,proto3" json:"boltStrength,omitempty"`
	Moment        *MomentFormulas        `protobuf:"bytes,4,opt,name=moment,proto3" json:"moment,omitempty"`
}

func (x *Formulas_Basis) Reset() {
	*x = Formulas_Basis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Formulas_Basis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Formulas_Basis) ProtoMessage() {}

func (x *Formulas_Basis) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Formulas_Basis.ProtoReflect.Descriptor instead.
func (*Formulas_Basis) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{23, 0}
}

func (x *Formulas_Basis) GetDeformation() *DeformationFormulas {
	if x != nil {
		return x.Deformation
	}
	return nil
}

func (x *Formulas_Basis) GetForcesInBolts() *ForcesInBoltsFormulas {
	if x != nil {
		return x.ForcesInBolts
	}
	return nil
}

func (x *Formulas_Basis) GetBoltStrength() *BoltStrengthFormulas {
	if x != nil {
		return x.BoltStrength
	}
	return nil
}

func (x *Formulas_Basis) GetMoment() *MomentFormulas {
	if x != nil {
		return x.Moment
	}
	return nil
}

type Formulas_Strength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auxiliary              *AuxiliaryFormulas               `protobuf:"bytes,1,opt,name=auxiliary,proto3" json:"auxiliary,omitempty"`
	Tightness              *TightnessFormulas               `protobuf:"bytes,2,opt,name=tightness,proto3" json:"tightness,omitempty"`
	BoltStrength1          *BoltStrengthFormulas            `protobuf:"bytes,3,opt,name=boltStrength1,proto3" json:"boltStrength1,omitempty"`
	Moment1                *MomentFormulas                  `protobuf:"bytes,4,opt,name=moment1,proto3" json:"moment1,omitempty"`
	StaticResistance1      []*StaticResistanceFormulas      `protobuf:"bytes,5,rep,name=staticResistance1,proto3" json:"staticResistance1,omitempty"`
	ConditionsForStrength1 []*ConditionsForStrengthFormulas `protobuf:"bytes,6,rep,name=conditionsForStrength1,proto3" json:"conditionsForStrength1,omitempty"`
	TightnessLoad          *TightnessLoadFormulas           `protobuf:"bytes,7,opt,name=tightnessLoad,proto3" json:"tightnessLoad,omitempty"`
	BoltStrength2          *BoltStrengthFormulas            `protobuf:"bytes,8,opt,name=boltStrength2,proto3" json:"boltStrength2,omitempty"`
	Moment2                *MomentFormulas                  `protobuf:"bytes,9,opt,name=moment2,proto3" json:"moment2,omitempty"`
	StaticResistance2      []*StaticResistanceFormulas      `protobuf:"bytes,10,rep,name=staticResistance2,proto3" json:"staticResistance2,omitempty"`
	ConditionsForStrength2 []*ConditionsForStrengthFormulas `protobuf:"bytes,11,rep,name=conditionsForStrength2,proto3" json:"conditionsForStrength2,omitempty"`
	Deformation            *DeformationFormulas             `protobuf:"bytes,12,opt,name=deformation,proto3" json:"deformation,omitempty"`
	ForcesInBolts          *ForcesInBoltsFormulas           `protobuf:"bytes,13,opt,name=forcesInBolts,proto3" json:"forcesInBolts,omitempty"`
	FinalMoment            *MomentFormulas                  `protobuf:"bytes,14,opt,name=finalMoment,proto3" json:"finalMoment,omitempty"`
}

func (x *Formulas_Strength) Reset() {
	*x = Formulas_Strength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Formulas_Strength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Formulas_Strength) ProtoMessage() {}

func (x *Formulas_Strength) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Formulas_Strength.ProtoReflect.Descriptor instead.
func (*Formulas_Strength) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{23, 1}
}

func (x *Formulas_Strength) GetAuxiliary() *AuxiliaryFormulas {
	if x != nil {
		return x.Auxiliary
	}
	return nil
}

func (x *Formulas_Strength) GetTightness() *TightnessFormulas {
	if x != nil {
		return x.Tightness
	}
	return nil
}

func (x *Formulas_Strength) GetBoltStrength1() *BoltStrengthFormulas {
	if x != nil {
		return x.BoltStrength1
	}
	return nil
}

func (x *Formulas_Strength) GetMoment1() *MomentFormulas {
	if x != nil {
		return x.Moment1
	}
	return nil
}

func (x *Formulas_Strength) GetStaticResistance1() []*StaticResistanceFormulas {
	if x != nil {
		return x.StaticResistance1
	}
	return nil
}

func (x *Formulas_Strength) GetConditionsForStrength1() []*ConditionsForStrengthFormulas {
	if x != nil {
		return x.ConditionsForStrength1
	}
	return nil
}

func (x *Formulas_Strength) GetTightnessLoad() *TightnessLoadFormulas {
	if x != nil {
		return x.TightnessLoad
	}
	return nil
}

func (x *Formulas_Strength) GetBoltStrength2() *BoltStrengthFormulas {
	if x != nil {
		return x.BoltStrength2
	}
	return nil
}

func (x *Formulas_Strength) GetMoment2() *MomentFormulas {
	if x != nil {
		return x.Moment2
	}
	return nil
}

func (x *Formulas_Strength) GetStaticResistance2() []*StaticResistanceFormulas {
	if x != nil {
		return x.StaticResistance2
	}
	return nil
}

func (x *Formulas_Strength) GetConditionsForStrength2() []*ConditionsForStrengthFormulas {
	if x != nil {
		return x.ConditionsForStrength2
	}
	return nil
}

func (x *Formulas_Strength) GetDeformation() *DeformationFormulas {
	if x != nil {
		return x.Deformation
	}
	return nil
}

func (x *Formulas_Strength) GetForcesInBolts() *ForcesInBoltsFormulas {
	if x != nil {
		return x.ForcesInBolts
	}
	return nil
}

func (x *Formulas_Strength) GetFinalMoment() *MomentFormulas {
	if x != nil {
		return x.FinalMoment
	}
	return nil
}

type AuxiliaryFormulas_Flange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Плечи действия усилий в болтах/шпильках
	A string `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	// Плечи действия усилий в болтах/шпильках
	B string `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`
	// Плечо усилия от действия давления на фланец
	E string `protobuf:"bytes,3,opt,name=e,proto3" json:"e,omitempty"`
	// Эквивалентная толщина втулки
	Se string `protobuf:"bytes,4,opt,name=Se,json=se,proto3" json:"Se,omitempty"`
	// Коэффициент зависящий от соотношения размеров конической втулки фланца
	Xi string `protobuf:"bytes,5,opt,name=xi,proto3" json:"xi,omitempty"`
	X  string `protobuf:"bytes,6,opt,name=x,proto3" json:"x,omitempty"`
	// Параметр длины обечайки
	L0    string `protobuf:"bytes,7,opt,name=l0,proto3" json:"l0,omitempty"`
	Lymda string `protobuf:"bytes,8,opt,name=lymda,proto3" json:"lymda,omitempty"`
	// Угловая податливость фланца при затяжке
	Yf   string `protobuf:"bytes,9,opt,name=yf,proto3" json:"yf,omitempty"`
	Psik string `protobuf:"bytes,10,opt,name=psik,proto3" json:"psik,omitempty"`
	// Угловая податливость кольца свободного фланца при затяжке
	Yk string `protobuf:"bytes,11,opt,name=yk,proto3" json:"yk,omitempty"`
	// Угловая податливость фланца нагруженного внешним изгибающим моментом для фланцев приварных встык и плоских
	Yfn string `protobuf:"bytes,12,opt,name=yfn,proto3" json:"yfn,omitempty"`
	// Угловая податливость фланца нагруженного внешним изгибающим моментом для свободного фланца
	Yfc string `protobuf:"bytes,13,opt,name=yfc,proto3" json:"yfc,omitempty"`
	// Отношение наружного диаметра тарелки фланца к внутреннему диаметру
	K    string `protobuf:"bytes,14,opt,name=k,proto3" json:"k,omitempty"`
	Beta string `protobuf:"bytes,15,opt,name=beta,proto3" json:"beta,omitempty"`
}

func (x *AuxiliaryFormulas_Flange) Reset() {
	*x = AuxiliaryFormulas_Flange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_flange_model_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuxiliaryFormulas_Flange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuxiliaryFormulas_Flange) ProtoMessage() {}

func (x *AuxiliaryFormulas_Flange) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_flange_model_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuxiliaryFormulas_Flange.ProtoReflect.Descriptor instead.
func (*AuxiliaryFormulas_Flange) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_flange_model_proto_rawDescGZIP(), []int{28, 0}
}

func (x *AuxiliaryFormulas_Flange) GetA() string {
	if x != nil {
		return x.A
	}
	return ""
}

func (x *AuxiliaryFormulas_Flange) GetB() string {
	if x != nil {
		return x.B
	}
	return ""
}

func (x *AuxiliaryFormulas_Flange) GetE() string {
	if x != nil {
		return x.E
	}
	return ""
}

func (x *AuxiliaryFormulas_Flange) GetSe() string {
	if x != nil {
		return x.Se
	}
	return ""
}

func (x *AuxiliaryFormulas_Flange) GetXi() string {
	if x != nil {
		return x.Xi
	}
	return ""
}

func (x *AuxiliaryFormulas_Flange) GetX() string {
	if x != nil {
		return x.X
	}
	return ""
}

func (x *AuxiliaryFormulas_Flange) GetL0() string {
	if x != nil {
		return x.L0
	}
	return ""
}

func (x *AuxiliaryFormulas_Flange) GetLymda() string {
	if x != nil {
		return x.Lymda
	}
	return ""
}

func (x *AuxiliaryFormulas_Flange) GetYf() string {
	if x != nil {
		return x.Yf
	}
	return ""
}

func (x *AuxiliaryFormulas_Flange) GetPsik() string {
	if x != nil {
		return x.Psik
	}
	return ""
}

func (x *AuxiliaryFormulas_Flange) GetYk() string {
	if x != nil {
		return x.Yk
	}
	return ""
}

func (x *AuxiliaryFormulas_Flange) GetYfn() string {
	if x != nil {
		return x.Yfn
	}
	return ""
}

func (x *AuxiliaryFormulas_Flange) GetYfc() string {
	if x != nil {
		return x.Yfc
	}
	return ""
}

func (x *AuxiliaryFormulas_Flange) GetK() string {
	if x != nil {
		return x.K
	}
	return ""
}

func (x *AuxiliaryFormulas_Flange) GetBeta() string {
	if x != nil {
		return x.Beta
	}
	return ""
}

var File_moment_calc_api_flange_model_proto protoreflect.FileDescriptor

var file_moment_calc_api_flange_model_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x22, 0xac, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x46, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x46, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x41, 0x74, 0x32, 0x30,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x41,
	0x74, 0x32, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x41, 0x74, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x41, 0x74, 0x32, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x69, 0x67, 0x6d, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x69, 0x67, 0x6d,
	0x61, 0x22, 0xb5, 0x05, 0x0a, 0x0a, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x64,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x64, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x70,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x70, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x72, 0x72, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x63, 0x6f, 0x72, 0x72, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x08,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x01, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x64, 0x6e, 0x1a, 0xc6, 0x01, 0x0a, 0x04, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x4f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x01, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01,
	0x68, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x73,
	0x30, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x73,
	0x31, 0x12, 0x0c, 0x0a, 0x01, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x6c, 0x12,
	0x0e, 0x0a, 0x02, 0x64, 0x36, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x64, 0x36, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x64, 0x6e,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x64,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x64,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x30, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x68,
	0x30, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x68,
	0x6b, 0x22, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x77, 0x65, 0x6c,
	0x64, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x74, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x10, 0x02, 0x22, 0xe2, 0x01, 0x0a, 0x08, 0x42, 0x6f,
	0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x49, 0x64, 0x22, 0x7a,
	0x0a, 0x0a, 0x57, 0x61, 0x73, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0xb4, 0x03, 0x0a, 0x0a, 0x47,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x5f, 0x6f,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x11,
	0x0a, 0x04, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x64, 0x49,
	0x6e, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0xd3, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x71, 0x6f, 0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x22, 0x25, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x6f, 0x66, 0x74, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4f, 0x76, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x10,
	0x02, 0x22, 0x79, 0x0a, 0x09, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x9e, 0x02, 0x0a,
	0x0a, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x78, 0x69, 0x61, 0x6c,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x78, 0x69,
	0x61, 0x6c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x62, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x65, 0x6d,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x65, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x65, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x06,
	0x0a, 0x0c, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x4f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x64, 0x4f,
	0x75, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x64, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x64, 0x6b,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x64,
	0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02,
	0x64, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x68,
	0x12, 0x0e, 0x0a, 0x02, 0x68, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x68, 0x30,
	0x12, 0x0e, 0x0a, 0x02, 0x68, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x68, 0x6b,
	0x12, 0x0e, 0x0a, 0x02, 0x73, 0x30, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x73, 0x30,
	0x12, 0x0e, 0x0a, 0x02, 0x73, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x73, 0x31,
	0x12, 0x0c, 0x0a, 0x01, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x64, 0x36, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x64, 0x36, 0x12, 0x0c,
	0x0a, 0x01, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x63, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x74, 0x66, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x46, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x46, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x41,
	0x74, 0x32, 0x30, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x65, 0x70, 0x73, 0x69, 0x6c,
	0x6f, 0x6e, 0x41, 0x74, 0x32, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x41, 0x74, 0x32, 0x30, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x41, 0x74, 0x32, 0x30, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73,
	0x69, 0x67, 0x6d, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x41, 0x74, 0x32, 0x30, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x41, 0x74, 0x32, 0x30, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6d, 0x61, 0x52, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x41, 0x74,
	0x32, 0x30, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x52,
	0x41, 0x74, 0x32, 0x30, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x33, 0x0a, 0x04, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xc2, 0x01, 0x0a, 0x04, 0x52, 0x69,
	0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02,
	0x74, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x4b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x4b, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x70,
	0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x4b, 0x41, 0x74, 0x32, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x4b, 0x41, 0x74, 0x32, 0x30, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x4b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x4b, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69,
	0x67, 0x6d, 0x61, 0x4b, 0x41, 0x74, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x73, 0x69, 0x67, 0x6d, 0x61, 0x4b, 0x41, 0x74, 0x32, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69,
	0x67, 0x6d, 0x61, 0x4b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6d,
	0x61, 0x4b, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0xa0,
	0x02, 0x0a, 0x0a, 0x42, 0x6f, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e,
	0x41, 0x74, 0x32, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x65, 0x70, 0x73, 0x69,
	0x6c, 0x6f, 0x6e, 0x41, 0x74, 0x32, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x41, 0x74, 0x32, 0x30, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x41, 0x74, 0x32, 0x30, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x73, 0x69, 0x67, 0x6d, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x22, 0x9d, 0x02, 0x0a, 0x0c, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e,
	0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x5f,
	0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x64, 0x4f, 0x75, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x01, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x70, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x73,
	0x69, 0x6c, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x70, 0x73, 0x69,
	0x6c, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x71, 0x0a, 0x0b, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x74, 0x65, 0x6d, 0x70, 0x22, 0x72, 0x0a, 0x0c, 0x57, 0x61, 0x73, 0x68, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x22, 0xf1, 0x0a, 0x0a, 0x0a, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x73, 0x52, 0x05, 0x62, 0x61, 0x73, 0x69, 0x73, 0x12, 0x3d, 0x0a,
	0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0x85, 0x02, 0x0a,
	0x05, 0x42, 0x61, 0x73, 0x69, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x44,
	0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x73, 0x49, 0x6e, 0x42, 0x6f, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61,
	0x6c, 0x63, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x42, 0x6f, 0x6c, 0x74, 0x73, 0x52,
	0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x42, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x42,
	0x0a, 0x0c, 0x62, 0x6f, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x42, 0x6f, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x52, 0x0c, 0x62, 0x6f, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x6d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xe5, 0x07, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72,
	0x79, 0x52, 0x09, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x09,
	0x74, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43,
	0x61, 0x6c, 0x63, 0x54, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x09, 0x74, 0x69,
	0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x62, 0x6f, 0x6c, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61,
	0x6c, 0x63, 0x42, 0x6f, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0d,
	0x62, 0x6f, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x31, 0x12, 0x32, 0x0a,
	0x07, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61,
	0x6c, 0x63, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x31, 0x12, 0x50, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x31, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66,
	0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x31, 0x12, 0x5f, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x31, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x16, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x31, 0x12, 0x45, 0x0a, 0x0d, 0x74, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x4c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x54,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x0d, 0x74, 0x69,
	0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x62,
	0x6f, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x42, 0x6f, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x52, 0x0d, 0x62, 0x6f, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x32, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x6d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x32, 0x12, 0x50, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x32, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x43, 0x61, 0x6c, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x32, 0x12, 0x5f, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x32, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x52, 0x16, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32, 0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c,
	0x63, 0x44, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0d, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x73, 0x49, 0x6e, 0x42, 0x6f, 0x6c, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x43, 0x61, 0x6c, 0x63, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x42, 0x6f, 0x6c, 0x74,
	0x73, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x42, 0x6f, 0x6c, 0x74, 0x73,
	0x12, 0x3a, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x53, 0x0a, 0x0f,
	0x43, 0x61, 0x6c, 0x63, 0x44, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x62, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x62, 0x30, 0x12,
	0x10, 0x0a, 0x03, 0x44, 0x63, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x64, 0x63,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x70,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x52, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x72,
	0x70, 0x22, 0xdb, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x63, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x73,
	0x49, 0x6e, 0x42, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x41, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x01, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x51, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x71, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x51, 0x66, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x71, 0x66, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x51, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x02, 0x71, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x62, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x02, 0x70, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x4d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x4d, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x62, 0x31, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x70, 0x62, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x42, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x42, 0x12, 0x10, 0x0a, 0x03, 0x50,
	0x62, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x62, 0x32, 0x12, 0x10, 0x0a,
	0x03, 0x50, 0x62, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x62, 0x72, 0x22,
	0xc0, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x6c, 0x63, 0x42, 0x6f, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x31, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x53, 0x69, 0x67,
	0x6d, 0x61, 0x4d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x53, 0x69, 0x67, 0x6d,
	0x61, 0x4d, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x12, 0x0c, 0x0a, 0x01,
	0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x53,
	0x69, 0x67, 0x6d, 0x61, 0x42, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x53,
	0x69, 0x67, 0x6d, 0x61, 0x42, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x53, 0x69, 0x67, 0x6d, 0x61,
	0x42, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x53, 0x69, 0x67, 0x6d, 0x61,
	0x42, 0x32, 0x22, 0x82, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x63, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x6b, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6d, 0x6b, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6b, 0x70, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x6d, 0x6b, 0x70, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x72, 0x65, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x72, 0x65, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x51,
	0x72, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x71, 0x72, 0x65, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x4d, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d,
	0x6d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x51, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x71, 0x6d, 0x61, 0x78, 0x22, 0xc4, 0x05, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x63,
	0x41, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x62, 0x30, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x63, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x64, 0x63, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x79,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x79, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x79,
	0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x79, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x4c,
	0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x6c, 0x62, 0x12, 0x0c, 0x0a, 0x01, 0x41,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x61, 0x12, 0x3c, 0x0a, 0x07, 0x66, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x41, 0x75,
	0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07,
	0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x31, 0x12, 0x3c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x6e, 0x67,
	0x65, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x41, 0x75, 0x78, 0x69,
	0x6c, 0x69, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x66, 0x6c,
	0x61, 0x6e, 0x67, 0x65, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x4d, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x4d, 0x1a, 0x92, 0x03, 0x0a, 0x06, 0x46, 0x6c,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x62,
	0x12, 0x0c, 0x0a, 0x01, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x53, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x78, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x78, 0x69, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0e, 0x0a, 0x02,
	0x6c, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x6c, 0x30, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x79, 0x6d, 0x64, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c, 0x79, 0x6d,
	0x64, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02,
	0x79, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x73, 0x69, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x70, 0x73, 0x69, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x6b, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x79, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x79, 0x66, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x79, 0x66, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x79, 0x66, 0x63, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x79, 0x66, 0x63, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x65, 0x74, 0x61,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x62, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x65, 0x74, 0x61, 0x54, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x65, 0x74,
	0x61, 0x54, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x74, 0x61, 0x55, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x62, 0x65, 0x74, 0x61, 0x55, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x74, 0x61,
	0x59, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x65, 0x74, 0x61, 0x59, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x65, 0x74, 0x61, 0x5a, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62,
	0x65, 0x74, 0x61, 0x5a, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x74, 0x61, 0x46, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x65, 0x74, 0x61, 0x46, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65,
	0x74, 0x61, 0x56, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x65, 0x74, 0x61, 0x56,
	0x12, 0x0c, 0x0a, 0x01, 0x66, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x66, 0x22, 0x97,
	0x01, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x63, 0x54, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x50, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x70, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x52, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x72, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x51, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x71, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x51, 0x66, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x71,
	0x66, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02,
	0x70, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x62, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x70, 0x62, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x62, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x70, 0x62, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x62, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x62, 0x72, 0x22, 0x27, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01,
	0x79, 0x22, 0xaa, 0x04, 0x0a, 0x14, 0x43, 0x61, 0x6c, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x43, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x63, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x7a,
	0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x64, 0x7a, 0x76, 0x12, 0x0e, 0x0a, 0x02,
	0x4d, 0x4d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x6d, 0x4d, 0x12, 0x10, 0x0a, 0x03,
	0x4d, 0x4d, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x4d, 0x6b, 0x12, 0x10,
	0x0a, 0x03, 0x4d, 0x70, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x70, 0x6b,
	0x12, 0x0e, 0x0a, 0x02, 0x4d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x6d, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69,
	0x67, 0x6d, 0x61, 0x4d, 0x30, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x69, 0x67,
	0x6d, 0x61, 0x4d, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x54, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x54, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6d, 0x61, 0x52, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x54, 0x70, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x54, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6d,
	0x61, 0x4b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4b,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x50, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x50, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69,
	0x67, 0x6d, 0x61, 0x50, 0x30, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x69, 0x67,
	0x6d, 0x61, 0x50, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x30, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x30, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69,
	0x67, 0x6d, 0x61, 0x4d, 0x6f, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x69,
	0x67, 0x6d, 0x61, 0x4d, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4b,
	0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4b, 0x70,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6d, 0x61,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x53,
	0x69, 0x67, 0x6d, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x6d,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x6d, 0x30, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x6d, 0x30, 0x22, 0xa4,
	0x05, 0x0a, 0x19, 0x43, 0x61, 0x6c, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x04,
	0x4d, 0x61, 0x78, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x31, 0x12, 0x2b, 0x0a, 0x04, 0x4d, 0x61, 0x78,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x6d, 0x61, 0x78, 0x32, 0x12, 0x2b, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x33, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6d,
	0x61, 0x78, 0x33, 0x12, 0x2b, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x34,
	0x12, 0x2b, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x35, 0x12, 0x2b, 0x0a,
	0x04, 0x4d, 0x61, 0x78, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x36, 0x12, 0x2b, 0x0a, 0x04, 0x4d, 0x61,
	0x78, 0x37, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x37, 0x12, 0x2b, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x38, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x6d, 0x61, 0x78, 0x38, 0x12, 0x2b, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x39, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6d, 0x61, 0x78,
	0x39, 0x12, 0x2d, 0x0a, 0x05, 0x4d, 0x61, 0x78, 0x31, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x31, 0x30,
	0x12, 0x2d, 0x0a, 0x05, 0x4d, 0x61, 0x78, 0x31, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x31, 0x31, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74,
	0x65, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x64, 0x54, 0x65, 0x74, 0x61, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x64, 0x54, 0x65, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x54, 0x65, 0x74, 0x61, 0x4b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x54, 0x65, 0x74, 0x61, 0x4b, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x65, 0x74, 0x61, 0x4b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x74, 0x65, 0x74, 0x61, 0x4b, 0x22, 0x57, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x63, 0x54, 0x69, 0x67,
	0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x51, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x71, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x62,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x70, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x62,
	0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x62, 0x31, 0x12, 0x10, 0x0a, 0x03,
	0x50, 0x62, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x62, 0x72, 0x22, 0xb3,
	0x0b, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x62,
	0x61, 0x73, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x73, 0x52, 0x05, 0x62, 0x61, 0x73, 0x69, 0x73, 0x12,
	0x3b, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0x95, 0x02, 0x0a,
	0x05, 0x42, 0x61, 0x73, 0x69, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x0b,
	0x64, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0d, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x42, 0x6f, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x42, 0x6f, 0x6c, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x49,
	0x6e, 0x42, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x62, 0x6f, 0x6c, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66,
	0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73,
	0x52, 0x0c, 0x62, 0x6f, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x34,
	0x0a, 0x06, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x06, 0x6d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x9d, 0x08, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x3d, 0x0a, 0x09, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x46, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x09, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79,
	0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x54, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x73, 0x52, 0x09, 0x74, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12,
	0x48, 0x0a, 0x0d, 0x62, 0x6f, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x31,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x0d, 0x62, 0x6f, 0x6c, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x31, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x07, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x31, 0x12, 0x54, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x31, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66,
	0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x73, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x31, 0x12, 0x63, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x31, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x73, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x46, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x31, 0x12, 0x49, 0x0a, 0x0d,
	0x74, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x54, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x61, 0x64,
	0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x0d, 0x74, 0x69, 0x67, 0x68, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x62, 0x6f, 0x6c, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f,
	0x6c, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x73, 0x52, 0x0d, 0x62, 0x6f, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x32, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73,
	0x52, 0x07, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x12, 0x54, 0x0a, 0x11, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x32, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x11, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x32, 0x12,
	0x63, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72,
	0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x16, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x32, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x0b, 0x64, 0x65,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0d, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x73, 0x49, 0x6e, 0x42, 0x6f, 0x6c, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x42, 0x6f, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x42,
	0x6f, 0x6c, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x57, 0x0a, 0x13, 0x44, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x62,
	0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x62, 0x30, 0x12, 0x10, 0x0a, 0x03, 0x44,
	0x63, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x63, 0x70, 0x12, 0x0e, 0x0a,
	0x02, 0x50, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x70, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x52, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x70, 0x22, 0xcb, 0x01,
	0x0a, 0x15, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x42, 0x6f, 0x6c, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x41, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x51, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x71, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x51, 0x66, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x71, 0x66, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x51, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x71, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x62, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x70, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x4d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x4d, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x62, 0x31, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x70, 0x62, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x62, 0x32, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x62, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x62, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x62, 0x72, 0x22, 0x8c, 0x01, 0x0a, 0x14,
	0x42, 0x6f, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x31, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x53, 0x69, 0x67,
	0x6d, 0x61, 0x4d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x53, 0x69, 0x67, 0x6d,
	0x61, 0x4d, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x12, 0x0c, 0x0a, 0x01,
	0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x22, 0x86, 0x01, 0x0a, 0x0e, 0x4d,
	0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x4d, 0x6b, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x6b, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x4d, 0x6b, 0x70, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x6b, 0x70, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x72, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x72, 0x65, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x51, 0x72, 0x65, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x71, 0x72, 0x65, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x4d,
	0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6d, 0x61, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x51, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x71,
	0x6d, 0x61, 0x78, 0x22, 0xbe, 0x04, 0x0a, 0x11, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72,
	0x79, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x62, 0x30, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x63, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x63, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x79,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x79, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x79,
	0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x79, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x4c,
	0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6c, 0x62, 0x12, 0x0c, 0x0a, 0x01, 0x41,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x61, 0x12, 0x40, 0x0a, 0x07, 0x66, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69,
	0x61, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x31, 0x12, 0x40, 0x0a, 0x07, 0x66,
	0x6c, 0x61, 0x6e, 0x67, 0x65, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66,
	0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x75, 0x78, 0x69,
	0x6c, 0x69, 0x61, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x2e, 0x46, 0x6c,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x32, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x61,
	0x6d, 0x6d, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x4d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x4d, 0x1a, 0x80, 0x02, 0x0a, 0x06, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0c, 0x0a, 0x01,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x62, 0x12, 0x0c, 0x0a, 0x01, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x01, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x53, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x69, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x78, 0x69, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x01, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x6c, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x79, 0x6d, 0x64, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x79, 0x6d, 0x64, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x66,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x79, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x73,
	0x69, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x73, 0x69, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x79, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x79, 0x6b, 0x12, 0x10,
	0x0a, 0x03, 0x79, 0x66, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x79, 0x66, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x79, 0x66, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x79,
	0x66, 0x63, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x65, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x65, 0x74, 0x61, 0x22, 0x9b, 0x01, 0x0a, 0x11, 0x54, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x70, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x52, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x51, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x71, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x51, 0x66,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x71, 0x66, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x50, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x70, 0x62, 0x12, 0x10, 0x0a, 0x03,
	0x50, 0x62, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x62, 0x31, 0x12, 0x10,
	0x0a, 0x03, 0x50, 0x62, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x62, 0x32,
	0x12, 0x10, 0x0a, 0x03, 0x50, 0x62, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70,
	0x62, 0x72, 0x22, 0xd0, 0x03, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x43, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x66, 0x12,
	0x10, 0x0a, 0x03, 0x44, 0x7a, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x7a,
	0x76, 0x12, 0x0e, 0x0a, 0x02, 0x4d, 0x4d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6d,
	0x4d, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x4d, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x4d, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x70, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x70, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x4d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x31,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x31, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x30, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67,
	0x6d, 0x61, 0x54, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6d, 0x61,
	0x54, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67,
	0x6d, 0x61, 0x54, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d,
	0x61, 0x54, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x70, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x52, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x69, 0x67, 0x6d, 0x61, 0x4b, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x50, 0x31,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x50, 0x31, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x50, 0x30, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x50, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67,
	0x6d, 0x61, 0x4d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6d,
	0x61, 0x4d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x30, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x70, 0x30, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x6f, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4d, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x69, 0x67, 0x6d, 0x61, 0x4b, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69,
	0x67, 0x6d, 0x61, 0x4b, 0x70, 0x22, 0x2f, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x01, 0x79, 0x22, 0x90, 0x06, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x31, 0x12, 0x33, 0x0a,
	0x04, 0x4d, 0x61, 0x78, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x04, 0x6d, 0x61,
	0x78, 0x32, 0x12, 0x33, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x73, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x33, 0x12, 0x33, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x34, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x34, 0x12, 0x33, 0x0a, 0x04,
	0x4d, 0x61, 0x78, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x04, 0x6d, 0x61, 0x78,
	0x35, 0x12, 0x33, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73,
	0x52, 0x04, 0x6d, 0x61, 0x78, 0x36, 0x12, 0x33, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x37, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x37, 0x12, 0x33, 0x0a, 0x04, 0x4d,
	0x61, 0x78, 0x38, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x38,
	0x12, 0x33, 0x0a, 0x04, 0x4d, 0x61, 0x78, 0x39, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52,
	0x04, 0x6d, 0x61, 0x78, 0x39, 0x12, 0x35, 0x0a, 0x05, 0x4d, 0x61, 0x78, 0x31, 0x30, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x31, 0x30, 0x12, 0x35, 0x0a, 0x05,
	0x4d, 0x61, 0x78, 0x31, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x05, 0x6d, 0x61,
	0x78, 0x31, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x64, 0x54,
	0x65, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x64,
	0x54, 0x65, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x54, 0x65, 0x74, 0x61,
	0x4b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x54, 0x65,
	0x74, 0x61, 0x4b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x74, 0x61, 0x4b, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x74, 0x61, 0x4b, 0x22, 0x5b, 0x0a, 0x15, 0x54, 0x69, 0x67,
	0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x51, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x71, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x70, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x62, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x70, 0x62, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x62, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x70, 0x62, 0x72, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x6c, 0x65, 0x78, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x32, 0x37,
	0x32, 0x2f, 0x73, 0x65, 0x61, 0x6c, 0x75, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_moment_calc_api_flange_model_proto_rawDescOnce sync.Once
	file_moment_calc_api_flange_model_proto_rawDescData = file_moment_calc_api_flange_model_proto_rawDesc
)

func file_moment_calc_api_flange_model_proto_rawDescGZIP() []byte {
	file_moment_calc_api_flange_model_proto_rawDescOnce.Do(func() {
		file_moment_calc_api_flange_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_moment_calc_api_flange_model_proto_rawDescData)
	})
	return file_moment_calc_api_flange_model_proto_rawDescData
}

var file_moment_calc_api_flange_model_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_moment_calc_api_flange_model_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_moment_calc_api_flange_model_proto_goTypes = []interface{}{
	(FlangeData_Type)(0),                  // 0: flange_model.FlangeData.Type
	(GasketData_Type)(0),                  // 1: flange_model.GasketData.Type
	(*MaterialData)(nil),                  // 2: flange_model.MaterialData
	(*FlangeData)(nil),                    // 3: flange_model.FlangeData
	(*BoltData)(nil),                      // 4: flange_model.BoltData
	(*WasherData)(nil),                    // 5: flange_model.WasherData
	(*GasketData)(nil),                    // 6: flange_model.GasketData
	(*EmbedData)(nil),                     // 7: flange_model.EmbedData
	(*DataResult)(nil),                    // 8: flange_model.DataResult
	(*FlangeResult)(nil),                  // 9: flange_model.FlangeResult
	(*BoltResult)(nil),                    // 10: flange_model.BoltResult
	(*GasketResult)(nil),                  // 11: flange_model.GasketResult
	(*EmbedResult)(nil),                   // 12: flange_model.EmbedResult
	(*WasherResult)(nil),                  // 13: flange_model.WasherResult
	(*Calculated)(nil),                    // 14: flange_model.Calculated
	(*CalcDeformation)(nil),               // 15: flange_model.CalcDeformation
	(*CalcForcesInBolts)(nil),             // 16: flange_model.CalcForcesInBolts
	(*CalcBoltStrength)(nil),              // 17: flange_model.CalcBoltStrength
	(*CalcMoment)(nil),                    // 18: flange_model.CalcMoment
	(*CalcAuxiliary)(nil),                 // 19: flange_model.CalcAuxiliary
	(*CalcTightness)(nil),                 // 20: flange_model.CalcTightness
	(*Condition)(nil),                     // 21: flange_model.Condition
	(*CalcStaticResistance)(nil),          // 22: flange_model.CalcStaticResistance
	(*CalcConditionsForStrength)(nil),     // 23: flange_model.CalcConditionsForStrength
	(*CalcTightnessLoad)(nil),             // 24: flange_model.CalcTightnessLoad
	(*Formulas)(nil),                      // 25: flange_model.Formulas
	(*DeformationFormulas)(nil),           // 26: flange_model.DeformationFormulas
	(*ForcesInBoltsFormulas)(nil),         // 27: flange_model.ForcesInBoltsFormulas
	(*BoltStrengthFormulas)(nil),          // 28: flange_model.BoltStrengthFormulas
	(*MomentFormulas)(nil),                // 29: flange_model.MomentFormulas
	(*AuxiliaryFormulas)(nil),             // 30: flange_model.AuxiliaryFormulas
	(*TightnessFormulas)(nil),             // 31: flange_model.TightnessFormulas
	(*StaticResistanceFormulas)(nil),      // 32: flange_model.StaticResistanceFormulas
	(*ConditionFormulas)(nil),             // 33: flange_model.ConditionFormulas
	(*ConditionsForStrengthFormulas)(nil), // 34: flange_model.ConditionsForStrengthFormulas
	(*TightnessLoadFormulas)(nil),         // 35: flange_model.TightnessLoadFormulas
	(*FlangeData_Size)(nil),               // 36: flange_model.FlangeData.Size
	(*GasketData_Data)(nil),               // 37: flange_model.GasketData.Data
	(*FlangeResult_Ring)(nil),             // 38: flange_model.FlangeResult.Ring
	(*Calculated_Basis)(nil),              // 39: flange_model.Calculated.Basis
	(*Calculated_Strength)(nil),           // 40: flange_model.Calculated.Strength
	(*CalcAuxiliary_Flange)(nil),          // 41: flange_model.CalcAuxiliary.Flange
	(*Formulas_Basis)(nil),                // 42: flange_model.Formulas.Basis
	(*Formulas_Strength)(nil),             // 43: flange_model.Formulas.Strength
	(*AuxiliaryFormulas_Flange)(nil),      // 44: flange_model.AuxiliaryFormulas.Flange
}
var file_moment_calc_api_flange_model_proto_depIdxs = []int32{
	0,  // 0: flange_model.FlangeData.type:type_name -> flange_model.FlangeData.Type
	36, // 1: flange_model.FlangeData.size:type_name -> flange_model.FlangeData.Size
	2,  // 2: flange_model.FlangeData.material:type_name -> flange_model.MaterialData
	2,  // 3: flange_model.FlangeData.ringMaterial:type_name -> flange_model.MaterialData
	2,  // 4: flange_model.BoltData.material:type_name -> flange_model.MaterialData
	2,  // 5: flange_model.WasherData.material:type_name -> flange_model.MaterialData
	37, // 6: flange_model.GasketData.data:type_name -> flange_model.GasketData.Data
	2,  // 7: flange_model.EmbedData.material:type_name -> flange_model.MaterialData
	38, // 8: flange_model.FlangeResult.ring:type_name -> flange_model.FlangeResult.Ring
	39, // 9: flange_model.Calculated.basis:type_name -> flange_model.Calculated.Basis
	40, // 10: flange_model.Calculated.strength:type_name -> flange_model.Calculated.Strength
	41, // 11: flange_model.CalcAuxiliary.flange1:type_name -> flange_model.CalcAuxiliary.Flange
	41, // 12: flange_model.CalcAuxiliary.flange2:type_name -> flange_model.CalcAuxiliary.Flange
	21, // 13: flange_model.CalcConditionsForStrength.Max1:type_name -> flange_model.Condition
	21, // 14: flange_model.CalcConditionsForStrength.Max2:type_name -> flange_model.Condition
	21, // 15: flange_model.CalcConditionsForStrength.Max3:type_name -> flange_model.Condition
	21, // 16: flange_model.CalcConditionsForStrength.Max4:type_name -> flange_model.Condition
	21, // 17: flange_model.CalcConditionsForStrength.Max5:type_name -> flange_model.Condition
	21, // 18: flange_model.CalcConditionsForStrength.Max6:type_name -> flange_model.Condition
	21, // 19: flange_model.CalcConditionsForStrength.Max7:type_name -> flange_model.Condition
	21, // 20: flange_model.CalcConditionsForStrength.Max8:type_name -> flange_model.Condition
	21, // 21: flange_model.CalcConditionsForStrength.Max9:type_name -> flange_model.Condition
	21, // 22: flange_model.CalcConditionsForStrength.Max10:type_name -> flange_model.Condition
	21, // 23: flange_model.CalcConditionsForStrength.Max11:type_name -> flange_model.Condition
	21, // 24: flange_model.CalcConditionsForStrength.condTeta:type_name -> flange_model.Condition
	21, // 25: flange_model.CalcConditionsForStrength.condTetaK:type_name -> flange_model.Condition
	42, // 26: flange_model.Formulas.basis:type_name -> flange_model.Formulas.Basis
	43, // 27: flange_model.Formulas.strength:type_name -> flange_model.Formulas.Strength
	44, // 28: flange_model.AuxiliaryFormulas.flange1:type_name -> flange_model.AuxiliaryFormulas.Flange
	44, // 29: flange_model.AuxiliaryFormulas.flange2:type_name -> flange_model.AuxiliaryFormulas.Flange
	33, // 30: flange_model.ConditionsForStrengthFormulas.Max1:type_name -> flange_model.ConditionFormulas
	33, // 31: flange_model.ConditionsForStrengthFormulas.Max2:type_name -> flange_model.ConditionFormulas
	33, // 32: flange_model.ConditionsForStrengthFormulas.Max3:type_name -> flange_model.ConditionFormulas
	33, // 33: flange_model.ConditionsForStrengthFormulas.Max4:type_name -> flange_model.ConditionFormulas
	33, // 34: flange_model.ConditionsForStrengthFormulas.Max5:type_name -> flange_model.ConditionFormulas
	33, // 35: flange_model.ConditionsForStrengthFormulas.Max6:type_name -> flange_model.ConditionFormulas
	33, // 36: flange_model.ConditionsForStrengthFormulas.Max7:type_name -> flange_model.ConditionFormulas
	33, // 37: flange_model.ConditionsForStrengthFormulas.Max8:type_name -> flange_model.ConditionFormulas
	33, // 38: flange_model.ConditionsForStrengthFormulas.Max9:type_name -> flange_model.ConditionFormulas
	33, // 39: flange_model.ConditionsForStrengthFormulas.Max10:type_name -> flange_model.ConditionFormulas
	33, // 40: flange_model.ConditionsForStrengthFormulas.Max11:type_name -> flange_model.ConditionFormulas
	33, // 41: flange_model.ConditionsForStrengthFormulas.condTeta:type_name -> flange_model.ConditionFormulas
	33, // 42: flange_model.ConditionsForStrengthFormulas.condTetaK:type_name -> flange_model.ConditionFormulas
	1,  // 43: flange_model.GasketData.Data.type:type_name -> flange_model.GasketData.Type
	15, // 44: flange_model.Calculated.Basis.deformation:type_name -> flange_model.CalcDeformation
	16, // 45: flange_model.Calculated.Basis.forcesInBolts:type_name -> flange_model.CalcForcesInBolts
	17, // 46: flange_model.Calculated.Basis.boltStrength:type_name -> flange_model.CalcBoltStrength
	18, // 47: flange_model.Calculated.Basis.moment:type_name -> flange_model.CalcMoment
	19, // 48: flange_model.Calculated.Strength.auxiliary:type_name -> flange_model.CalcAuxiliary
	20, // 49: flange_model.Calculated.Strength.tightness:type_name -> flange_model.CalcTightness
	17, // 50: flange_model.Calculated.Strength.boltStrength1:type_name -> flange_model.CalcBoltStrength
	18, // 51: flange_model.Calculated.Strength.moment1:type_name -> flange_model.CalcMoment
	22, // 52: flange_model.Calculated.Strength.staticResistance1:type_name -> flange_model.CalcStaticResistance
	23, // 53: flange_model.Calculated.Strength.conditionsForStrength1:type_name -> flange_model.CalcConditionsForStrength
	24, // 54: flange_model.Calculated.Strength.tightnessLoad:type_name -> flange_model.CalcTightnessLoad
	17, // 55: flange_model.Calculated.Strength.boltStrength2:type_name -> flange_model.CalcBoltStrength
	18, // 56: flange_model.Calculated.Strength.moment2:type_name -> flange_model.CalcMoment
	22, // 57: flange_model.Calculated.Strength.staticResistance2:type_name -> flange_model.CalcStaticResistance
	23, // 58: flange_model.Calculated.Strength.conditionsForStrength2:type_name -> flange_model.CalcConditionsForStrength
	15, // 59: flange_model.Calculated.Strength.deformation:type_name -> flange_model.CalcDeformation
	16, // 60: flange_model.Calculated.Strength.forcesInBolts:type_name -> flange_model.CalcForcesInBolts
	18, // 61: flange_model.Calculated.Strength.finalMoment:type_name -> flange_model.CalcMoment
	26, // 62: flange_model.Formulas.Basis.deformation:type_name -> flange_model.DeformationFormulas
	27, // 63: flange_model.Formulas.Basis.forcesInBolts:type_name -> flange_model.ForcesInBoltsFormulas
	28, // 64: flange_model.Formulas.Basis.boltStrength:type_name -> flange_model.BoltStrengthFormulas
	29, // 65: flange_model.Formulas.Basis.moment:type_name -> flange_model.MomentFormulas
	30, // 66: flange_model.Formulas.Strength.auxiliary:type_name -> flange_model.AuxiliaryFormulas
	31, // 67: flange_model.Formulas.Strength.tightness:type_name -> flange_model.TightnessFormulas
	28, // 68: flange_model.Formulas.Strength.boltStrength1:type_name -> flange_model.BoltStrengthFormulas
	29, // 69: flange_model.Formulas.Strength.moment1:type_name -> flange_model.MomentFormulas
	32, // 70: flange_model.Formulas.Strength.staticResistance1:type_name -> flange_model.StaticResistanceFormulas
	34, // 71: flange_model.Formulas.Strength.conditionsForStrength1:type_name -> flange_model.ConditionsForStrengthFormulas
	35, // 72: flange_model.Formulas.Strength.tightnessLoad:type_name -> flange_model.TightnessLoadFormulas
	28, // 73: flange_model.Formulas.Strength.boltStrength2:type_name -> flange_model.BoltStrengthFormulas
	29, // 74: flange_model.Formulas.Strength.moment2:type_name -> flange_model.MomentFormulas
	32, // 75: flange_model.Formulas.Strength.staticResistance2:type_name -> flange_model.StaticResistanceFormulas
	34, // 76: flange_model.Formulas.Strength.conditionsForStrength2:type_name -> flange_model.ConditionsForStrengthFormulas
	26, // 77: flange_model.Formulas.Strength.deformation:type_name -> flange_model.DeformationFormulas
	27, // 78: flange_model.Formulas.Strength.forcesInBolts:type_name -> flange_model.ForcesInBoltsFormulas
	29, // 79: flange_model.Formulas.Strength.finalMoment:type_name -> flange_model.MomentFormulas
	80, // [80:80] is the sub-list for method output_type
	80, // [80:80] is the sub-list for method input_type
	80, // [80:80] is the sub-list for extension type_name
	80, // [80:80] is the sub-list for extension extendee
	0,  // [0:80] is the sub-list for field type_name
}

func init() { file_moment_calc_api_flange_model_proto_init() }
func file_moment_calc_api_flange_model_proto_init() {
	if File_moment_calc_api_flange_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_moment_calc_api_flange_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlangeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoltData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WasherData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlangeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoltResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasketResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WasherResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Calculated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcDeformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcForcesInBolts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcBoltStrength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcMoment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcAuxiliary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcTightness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcStaticResistance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcConditionsForStrength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcTightnessLoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Formulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeformationFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForcesInBoltsFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoltStrengthFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MomentFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuxiliaryFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TightnessFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticResistanceFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionsForStrengthFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TightnessLoadFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlangeData_Size); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasketData_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlangeResult_Ring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Calculated_Basis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Calculated_Strength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcAuxiliary_Flange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Formulas_Basis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Formulas_Strength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_flange_model_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuxiliaryFormulas_Flange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_moment_calc_api_flange_model_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_moment_calc_api_flange_model_proto_goTypes,
		DependencyIndexes: file_moment_calc_api_flange_model_proto_depIdxs,
		EnumInfos:         file_moment_calc_api_flange_model_proto_enumTypes,
		MessageInfos:      file_moment_calc_api_flange_model_proto_msgTypes,
	}.Build()
	File_moment_calc_api_flange_model_proto = out.File
	file_moment_calc_api_flange_model_proto_rawDesc = nil
	file_moment_calc_api_flange_model_proto_goTypes = nil
	file_moment_calc_api_flange_model_proto_depIdxs = nil
}
