// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: moment/calc_api/dev_cooling_model.proto

package dev_cooling_model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GasketData_Type int32

const (
	GasketData_Soft  GasketData_Type = 0
	GasketData_Oval  GasketData_Type = 1
	GasketData_Metal GasketData_Type = 2
)

// Enum value maps for GasketData_Type.
var (
	GasketData_Type_name = map[int32]string{
		0: "Soft",
		1: "Oval",
		2: "Metal",
	}
	GasketData_Type_value = map[string]int32{
		"Soft":  0,
		"Oval":  1,
		"Metal": 2,
	}
)

func (x GasketData_Type) Enum() *GasketData_Type {
	p := new(GasketData_Type)
	*p = x
	return p
}

func (x GasketData_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GasketData_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_dev_cooling_model_proto_enumTypes[0].Descriptor()
}

func (GasketData_Type) Type() protoreflect.EnumType {
	return &file_moment_calc_api_dev_cooling_model_proto_enumTypes[0]
}

func (x GasketData_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GasketData_Type.Descriptor instead.
func (GasketData_Type) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{5, 0}
}

type MaterialData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title     string  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Epsilon   float64 `protobuf:"fixed64,2,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	SigmaAt20 float64 `protobuf:"fixed64,3,opt,name=sigmaAt20,proto3" json:"sigmaAt20,omitempty"`
	Sigma     float64 `protobuf:"fixed64,4,opt,name=sigma,proto3" json:"sigma,omitempty"`
}

func (x *MaterialData) Reset() {
	*x = MaterialData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialData) ProtoMessage() {}

func (x *MaterialData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialData.ProtoReflect.Descriptor instead.
func (*MaterialData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{0}
}

func (x *MaterialData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MaterialData) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *MaterialData) GetSigmaAt20() float64 {
	if x != nil {
		return x.SigmaAt20
	}
	return 0
}

func (x *MaterialData) GetSigma() float64 {
	if x != nil {
		return x.Sigma
	}
	return 0
}

type CapData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// s4 - Толщина донышка крышки
	BottomThick float64 `protobuf:"fixed64,1,opt,name=bottomThick,proto3" json:"bottomThick,omitempty"`
	// s5 - Толщина стенки крышки в месте присоединения к фланцу
	WallThick float64 `protobuf:"fixed64,2,opt,name=wallThick,proto3" json:"wallThick,omitempty"`
	// s6 - Толщина фланца крышки
	FlangeThick float64 `protobuf:"fixed64,3,opt,name=flangeThick,proto3" json:"flangeThick,omitempty"`
	// s7 - Толщина боковой стенки
	SideWallThick float64 `protobuf:"fixed64,4,opt,name=sideWallThick,proto3" json:"sideWallThick,omitempty"`
	// B0 - Внутренний размер камеры в поперечном направлении
	InnerSize float64 `protobuf:"fixed64,5,opt,name=innerSize,proto3" json:"innerSize,omitempty"`
	// B4 - Наружный размер камеры в поперечном направлении
	OuterSize float64 `protobuf:"fixed64,6,opt,name=outerSize,proto3" json:"outerSize,omitempty"`
	// H - Глубина камеры (крышки)
	Depth float64 `protobuf:"fixed64,7,opt,name=depth,proto3" json:"depth,omitempty"`
	// L0 - Внутренний размер камеры в продольном направлении
	L float64 `protobuf:"fixed64,8,opt,name=L,json=l,proto3" json:"L,omitempty"`
	// φ - Коэффициент прочности сварного шва
	Strength float64 `protobuf:"fixed64,9,opt,name=strength,proto3" json:"strength,omitempty"`
	// cк - Прибавка на коррозию
	Corrosion float64 `protobuf:"fixed64,10,opt,name=corrosion,proto3" json:"corrosion,omitempty"`
	// R - Радиус гиба в углу крышки камеры
	Radius float64 `protobuf:"fixed64,11,opt,name=radius,proto3" json:"radius,omitempty"`
	// Id Материала крышки
	MarkId   string        `protobuf:"bytes,12,opt,name=markId,proto3" json:"markId,omitempty"`
	Material *MaterialData `protobuf:"bytes,13,opt,name=material,proto3" json:"material,omitempty"`
}

func (x *CapData) Reset() {
	*x = CapData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapData) ProtoMessage() {}

func (x *CapData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapData.ProtoReflect.Descriptor instead.
func (*CapData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{1}
}

func (x *CapData) GetBottomThick() float64 {
	if x != nil {
		return x.BottomThick
	}
	return 0
}

func (x *CapData) GetWallThick() float64 {
	if x != nil {
		return x.WallThick
	}
	return 0
}

func (x *CapData) GetFlangeThick() float64 {
	if x != nil {
		return x.FlangeThick
	}
	return 0
}

func (x *CapData) GetSideWallThick() float64 {
	if x != nil {
		return x.SideWallThick
	}
	return 0
}

func (x *CapData) GetInnerSize() float64 {
	if x != nil {
		return x.InnerSize
	}
	return 0
}

func (x *CapData) GetOuterSize() float64 {
	if x != nil {
		return x.OuterSize
	}
	return 0
}

func (x *CapData) GetDepth() float64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *CapData) GetL() float64 {
	if x != nil {
		return x.L
	}
	return 0
}

func (x *CapData) GetStrength() float64 {
	if x != nil {
		return x.Strength
	}
	return 0
}

func (x *CapData) GetCorrosion() float64 {
	if x != nil {
		return x.Corrosion
	}
	return 0
}

func (x *CapData) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *CapData) GetMarkId() string {
	if x != nil {
		return x.MarkId
	}
	return ""
}

func (x *CapData) GetMaterial() *MaterialData {
	if x != nil {
		return x.Material
	}
	return nil
}

type TubeSheetData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// s1 - Толщина трубной решетки в пределах зоны перфорации
	ZoneThick float64 `protobuf:"fixed64,1,opt,name=zoneThick,proto3" json:"zoneThick,omitempty"`
	// s2 - Толщина трубной решетки в месте уплотнения
	PlaceThick float64 `protobuf:"fixed64,2,opt,name=placeThick,proto3" json:"placeThick,omitempty"`
	// s3 - Толщина трубной решетки вне зоны уплотнения
	OutZoneThick float64 `protobuf:"fixed64,3,opt,name=outZoneThick,proto3" json:"outZoneThick,omitempty"`
	// B1 - Ширина зоны решетки толщиной s1
	Width float64 `protobuf:"fixed64,4,opt,name=width,proto3" json:"width,omitempty"`
	// t1 - Шаг отверстий под трубы в продольном направлении
	StepLong float64 `protobuf:"fixed64,5,opt,name=stepLong,proto3" json:"stepLong,omitempty"`
	// t2 - Шаг отверстий под трубы в поперечном направлении
	StepTrans float64 `protobuf:"fixed64,6,opt,name=stepTrans,proto3" json:"stepTrans,omitempty"`
	// z - Число рядов труб в поперечном направлении
	Count int32 `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	// d0 - Диаметр трубных отверстий в решетках
	Diameter float64 `protobuf:"fixed64,8,opt,name=diameter,proto3" json:"diameter,omitempty"`
	// ср - Прибавка на коррозию
	Corrosion float64 `protobuf:"fixed64,9,opt,name=corrosion,proto3" json:"corrosion,omitempty"`
	// Id Материала трубной решетки
	MarkId   string        `protobuf:"bytes,10,opt,name=markId,proto3" json:"markId,omitempty"`
	Material *MaterialData `protobuf:"bytes,11,opt,name=material,proto3" json:"material,omitempty"`
}

func (x *TubeSheetData) Reset() {
	*x = TubeSheetData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TubeSheetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TubeSheetData) ProtoMessage() {}

func (x *TubeSheetData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TubeSheetData.ProtoReflect.Descriptor instead.
func (*TubeSheetData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{2}
}

func (x *TubeSheetData) GetZoneThick() float64 {
	if x != nil {
		return x.ZoneThick
	}
	return 0
}

func (x *TubeSheetData) GetPlaceThick() float64 {
	if x != nil {
		return x.PlaceThick
	}
	return 0
}

func (x *TubeSheetData) GetOutZoneThick() float64 {
	if x != nil {
		return x.OutZoneThick
	}
	return 0
}

func (x *TubeSheetData) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *TubeSheetData) GetStepLong() float64 {
	if x != nil {
		return x.StepLong
	}
	return 0
}

func (x *TubeSheetData) GetStepTrans() float64 {
	if x != nil {
		return x.StepTrans
	}
	return 0
}

func (x *TubeSheetData) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TubeSheetData) GetDiameter() float64 {
	if x != nil {
		return x.Diameter
	}
	return 0
}

func (x *TubeSheetData) GetCorrosion() float64 {
	if x != nil {
		return x.Corrosion
	}
	return 0
}

func (x *TubeSheetData) GetMarkId() string {
	if x != nil {
		return x.MarkId
	}
	return ""
}

func (x *TubeSheetData) GetMaterial() *MaterialData {
	if x != nil {
		return x.Material
	}
	return nil
}

type TubeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// L - Длина труб
	Length float64 `protobuf:"fixed64,1,opt,name=length,proto3" json:"length,omitempty"`
	// Lк - Приведенная длина труб при продольном изгибе
	ReducedLength float64 `protobuf:"fixed64,2,opt,name=reducedLength,proto3" json:"reducedLength,omitempty"`
	// dТ - Наружный диаметр трубы
	Diameter float64 `protobuf:"fixed64,3,opt,name=diameter,proto3" json:"diameter,omitempty"`
	// sT - Толщина стенки трубы
	Thickness float64 `protobuf:"fixed64,4,opt,name=thickness,proto3" json:"thickness,omitempty"`
	// сT - Прибавка на коррозию
	Corrosion float64 `protobuf:"fixed64,5,opt,name=corrosion,proto3" json:"corrosion,omitempty"`
	// l0 - Глубина развальцовки
	Depth float64 `protobuf:"fixed64,6,opt,name=depth,proto3" json:"depth,omitempty"`
	// aT - Размер сварного шва приварки труб
	Size float64 `protobuf:"fixed64,7,opt,name=size,proto3" json:"size,omitempty"`
	// Id Материала труб
	MarkId   string        `protobuf:"bytes,8,opt,name=markId,proto3" json:"markId,omitempty"`
	Material *MaterialData `protobuf:"bytes,9,opt,name=material,proto3" json:"material,omitempty"`
}

func (x *TubeData) Reset() {
	*x = TubeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TubeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TubeData) ProtoMessage() {}

func (x *TubeData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TubeData.ProtoReflect.Descriptor instead.
func (*TubeData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{3}
}

func (x *TubeData) GetLength() float64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *TubeData) GetReducedLength() float64 {
	if x != nil {
		return x.ReducedLength
	}
	return 0
}

func (x *TubeData) GetDiameter() float64 {
	if x != nil {
		return x.Diameter
	}
	return 0
}

func (x *TubeData) GetThickness() float64 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

func (x *TubeData) GetCorrosion() float64 {
	if x != nil {
		return x.Corrosion
	}
	return 0
}

func (x *TubeData) GetDepth() float64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *TubeData) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TubeData) GetMarkId() string {
	if x != nil {
		return x.MarkId
	}
	return ""
}

func (x *TubeData) GetMaterial() *MaterialData {
	if x != nil {
		return x.Material
	}
	return nil
}

type BoltData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// B3 - Расстояние между осями болтов/шпилек в поперечном направлении
	Distance float64 `protobuf:"fixed64,1,opt,name=distance,proto3" json:"distance,omitempty"`
	// n - Количество болтов/шпилек
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// Id болта
	BoltId string `protobuf:"bytes,3,opt,name=boltId,proto3" json:"boltId,omitempty"`
	// lб - Длина болта/шпильки между опорными поверхностями
	Lenght float64 `protobuf:"fixed64,4,opt,name=lenght,proto3" json:"lenght,omitempty"`
	// Id Материала болтов
	MarkId   string        `protobuf:"bytes,5,opt,name=markId,proto3" json:"markId,omitempty"`
	Material *MaterialData `protobuf:"bytes,6,opt,name=material,proto3" json:"material,omitempty"`
	// d - Наружный диаметр болта/шпильки
	Diameter float64 `protobuf:"fixed64,7,opt,name=diameter,proto3" json:"diameter,omitempty"`
	// fб - Площадь болта/шпильки
	Area float64 `protobuf:"fixed64,8,opt,name=area,proto3" json:"area,omitempty"`
}

func (x *BoltData) Reset() {
	*x = BoltData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoltData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoltData) ProtoMessage() {}

func (x *BoltData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoltData.ProtoReflect.Descriptor instead.
func (*BoltData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{4}
}

func (x *BoltData) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *BoltData) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BoltData) GetBoltId() string {
	if x != nil {
		return x.BoltId
	}
	return ""
}

func (x *BoltData) GetLenght() float64 {
	if x != nil {
		return x.Lenght
	}
	return 0
}

func (x *BoltData) GetMarkId() string {
	if x != nil {
		return x.MarkId
	}
	return ""
}

func (x *BoltData) GetMaterial() *MaterialData {
	if x != nil {
		return x.Material
	}
	return nil
}

func (x *BoltData) GetDiameter() float64 {
	if x != nil {
		return x.Diameter
	}
	return 0
}

func (x *BoltData) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

type GasketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id прокладки
	GasketId string `protobuf:"bytes,1,opt,name=gasketId,proto3" json:"gasketId,omitempty"`
	// Id среды
	EnvId string `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	// Толщина прокладки
	Thickness float64 `protobuf:"fixed64,3,opt,name=thickness,proto3" json:"thickness,omitempty"`
	// bp - Ширина прокладки
	Width float64 `protobuf:"fixed64,4,opt,name=width,proto3" json:"width,omitempty"`
	// L2 - Размер прокладки в продольном направлении
	SizeLong float64 `protobuf:"fixed64,5,opt,name=sizeLong,proto3" json:"sizeLong,omitempty"`
	// B2 - Размер прокладки в поперечном направление
	SizeTrans float64 `protobuf:"fixed64,6,opt,name=sizeTrans,proto3" json:"sizeTrans,omitempty"`
	// данные для не стандартной прокладки
	Data *GasketData_Data `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GasketData) Reset() {
	*x = GasketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasketData) ProtoMessage() {}

func (x *GasketData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasketData.ProtoReflect.Descriptor instead.
func (*GasketData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{5}
}

func (x *GasketData) GetGasketId() string {
	if x != nil {
		return x.GasketId
	}
	return ""
}

func (x *GasketData) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *GasketData) GetThickness() float64 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

func (x *GasketData) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *GasketData) GetSizeLong() float64 {
	if x != nil {
		return x.SizeLong
	}
	return 0
}

func (x *GasketData) GetSizeTrans() float64 {
	if x != nil {
		return x.SizeTrans
	}
	return 0
}

func (x *GasketData) GetData() *GasketData_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type DataResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Расчетное давление
	Pressure float64 `protobuf:"fixed64,1,opt,name=pressure,proto3" json:"pressure,omitempty"`
	// Расчетная температура
	Temp float64 `protobuf:"fixed64,2,opt,name=temp,proto3" json:"temp,omitempty"`
	// Способ крепления труб
	Method string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	// Тип соединения
	TypeBolt string `protobuf:"bytes,4,opt,name=typeBolt,proto3" json:"typeBolt,omitempty"`
	// Способ крепления труб в трубной решетке
	Mounting string `protobuf:"bytes,5,opt,name=mounting,proto3" json:"mounting,omitempty"`
	// Тип крепления труб в трубной решетке
	TypeMounting string `protobuf:"bytes,6,opt,name=typeMounting,proto3" json:"typeMounting,omitempty"`
	// Схема камеры аппарата воздушного охлаждения
	CameraDiagram string `protobuf:"bytes,7,opt,name=cameraDiagram,proto3" json:"cameraDiagram,omitempty"`
	// Схема размещения отверстий
	Layout string `protobuf:"bytes,8,opt,name=layout,proto3" json:"layout,omitempty"`
}

func (x *DataResult) Reset() {
	*x = DataResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataResult) ProtoMessage() {}

func (x *DataResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataResult.ProtoReflect.Descriptor instead.
func (*DataResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{6}
}

func (x *DataResult) GetPressure() float64 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *DataResult) GetTemp() float64 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *DataResult) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *DataResult) GetTypeBolt() string {
	if x != nil {
		return x.TypeBolt
	}
	return ""
}

func (x *DataResult) GetMounting() string {
	if x != nil {
		return x.Mounting
	}
	return ""
}

func (x *DataResult) GetTypeMounting() string {
	if x != nil {
		return x.TypeMounting
	}
	return ""
}

func (x *DataResult) GetCameraDiagram() string {
	if x != nil {
		return x.CameraDiagram
	}
	return ""
}

func (x *DataResult) GetLayout() string {
	if x != nil {
		return x.Layout
	}
	return ""
}

type CapResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// s4 - Толщина донышка крышки
	BottomThick float64 `protobuf:"fixed64,1,opt,name=bottomThick,proto3" json:"bottomThick,omitempty"`
	// s5 - Толщина стенки крышки в месте присоединения к фланцу
	WallThick float64 `protobuf:"fixed64,2,opt,name=wallThick,proto3" json:"wallThick,omitempty"`
	// s6 - Толщина фланца крышки
	FlangeThick float64 `protobuf:"fixed64,3,opt,name=flangeThick,proto3" json:"flangeThick,omitempty"`
	// s7 - Толщина боковой стенки
	SideWallThick float64 `protobuf:"fixed64,4,opt,name=sideWallThick,proto3" json:"sideWallThick,omitempty"`
	// B0 - Внутренний размер камеры в поперечном направлении
	InnerSize float64 `protobuf:"fixed64,5,opt,name=innerSize,proto3" json:"innerSize,omitempty"`
	// B4 - Наружный размер камеры в поперечном направлении
	OuterSize float64 `protobuf:"fixed64,6,opt,name=outerSize,proto3" json:"outerSize,omitempty"`
	// H - Глубина камеры (крышки)
	Depth float64 `protobuf:"fixed64,7,opt,name=depth,proto3" json:"depth,omitempty"`
	// L0 - Внутренний размер камеры в продольном направлении
	L float64 `protobuf:"fixed64,8,opt,name=L,json=l,proto3" json:"L,omitempty"`
	// φ - Коэффициент прочности сварного шва
	Strength float64 `protobuf:"fixed64,9,opt,name=strength,proto3" json:"strength,omitempty"`
	// cк - Прибавка на коррозию
	Corrosion float64 `protobuf:"fixed64,10,opt,name=corrosion,proto3" json:"corrosion,omitempty"`
	// R - Радиус гиба в углу крышки камеры
	Radius float64 `protobuf:"fixed64,11,opt,name=radius,proto3" json:"radius,omitempty"`
	// Материал крышки
	Material string `protobuf:"bytes,12,opt,name=material,proto3" json:"material,omitempty"`
	// Модуль продольной упругости крышки
	Epsilon float64 `protobuf:"fixed64,13,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	// Допускаемое напряжение при 20 C
	SigmaAt20 float64 `protobuf:"fixed64,14,opt,name=sigmaAt20,proto3" json:"sigmaAt20,omitempty"`
	// Допускаемое напряжение при расчетной температуре
	Sigma float64 `protobuf:"fixed64,15,opt,name=sigma,proto3" json:"sigma,omitempty"`
}

func (x *CapResult) Reset() {
	*x = CapResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapResult) ProtoMessage() {}

func (x *CapResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapResult.ProtoReflect.Descriptor instead.
func (*CapResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{7}
}

func (x *CapResult) GetBottomThick() float64 {
	if x != nil {
		return x.BottomThick
	}
	return 0
}

func (x *CapResult) GetWallThick() float64 {
	if x != nil {
		return x.WallThick
	}
	return 0
}

func (x *CapResult) GetFlangeThick() float64 {
	if x != nil {
		return x.FlangeThick
	}
	return 0
}

func (x *CapResult) GetSideWallThick() float64 {
	if x != nil {
		return x.SideWallThick
	}
	return 0
}

func (x *CapResult) GetInnerSize() float64 {
	if x != nil {
		return x.InnerSize
	}
	return 0
}

func (x *CapResult) GetOuterSize() float64 {
	if x != nil {
		return x.OuterSize
	}
	return 0
}

func (x *CapResult) GetDepth() float64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *CapResult) GetL() float64 {
	if x != nil {
		return x.L
	}
	return 0
}

func (x *CapResult) GetStrength() float64 {
	if x != nil {
		return x.Strength
	}
	return 0
}

func (x *CapResult) GetCorrosion() float64 {
	if x != nil {
		return x.Corrosion
	}
	return 0
}

func (x *CapResult) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *CapResult) GetMaterial() string {
	if x != nil {
		return x.Material
	}
	return ""
}

func (x *CapResult) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *CapResult) GetSigmaAt20() float64 {
	if x != nil {
		return x.SigmaAt20
	}
	return 0
}

func (x *CapResult) GetSigma() float64 {
	if x != nil {
		return x.Sigma
	}
	return 0
}

type TubeSheetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// s1 - Толщина трубной решетки в пределах зоны перфорации
	ZoneThick float64 `protobuf:"fixed64,1,opt,name=zoneThick,proto3" json:"zoneThick,omitempty"`
	// s2 - Толщина трубной решетки в месте уплотнения
	PlaceThick float64 `protobuf:"fixed64,2,opt,name=placeThick,proto3" json:"placeThick,omitempty"`
	// s3 - Толщина трубной решетки вне зоны уплотнения
	OutZoneThick float64 `protobuf:"fixed64,3,opt,name=outZoneThick,proto3" json:"outZoneThick,omitempty"`
	// B1 - Ширина зоны решетки толщиной s1
	Width float64 `protobuf:"fixed64,4,opt,name=width,proto3" json:"width,omitempty"`
	// t1 - Шаг отверстий под трубы в продольном направлении
	StepLong float64 `protobuf:"fixed64,5,opt,name=stepLong,proto3" json:"stepLong,omitempty"`
	// t2 - Шаг отверстий под трубы в поперечном направлении
	StepTrans float64 `protobuf:"fixed64,6,opt,name=stepTrans,proto3" json:"stepTrans,omitempty"`
	// z - Число рядов труб в поперечном направлении
	Count int32 `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	// d0 - Диаметр трубных отверстий в решетках
	Diameter float64 `protobuf:"fixed64,8,opt,name=diameter,proto3" json:"diameter,omitempty"`
	// ср - Прибавка на коррозию
	Corrosion float64 `protobuf:"fixed64,9,opt,name=corrosion,proto3" json:"corrosion,omitempty"`
	// Материал трубной решетки
	Material string `protobuf:"bytes,10,opt,name=material,proto3" json:"material,omitempty"`
	// Модуль продольной упругости трубной решетки
	Epsilon float64 `protobuf:"fixed64,11,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	// Допускаемое напряжение при 20 C
	SigmaAt20 float64 `protobuf:"fixed64,12,opt,name=sigmaAt20,proto3" json:"sigmaAt20,omitempty"`
	// Допускаемое напряжение при расчетной температуре
	Sigma float64 `protobuf:"fixed64,13,opt,name=sigma,proto3" json:"sigma,omitempty"`
}

func (x *TubeSheetResult) Reset() {
	*x = TubeSheetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TubeSheetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TubeSheetResult) ProtoMessage() {}

func (x *TubeSheetResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TubeSheetResult.ProtoReflect.Descriptor instead.
func (*TubeSheetResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{8}
}

func (x *TubeSheetResult) GetZoneThick() float64 {
	if x != nil {
		return x.ZoneThick
	}
	return 0
}

func (x *TubeSheetResult) GetPlaceThick() float64 {
	if x != nil {
		return x.PlaceThick
	}
	return 0
}

func (x *TubeSheetResult) GetOutZoneThick() float64 {
	if x != nil {
		return x.OutZoneThick
	}
	return 0
}

func (x *TubeSheetResult) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *TubeSheetResult) GetStepLong() float64 {
	if x != nil {
		return x.StepLong
	}
	return 0
}

func (x *TubeSheetResult) GetStepTrans() float64 {
	if x != nil {
		return x.StepTrans
	}
	return 0
}

func (x *TubeSheetResult) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TubeSheetResult) GetDiameter() float64 {
	if x != nil {
		return x.Diameter
	}
	return 0
}

func (x *TubeSheetResult) GetCorrosion() float64 {
	if x != nil {
		return x.Corrosion
	}
	return 0
}

func (x *TubeSheetResult) GetMaterial() string {
	if x != nil {
		return x.Material
	}
	return ""
}

func (x *TubeSheetResult) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *TubeSheetResult) GetSigmaAt20() float64 {
	if x != nil {
		return x.SigmaAt20
	}
	return 0
}

func (x *TubeSheetResult) GetSigma() float64 {
	if x != nil {
		return x.Sigma
	}
	return 0
}

type TubeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// L - Длина труб
	Length float64 `protobuf:"fixed64,1,opt,name=length,proto3" json:"length,omitempty"`
	// Lк - Приведенная длина труб при продольном изгибе
	ReducedLength float64 `protobuf:"fixed64,2,opt,name=reducedLength,proto3" json:"reducedLength,omitempty"`
	// dТ - Наружный диаметр трубы
	Diameter float64 `protobuf:"fixed64,3,opt,name=diameter,proto3" json:"diameter,omitempty"`
	// sT - Толщина стенки трубы
	Thickness float64 `protobuf:"fixed64,4,opt,name=thickness,proto3" json:"thickness,omitempty"`
	// сT - Прибавка на коррозию
	Corrosion float64 `protobuf:"fixed64,5,opt,name=corrosion,proto3" json:"corrosion,omitempty"`
	// l0 - Глубина развальцовки
	Depth float64 `protobuf:"fixed64,6,opt,name=depth,proto3" json:"depth,omitempty"`
	// aT - Размер сварного шва приварки труб
	Size float64 `protobuf:"fixed64,7,opt,name=size,proto3" json:"size,omitempty"`
	// Материал труб
	Material string `protobuf:"bytes,8,opt,name=material,proto3" json:"material,omitempty"`
	// Модуль продольной упругости трубы
	Epsilon float64 `protobuf:"fixed64,9,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	// Допускаемое напряжение при 20 C
	SigmaAt20 float64 `protobuf:"fixed64,10,opt,name=sigmaAt20,proto3" json:"sigmaAt20,omitempty"`
	// Допускаемое напряжение при расчетной температуре
	Sigma float64 `protobuf:"fixed64,11,opt,name=sigma,proto3" json:"sigma,omitempty"`
}

func (x *TubeResult) Reset() {
	*x = TubeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TubeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TubeResult) ProtoMessage() {}

func (x *TubeResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TubeResult.ProtoReflect.Descriptor instead.
func (*TubeResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{9}
}

func (x *TubeResult) GetLength() float64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *TubeResult) GetReducedLength() float64 {
	if x != nil {
		return x.ReducedLength
	}
	return 0
}

func (x *TubeResult) GetDiameter() float64 {
	if x != nil {
		return x.Diameter
	}
	return 0
}

func (x *TubeResult) GetThickness() float64 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

func (x *TubeResult) GetCorrosion() float64 {
	if x != nil {
		return x.Corrosion
	}
	return 0
}

func (x *TubeResult) GetDepth() float64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *TubeResult) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TubeResult) GetMaterial() string {
	if x != nil {
		return x.Material
	}
	return ""
}

func (x *TubeResult) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *TubeResult) GetSigmaAt20() float64 {
	if x != nil {
		return x.SigmaAt20
	}
	return 0
}

func (x *TubeResult) GetSigma() float64 {
	if x != nil {
		return x.Sigma
	}
	return 0
}

type BoltResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// B3 - Расстояние между осями болтов/шпилек в поперечном направлении
	Distance float64 `protobuf:"fixed64,1,opt,name=distance,proto3" json:"distance,omitempty"`
	// n - Количество болтов/шпилек
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// lб - Длина болта/шпильки между опорными поверхностями
	Lenght float64 `protobuf:"fixed64,3,opt,name=lenght,proto3" json:"lenght,omitempty"`
	// Материал болта/шпильки
	Material string `protobuf:"bytes,4,opt,name=material,proto3" json:"material,omitempty"`
	// d - Наружный диаметр болта/шпильки
	Diameter float64 `protobuf:"fixed64,5,opt,name=diameter,proto3" json:"diameter,omitempty"`
	// fб - Площадь болта/шпильки
	Area float64 `protobuf:"fixed64,6,opt,name=area,proto3" json:"area,omitempty"`
	// Модуль продольной упругости болта/шпильки
	Epsilon float64 `protobuf:"fixed64,7,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	// Допускаемое напряжение при 20 C
	SigmaAt20 float64 `protobuf:"fixed64,8,opt,name=sigmaAt20,proto3" json:"sigmaAt20,omitempty"`
	// Допускаемое напряжение при расчетной температуре
	Sigma float64 `protobuf:"fixed64,9,opt,name=sigma,proto3" json:"sigma,omitempty"`
}

func (x *BoltResult) Reset() {
	*x = BoltResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoltResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoltResult) ProtoMessage() {}

func (x *BoltResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoltResult.ProtoReflect.Descriptor instead.
func (*BoltResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{10}
}

func (x *BoltResult) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *BoltResult) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BoltResult) GetLenght() float64 {
	if x != nil {
		return x.Lenght
	}
	return 0
}

func (x *BoltResult) GetMaterial() string {
	if x != nil {
		return x.Material
	}
	return ""
}

func (x *BoltResult) GetDiameter() float64 {
	if x != nil {
		return x.Diameter
	}
	return 0
}

func (x *BoltResult) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *BoltResult) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *BoltResult) GetSigmaAt20() float64 {
	if x != nil {
		return x.SigmaAt20
	}
	return 0
}

func (x *BoltResult) GetSigma() float64 {
	if x != nil {
		return x.Sigma
	}
	return 0
}

type GasketResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// название прокладки
	Gasket string `protobuf:"bytes,1,opt,name=gasket,proto3" json:"gasket,omitempty"`
	// название среды
	Env string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	// Толщина прокладки
	Thickness float64 `protobuf:"fixed64,3,opt,name=thickness,proto3" json:"thickness,omitempty"`
	// bp - Ширина прокладки
	Width float64 `protobuf:"fixed64,4,opt,name=width,proto3" json:"width,omitempty"`
	// L2 - Размер прокладки в продольном направлении
	SizeLong float64 `protobuf:"fixed64,5,opt,name=sizeLong,proto3" json:"sizeLong,omitempty"`
	// B2 - Размер прокладки в поперечном направление
	SizeTrans float64 `protobuf:"fixed64,6,opt,name=sizeTrans,proto3" json:"sizeTrans,omitempty"`
	// m - Прокладочный коэффициент
	M float64 `protobuf:"fixed64,7,opt,name=m,proto3" json:"m,omitempty"`
	// qобж - Удельное давление обжатия прокладки
	Pres float64 `protobuf:"fixed64,8,opt,name=pres,proto3" json:"pres,omitempty"`
	// Kобж - Коэффициент обжатия
	Compression float64 `protobuf:"fixed64,9,opt,name=compression,proto3" json:"compression,omitempty"`
	// Ep - Условный модуль сжатия прокладки
	Epsilon float64 `protobuf:"fixed64,10,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	// [q] - Допускаемое удельное давление
	PermissiblePres float64 `protobuf:"fixed64,11,opt,name=permissiblePres,proto3" json:"permissiblePres,omitempty"`
	// Название типа прокладки
	Type string `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GasketResult) Reset() {
	*x = GasketResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasketResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasketResult) ProtoMessage() {}

func (x *GasketResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasketResult.ProtoReflect.Descriptor instead.
func (*GasketResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{11}
}

func (x *GasketResult) GetGasket() string {
	if x != nil {
		return x.Gasket
	}
	return ""
}

func (x *GasketResult) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *GasketResult) GetThickness() float64 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

func (x *GasketResult) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *GasketResult) GetSizeLong() float64 {
	if x != nil {
		return x.SizeLong
	}
	return 0
}

func (x *GasketResult) GetSizeTrans() float64 {
	if x != nil {
		return x.SizeTrans
	}
	return 0
}

func (x *GasketResult) GetM() float64 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *GasketResult) GetPres() float64 {
	if x != nil {
		return x.Pres
	}
	return 0
}

func (x *GasketResult) GetCompression() float64 {
	if x != nil {
		return x.Compression
	}
	return 0
}

func (x *GasketResult) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *GasketResult) GetPermissiblePres() float64 {
	if x != nil {
		return x.PermissiblePres
	}
	return 0
}

func (x *GasketResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{12}
}

func (x *Condition) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Condition) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

type Calculated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Условия применения формул
	Condition1      *Condition `protobuf:"bytes,1,opt,name=condition1,proto3" json:"condition1,omitempty"`
	Condition2      *Condition `protobuf:"bytes,2,opt,name=condition2,proto3" json:"condition2,omitempty"`
	IsConditionsMet bool       `protobuf:"varint,3,opt,name=isConditionsMet,proto3" json:"isConditionsMet,omitempty"`
	// Pпр - Пробное давление
	Pressure   float64        `protobuf:"fixed64,4,opt,name=pressure,proto3" json:"pressure,omitempty"`
	Auxiliary  *CalcAuxiliary `protobuf:"bytes,5,opt,name=auxiliary,proto3" json:"auxiliary,omitempty"`
	Bolt       *CalcBolt      `protobuf:"bytes,6,opt,name=bolt,proto3" json:"bolt,omitempty"`
	GasketCond *Condition     `protobuf:"bytes,7,opt,name=gasketCond,proto3" json:"gasketCond,omitempty"`
	TubeSheet  *CalcTubeSheet `protobuf:"bytes,8,opt,name=tubeSheet,proto3" json:"tubeSheet,omitempty"`
	Cap        *CalcCap       `protobuf:"bytes,9,opt,name=cap,proto3" json:"cap,omitempty"`
	Moment     *CalcMoment    `protobuf:"bytes,10,opt,name=moment,proto3" json:"moment,omitempty"`
}

func (x *Calculated) Reset() {
	*x = Calculated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Calculated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Calculated) ProtoMessage() {}

func (x *Calculated) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Calculated.ProtoReflect.Descriptor instead.
func (*Calculated) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{13}
}

func (x *Calculated) GetCondition1() *Condition {
	if x != nil {
		return x.Condition1
	}
	return nil
}

func (x *Calculated) GetCondition2() *Condition {
	if x != nil {
		return x.Condition2
	}
	return nil
}

func (x *Calculated) GetIsConditionsMet() bool {
	if x != nil {
		return x.IsConditionsMet
	}
	return false
}

func (x *Calculated) GetPressure() float64 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *Calculated) GetAuxiliary() *CalcAuxiliary {
	if x != nil {
		return x.Auxiliary
	}
	return nil
}

func (x *Calculated) GetBolt() *CalcBolt {
	if x != nil {
		return x.Bolt
	}
	return nil
}

func (x *Calculated) GetGasketCond() *Condition {
	if x != nil {
		return x.GasketCond
	}
	return nil
}

func (x *Calculated) GetTubeSheet() *CalcTubeSheet {
	if x != nil {
		return x.TubeSheet
	}
	return nil
}

func (x *Calculated) GetCap() *CalcCap {
	if x != nil {
		return x.Cap
	}
	return nil
}

func (x *Calculated) GetMoment() *CalcMoment {
	if x != nil {
		return x.Moment
	}
	return nil
}

type CalcAuxiliary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bт - Расчетная ширина перфорированной зоны решетки
	EstimatedZoneWidth float64 `protobuf:"fixed64,1,opt,name=estimatedZoneWidth,proto3" json:"estimatedZoneWidth,omitempty"`
	// lambda Относительная ширина беструбного края
	RelativeWidth float64 `protobuf:"fixed64,2,opt,name=relativeWidth,proto3" json:"relativeWidth,omitempty"`
	// Вспомогательные коэффициенты
	Upsilon float64 `protobuf:"fixed64,3,opt,name=upsilon,proto3" json:"upsilon,omitempty"`
	Eta     float64 `protobuf:"fixed64,4,opt,name=eta,proto3" json:"eta,omitempty"`
	// Коэффициент ослабления решетки и задней стенки
	Phi float64 `protobuf:"fixed64,5,opt,name=phi,proto3" json:"phi,omitempty"`
	D   float64 `protobuf:"fixed64,6,opt,name=d,proto3" json:"d,omitempty"`
	// [q] Допускаемая нагрузка из условия прочности труб
	LoadTube float64 `protobuf:"fixed64,7,opt,name=loadTube,proto3" json:"loadTube,omitempty"`
	// [q]s Допускаемая нагрузка из условия прочности крепления трубы в решетке
	Load float64 `protobuf:"fixed64,8,opt,name=load,proto3" json:"load,omitempty"`
	Mu   float64 `protobuf:"fixed64,9,opt,name=mu,proto3" json:"mu,omitempty"`
	// Коэффициент уменьшения допускаемых напряжений при продольном изгибе
	PhiT float64 `protobuf:"fixed64,10,opt,name=phiT,proto3" json:"phiT,omitempty"`
	// b pR - Расчетная ширина плоской прокладки
	EstimatedGasketWidth float64 `protobuf:"fixed64,11,opt,name=estimatedGasketWidth,proto3" json:"estimatedGasketWidth,omitempty"`
	// l1 - Плечи изгибающих моментов
	Arm1 float64 `protobuf:"fixed64,12,opt,name=arm1,proto3" json:"arm1,omitempty"`
	// l2 - Плечи изгибающих моментов
	Arm2 float64 `protobuf:"fixed64,13,opt,name=arm2,proto3" json:"arm2,omitempty"`
	// расчетный размер решетки в поперечном направлении
	Bp float64 `protobuf:"fixed64,14,opt,name=Bp,json=bp,proto3" json:"Bp,omitempty"`
}

func (x *CalcAuxiliary) Reset() {
	*x = CalcAuxiliary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcAuxiliary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcAuxiliary) ProtoMessage() {}

func (x *CalcAuxiliary) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcAuxiliary.ProtoReflect.Descriptor instead.
func (*CalcAuxiliary) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{14}
}

func (x *CalcAuxiliary) GetEstimatedZoneWidth() float64 {
	if x != nil {
		return x.EstimatedZoneWidth
	}
	return 0
}

func (x *CalcAuxiliary) GetRelativeWidth() float64 {
	if x != nil {
		return x.RelativeWidth
	}
	return 0
}

func (x *CalcAuxiliary) GetUpsilon() float64 {
	if x != nil {
		return x.Upsilon
	}
	return 0
}

func (x *CalcAuxiliary) GetEta() float64 {
	if x != nil {
		return x.Eta
	}
	return 0
}

func (x *CalcAuxiliary) GetPhi() float64 {
	if x != nil {
		return x.Phi
	}
	return 0
}

func (x *CalcAuxiliary) GetD() float64 {
	if x != nil {
		return x.D
	}
	return 0
}

func (x *CalcAuxiliary) GetLoadTube() float64 {
	if x != nil {
		return x.LoadTube
	}
	return 0
}

func (x *CalcAuxiliary) GetLoad() float64 {
	if x != nil {
		return x.Load
	}
	return 0
}

func (x *CalcAuxiliary) GetMu() float64 {
	if x != nil {
		return x.Mu
	}
	return 0
}

func (x *CalcAuxiliary) GetPhiT() float64 {
	if x != nil {
		return x.PhiT
	}
	return 0
}

func (x *CalcAuxiliary) GetEstimatedGasketWidth() float64 {
	if x != nil {
		return x.EstimatedGasketWidth
	}
	return 0
}

func (x *CalcAuxiliary) GetArm1() float64 {
	if x != nil {
		return x.Arm1
	}
	return 0
}

func (x *CalcAuxiliary) GetArm2() float64 {
	if x != nil {
		return x.Arm2
	}
	return 0
}

func (x *CalcAuxiliary) GetBp() float64 {
	if x != nil {
		return x.Bp
	}
	return 0
}

type CalcBolt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fв - Расчетное усилие в болтах (шпильках) в условиях эксплуатации
	WorkEffort float64 `protobuf:"fixed64,1,opt,name=workEffort,proto3" json:"workEffort,omitempty"`
	Lp         float64 `protobuf:"fixed64,2,opt,name=Lp,json=lp,proto3" json:"Lp,omitempty"`
	// F0 - Расчетное усилие в болтах (шпильках) в условиях испытаний или монтажа
	Effort float64 `protobuf:"fixed64,3,opt,name=effort,proto3" json:"effort,omitempty"`
	// Коэффициент податливости фланцевого соединения крышки и решетки
	Eta float64 `protobuf:"fixed64,4,opt,name=eta,proto3" json:"eta,omitempty"`
	// YkP Угловые податливости крышки
	CapUpsilonP float64 `protobuf:"fixed64,5,opt,name=capUpsilonP,proto3" json:"capUpsilonP,omitempty"`
	// YkM Угловые податливости крышки
	CapUpsilonM float64 `protobuf:"fixed64,6,opt,name=capUpsilonM,proto3" json:"capUpsilonM,omitempty"`
	// YpP Угловые податливости решетки
	SheetUpsilonP float64 `protobuf:"fixed64,7,opt,name=sheetUpsilonP,proto3" json:"sheetUpsilonP,omitempty"`
	// YpM Угловые податливости решетки
	SheetUpsilonM float64 `protobuf:"fixed64,8,opt,name=sheetUpsilonM,proto3" json:"sheetUpsilonM,omitempty"`
	// Yb Линейная податливость болта (шпильки)
	UpsilonB float64 `protobuf:"fixed64,9,opt,name=upsilonB,proto3" json:"upsilonB,omitempty"`
	// Yp Линейная податливость прокладки
	UpsilonP float64 `protobuf:"fixed64,10,opt,name=upsilonP,proto3" json:"upsilonP,omitempty"`
	// Условия прочности болтов/шпилек - в условиях испытания или монтажа
	TestCond *Condition `protobuf:"bytes,11,opt,name=testCond,proto3" json:"testCond,omitempty"`
	// Условия прочности болтов/шпилек - в условиях эксплуатации
	WorkCond *Condition `protobuf:"bytes,12,opt,name=workCond,proto3" json:"workCond,omitempty"`
}

func (x *CalcBolt) Reset() {
	*x = CalcBolt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcBolt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcBolt) ProtoMessage() {}

func (x *CalcBolt) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcBolt.ProtoReflect.Descriptor instead.
func (*CalcBolt) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{15}
}

func (x *CalcBolt) GetWorkEffort() float64 {
	if x != nil {
		return x.WorkEffort
	}
	return 0
}

func (x *CalcBolt) GetLp() float64 {
	if x != nil {
		return x.Lp
	}
	return 0
}

func (x *CalcBolt) GetEffort() float64 {
	if x != nil {
		return x.Effort
	}
	return 0
}

func (x *CalcBolt) GetEta() float64 {
	if x != nil {
		return x.Eta
	}
	return 0
}

func (x *CalcBolt) GetCapUpsilonP() float64 {
	if x != nil {
		return x.CapUpsilonP
	}
	return 0
}

func (x *CalcBolt) GetCapUpsilonM() float64 {
	if x != nil {
		return x.CapUpsilonM
	}
	return 0
}

func (x *CalcBolt) GetSheetUpsilonP() float64 {
	if x != nil {
		return x.SheetUpsilonP
	}
	return 0
}

func (x *CalcBolt) GetSheetUpsilonM() float64 {
	if x != nil {
		return x.SheetUpsilonM
	}
	return 0
}

func (x *CalcBolt) GetUpsilonB() float64 {
	if x != nil {
		return x.UpsilonB
	}
	return 0
}

func (x *CalcBolt) GetUpsilonP() float64 {
	if x != nil {
		return x.UpsilonP
	}
	return 0
}

func (x *CalcBolt) GetTestCond() *Condition {
	if x != nil {
		return x.TestCond
	}
	return nil
}

func (x *CalcBolt) GetWorkCond() *Condition {
	if x != nil {
		return x.WorkCond
	}
	return nil
}

type CalcTubeSheet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// s1 - Толщина трубной решетки в пределах зоны перфорации
	ZoneThick float64 `protobuf:"fixed64,1,opt,name=zoneThick,proto3" json:"zoneThick,omitempty"`
	// где коэффициенты:
	Lambda float64 `protobuf:"fixed64,2,opt,name=Lambda,json=lambda,proto3" json:"Lambda,omitempty"`
	Psi    float64 `protobuf:"fixed64,3,opt,name=Psi,json=psi,proto3" json:"Psi,omitempty"`
	OmegaP float64 `protobuf:"fixed64,4,opt,name=OmegaP,json=omegaP,proto3" json:"OmegaP,omitempty"`
	// Условия применения формул
	Condition *Condition `protobuf:"bytes,5,opt,name=condition,proto3" json:"condition,omitempty"`
	// s2 - Толщина трубной решетки в месте уплотнения
	PlaceThick float64 `protobuf:"fixed64,6,opt,name=placeThick,proto3" json:"placeThick,omitempty"`
	// s3 - Толщина трубной решетки вне зоны уплотнения
	OutZoneThick float64 `protobuf:"fixed64,7,opt,name=outZoneThick,proto3" json:"outZoneThick,omitempty"`
	// F1 - Расчетное усилие
	Effort float64 `protobuf:"fixed64,8,opt,name=effort,proto3" json:"effort,omitempty"`
	// Условие прочности крепления труб в решетке
	Strength *Condition `protobuf:"bytes,9,opt,name=strength,proto3" json:"strength,omitempty"`
	// где коэффициенты:
	Omega float64 `protobuf:"fixed64,10,opt,name=omega,proto3" json:"omega,omitempty"`
	ZF    float64 `protobuf:"fixed64,11,opt,name=zF,proto3" json:"zF,omitempty"`
	ZM    float64 `protobuf:"fixed64,12,opt,name=zM,proto3" json:"zM,omitempty"`
}

func (x *CalcTubeSheet) Reset() {
	*x = CalcTubeSheet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcTubeSheet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcTubeSheet) ProtoMessage() {}

func (x *CalcTubeSheet) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcTubeSheet.ProtoReflect.Descriptor instead.
func (*CalcTubeSheet) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{16}
}

func (x *CalcTubeSheet) GetZoneThick() float64 {
	if x != nil {
		return x.ZoneThick
	}
	return 0
}

func (x *CalcTubeSheet) GetLambda() float64 {
	if x != nil {
		return x.Lambda
	}
	return 0
}

func (x *CalcTubeSheet) GetPsi() float64 {
	if x != nil {
		return x.Psi
	}
	return 0
}

func (x *CalcTubeSheet) GetOmegaP() float64 {
	if x != nil {
		return x.OmegaP
	}
	return 0
}

func (x *CalcTubeSheet) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *CalcTubeSheet) GetPlaceThick() float64 {
	if x != nil {
		return x.PlaceThick
	}
	return 0
}

func (x *CalcTubeSheet) GetOutZoneThick() float64 {
	if x != nil {
		return x.OutZoneThick
	}
	return 0
}

func (x *CalcTubeSheet) GetEffort() float64 {
	if x != nil {
		return x.Effort
	}
	return 0
}

func (x *CalcTubeSheet) GetStrength() *Condition {
	if x != nil {
		return x.Strength
	}
	return nil
}

func (x *CalcTubeSheet) GetOmega() float64 {
	if x != nil {
		return x.Omega
	}
	return 0
}

func (x *CalcTubeSheet) GetZF() float64 {
	if x != nil {
		return x.ZF
	}
	return 0
}

func (x *CalcTubeSheet) GetZM() float64 {
	if x != nil {
		return x.ZM
	}
	return 0
}

type CalcCap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// s4 - Толщина донышка крышки
	BottomThick float64 `protobuf:"fixed64,1,opt,name=bottomThick,proto3" json:"bottomThick,omitempty"`
	// где коэффициенты:
	Lambda float64 `protobuf:"fixed64,2,opt,name=Lambda,json=lambda,proto3" json:"Lambda,omitempty"`
	Psi    float64 `protobuf:"fixed64,3,opt,name=Psi,json=psi,proto3" json:"Psi,omitempty"`
	F1     float64 `protobuf:"fixed64,4,opt,name=f1,proto3" json:"f1,omitempty"`
	F2     float64 `protobuf:"fixed64,5,opt,name=f2,proto3" json:"f2,omitempty"`
	ChiK   float64 `protobuf:"fixed64,6,opt,name=chiK,proto3" json:"chiK,omitempty"`
	// s5 - Толщина стенки крышки в месте присоединения к фланцу
	WallThick float64 `protobuf:"fixed64,7,opt,name=wallThick,proto3" json:"wallThick,omitempty"`
	// где коэффициенты:
	Chi float64 `protobuf:"fixed64,8,opt,name=chi,proto3" json:"chi,omitempty"`
	// s6 - Толщина фланца крышки
	FlangeThick float64 `protobuf:"fixed64,9,opt,name=flangeThick,proto3" json:"flangeThick,omitempty"`
	// s7 - Толщина боковой стенки
	SideWallThick float64 `protobuf:"fixed64,10,opt,name=sideWallThick,proto3" json:"sideWallThick,omitempty"`
}

func (x *CalcCap) Reset() {
	*x = CalcCap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcCap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcCap) ProtoMessage() {}

func (x *CalcCap) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcCap.ProtoReflect.Descriptor instead.
func (*CalcCap) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{17}
}

func (x *CalcCap) GetBottomThick() float64 {
	if x != nil {
		return x.BottomThick
	}
	return 0
}

func (x *CalcCap) GetLambda() float64 {
	if x != nil {
		return x.Lambda
	}
	return 0
}

func (x *CalcCap) GetPsi() float64 {
	if x != nil {
		return x.Psi
	}
	return 0
}

func (x *CalcCap) GetF1() float64 {
	if x != nil {
		return x.F1
	}
	return 0
}

func (x *CalcCap) GetF2() float64 {
	if x != nil {
		return x.F2
	}
	return 0
}

func (x *CalcCap) GetChiK() float64 {
	if x != nil {
		return x.ChiK
	}
	return 0
}

func (x *CalcCap) GetWallThick() float64 {
	if x != nil {
		return x.WallThick
	}
	return 0
}

func (x *CalcCap) GetChi() float64 {
	if x != nil {
		return x.Chi
	}
	return 0
}

func (x *CalcCap) GetFlangeThick() float64 {
	if x != nil {
		return x.FlangeThick
	}
	return 0
}

func (x *CalcCap) GetSideWallThick() float64 {
	if x != nil {
		return x.SideWallThick
	}
	return 0
}

type CalcMoment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Крутящий момент при затяжке болтов/шпилек
	Mkp float64 `protobuf:"fixed64,1,opt,name=Mkp,json=mkp,proto3" json:"Mkp,omitempty"`
	// Крутящий момент при затяжке болтов/шпилек со смазкой снижается на 25%
	Mkp1 float64 `protobuf:"fixed64,2,opt,name=Mkp1,json=mkp1,proto3" json:"Mkp1,omitempty"`
	// Напряжение на прокладке
	Qrek float64 `protobuf:"fixed64,3,opt,name=Qrek,json=qrek,proto3" json:"Qrek,omitempty"`
	// Момент затяжки при применении уплотнения на старых (изношенных) фланцах, имеющих перекосы
	Mrek float64 `protobuf:"fixed64,4,opt,name=Mrek,json=mrek,proto3" json:"Mrek,omitempty"`
	// Максимальный крутящий момент при затяжке болтов/шпилек
	Mmax float64 `protobuf:"fixed64,5,opt,name=Mmax,json=mmax,proto3" json:"Mmax,omitempty"`
	// Максимальное напряжение на прокладке
	Qmax float64 `protobuf:"fixed64,6,opt,name=Qmax,json=qmax,proto3" json:"Qmax,omitempty"`
	// Коэффициент трения
	Friction float64 `protobuf:"fixed64,7,opt,name=Friction,json=friction,proto3" json:"Friction,omitempty"`
	// используется ли график для расчета
	UseGraphic bool `protobuf:"varint,8,opt,name=useGraphic,proto3" json:"useGraphic,omitempty"`
}

func (x *CalcMoment) Reset() {
	*x = CalcMoment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcMoment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcMoment) ProtoMessage() {}

func (x *CalcMoment) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcMoment.ProtoReflect.Descriptor instead.
func (*CalcMoment) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{18}
}

func (x *CalcMoment) GetMkp() float64 {
	if x != nil {
		return x.Mkp
	}
	return 0
}

func (x *CalcMoment) GetMkp1() float64 {
	if x != nil {
		return x.Mkp1
	}
	return 0
}

func (x *CalcMoment) GetQrek() float64 {
	if x != nil {
		return x.Qrek
	}
	return 0
}

func (x *CalcMoment) GetMrek() float64 {
	if x != nil {
		return x.Mrek
	}
	return 0
}

func (x *CalcMoment) GetMmax() float64 {
	if x != nil {
		return x.Mmax
	}
	return 0
}

func (x *CalcMoment) GetQmax() float64 {
	if x != nil {
		return x.Qmax
	}
	return 0
}

func (x *CalcMoment) GetFriction() float64 {
	if x != nil {
		return x.Friction
	}
	return 0
}

func (x *CalcMoment) GetUseGraphic() bool {
	if x != nil {
		return x.UseGraphic
	}
	return false
}

type Formulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Условия применения формул
	Condition1 string `protobuf:"bytes,1,opt,name=condition1,proto3" json:"condition1,omitempty"`
	Condition2 string `protobuf:"bytes,2,opt,name=condition2,proto3" json:"condition2,omitempty"`
	// Pпр - Пробное давление
	Pressure   string             `protobuf:"bytes,3,opt,name=pressure,proto3" json:"pressure,omitempty"`
	Auxiliary  *AuxiliaryFormulas `protobuf:"bytes,4,opt,name=auxiliary,proto3" json:"auxiliary,omitempty"`
	Bolt       *BoltFormulas      `protobuf:"bytes,5,opt,name=bolt,proto3" json:"bolt,omitempty"`
	GasketCond string             `protobuf:"bytes,6,opt,name=gasketCond,proto3" json:"gasketCond,omitempty"`
	TubeSheet  *TubeSheetFormulas `protobuf:"bytes,7,opt,name=tubeSheet,proto3" json:"tubeSheet,omitempty"`
	Cap        *CapFormulas       `protobuf:"bytes,8,opt,name=cap,proto3" json:"cap,omitempty"`
	Moment     *MomentFormulas    `protobuf:"bytes,9,opt,name=moment,proto3" json:"moment,omitempty"`
}

func (x *Formulas) Reset() {
	*x = Formulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Formulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Formulas) ProtoMessage() {}

func (x *Formulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Formulas.ProtoReflect.Descriptor instead.
func (*Formulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{19}
}

func (x *Formulas) GetCondition1() string {
	if x != nil {
		return x.Condition1
	}
	return ""
}

func (x *Formulas) GetCondition2() string {
	if x != nil {
		return x.Condition2
	}
	return ""
}

func (x *Formulas) GetPressure() string {
	if x != nil {
		return x.Pressure
	}
	return ""
}

func (x *Formulas) GetAuxiliary() *AuxiliaryFormulas {
	if x != nil {
		return x.Auxiliary
	}
	return nil
}

func (x *Formulas) GetBolt() *BoltFormulas {
	if x != nil {
		return x.Bolt
	}
	return nil
}

func (x *Formulas) GetGasketCond() string {
	if x != nil {
		return x.GasketCond
	}
	return ""
}

func (x *Formulas) GetTubeSheet() *TubeSheetFormulas {
	if x != nil {
		return x.TubeSheet
	}
	return nil
}

func (x *Formulas) GetCap() *CapFormulas {
	if x != nil {
		return x.Cap
	}
	return nil
}

func (x *Formulas) GetMoment() *MomentFormulas {
	if x != nil {
		return x.Moment
	}
	return nil
}

type AuxiliaryFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bт - Расчетная ширина перфорированной зоны решетки
	EstimatedZoneWidth string `protobuf:"bytes,1,opt,name=estimatedZoneWidth,proto3" json:"estimatedZoneWidth,omitempty"`
	// lambda Относительная ширина беструбного края
	RelativeWidth string `protobuf:"bytes,2,opt,name=relativeWidth,proto3" json:"relativeWidth,omitempty"`
	// Вспомогательные коэффициенты
	Upsilon string `protobuf:"bytes,3,opt,name=upsilon,proto3" json:"upsilon,omitempty"`
	Eta     string `protobuf:"bytes,4,opt,name=eta,proto3" json:"eta,omitempty"`
	// Коэффициент ослабления решетки и задней стенки
	Phi string `protobuf:"bytes,5,opt,name=phi,proto3" json:"phi,omitempty"`
	D   string `protobuf:"bytes,6,opt,name=d,proto3" json:"d,omitempty"`
	// [q] Допускаемая нагрузка из условия прочности труб
	LoadTube string `protobuf:"bytes,7,opt,name=loadTube,proto3" json:"loadTube,omitempty"`
	// [q]s Допускаемая нагрузка из условия прочности крепления трубы в решетке
	Load string `protobuf:"bytes,8,opt,name=load,proto3" json:"load,omitempty"`
	// Коэффициент уменьшения допускаемых напряжений при продольном изгибе
	PhiT string `protobuf:"bytes,9,opt,name=phiT,proto3" json:"phiT,omitempty"`
	// b pR - Расчетная ширина плоской прокладки
	EstimatedGasketWidth string `protobuf:"bytes,10,opt,name=estimatedGasketWidth,proto3" json:"estimatedGasketWidth,omitempty"`
	// l1 - Плечи изгибающих моментов
	Arm1 string `protobuf:"bytes,11,opt,name=arm1,proto3" json:"arm1,omitempty"`
	// l2 - Плечи изгибающих моментов
	Arm2 string `protobuf:"bytes,12,opt,name=arm2,proto3" json:"arm2,omitempty"`
	// расчетный размер решетки в поперечном направлении
	Bp string `protobuf:"bytes,13,opt,name=Bp,json=bp,proto3" json:"Bp,omitempty"`
}

func (x *AuxiliaryFormulas) Reset() {
	*x = AuxiliaryFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuxiliaryFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuxiliaryFormulas) ProtoMessage() {}

func (x *AuxiliaryFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuxiliaryFormulas.ProtoReflect.Descriptor instead.
func (*AuxiliaryFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{20}
}

func (x *AuxiliaryFormulas) GetEstimatedZoneWidth() string {
	if x != nil {
		return x.EstimatedZoneWidth
	}
	return ""
}

func (x *AuxiliaryFormulas) GetRelativeWidth() string {
	if x != nil {
		return x.RelativeWidth
	}
	return ""
}

func (x *AuxiliaryFormulas) GetUpsilon() string {
	if x != nil {
		return x.Upsilon
	}
	return ""
}

func (x *AuxiliaryFormulas) GetEta() string {
	if x != nil {
		return x.Eta
	}
	return ""
}

func (x *AuxiliaryFormulas) GetPhi() string {
	if x != nil {
		return x.Phi
	}
	return ""
}

func (x *AuxiliaryFormulas) GetD() string {
	if x != nil {
		return x.D
	}
	return ""
}

func (x *AuxiliaryFormulas) GetLoadTube() string {
	if x != nil {
		return x.LoadTube
	}
	return ""
}

func (x *AuxiliaryFormulas) GetLoad() string {
	if x != nil {
		return x.Load
	}
	return ""
}

func (x *AuxiliaryFormulas) GetPhiT() string {
	if x != nil {
		return x.PhiT
	}
	return ""
}

func (x *AuxiliaryFormulas) GetEstimatedGasketWidth() string {
	if x != nil {
		return x.EstimatedGasketWidth
	}
	return ""
}

func (x *AuxiliaryFormulas) GetArm1() string {
	if x != nil {
		return x.Arm1
	}
	return ""
}

func (x *AuxiliaryFormulas) GetArm2() string {
	if x != nil {
		return x.Arm2
	}
	return ""
}

func (x *AuxiliaryFormulas) GetBp() string {
	if x != nil {
		return x.Bp
	}
	return ""
}

type BoltFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fв - Расчетное усилие в болтах (шпильках) в условиях эксплуатации
	WorkEffort string `protobuf:"bytes,1,opt,name=workEffort,proto3" json:"workEffort,omitempty"`
	Lp         string `protobuf:"bytes,2,opt,name=Lp,json=lp,proto3" json:"Lp,omitempty"`
	// F0 - Расчетное усилие в болтах (шпильках) в условиях испытаний или монтажа
	Effort string `protobuf:"bytes,3,opt,name=effort,proto3" json:"effort,omitempty"`
	// Коэффициент податливости фланцевого соединения крышки и решетки
	Eta string `protobuf:"bytes,4,opt,name=eta,proto3" json:"eta,omitempty"`
	// YkP Угловые податливости крышки
	CapUpsilonP string `protobuf:"bytes,5,opt,name=capUpsilonP,proto3" json:"capUpsilonP,omitempty"`
	// YkM Угловые податливости крышки
	CapUpsilonM string `protobuf:"bytes,6,opt,name=capUpsilonM,proto3" json:"capUpsilonM,omitempty"`
	// YpP Угловые податливости решетки
	SheetUpsilonP string `protobuf:"bytes,7,opt,name=sheetUpsilonP,proto3" json:"sheetUpsilonP,omitempty"`
	// YpM Угловые податливости решетки
	SheetUpsilonM string `protobuf:"bytes,8,opt,name=sheetUpsilonM,proto3" json:"sheetUpsilonM,omitempty"`
	// Yb Линейная податливость болта (шпильки)
	UpsilonB string `protobuf:"bytes,9,opt,name=upsilonB,proto3" json:"upsilonB,omitempty"`
	// Yp Линейная податливость прокладки
	UpsilonP string `protobuf:"bytes,10,opt,name=upsilonP,proto3" json:"upsilonP,omitempty"`
	// Условия прочности болтов/шпилек - в условиях испытания или монтажа
	TestCond string `protobuf:"bytes,11,opt,name=testCond,proto3" json:"testCond,omitempty"`
	// Условия прочности болтов/шпилек - в условиях эксплуатации
	WorkCond string `protobuf:"bytes,12,opt,name=workCond,proto3" json:"workCond,omitempty"`
}

func (x *BoltFormulas) Reset() {
	*x = BoltFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoltFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoltFormulas) ProtoMessage() {}

func (x *BoltFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoltFormulas.ProtoReflect.Descriptor instead.
func (*BoltFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{21}
}

func (x *BoltFormulas) GetWorkEffort() string {
	if x != nil {
		return x.WorkEffort
	}
	return ""
}

func (x *BoltFormulas) GetLp() string {
	if x != nil {
		return x.Lp
	}
	return ""
}

func (x *BoltFormulas) GetEffort() string {
	if x != nil {
		return x.Effort
	}
	return ""
}

func (x *BoltFormulas) GetEta() string {
	if x != nil {
		return x.Eta
	}
	return ""
}

func (x *BoltFormulas) GetCapUpsilonP() string {
	if x != nil {
		return x.CapUpsilonP
	}
	return ""
}

func (x *BoltFormulas) GetCapUpsilonM() string {
	if x != nil {
		return x.CapUpsilonM
	}
	return ""
}

func (x *BoltFormulas) GetSheetUpsilonP() string {
	if x != nil {
		return x.SheetUpsilonP
	}
	return ""
}

func (x *BoltFormulas) GetSheetUpsilonM() string {
	if x != nil {
		return x.SheetUpsilonM
	}
	return ""
}

func (x *BoltFormulas) GetUpsilonB() string {
	if x != nil {
		return x.UpsilonB
	}
	return ""
}

func (x *BoltFormulas) GetUpsilonP() string {
	if x != nil {
		return x.UpsilonP
	}
	return ""
}

func (x *BoltFormulas) GetTestCond() string {
	if x != nil {
		return x.TestCond
	}
	return ""
}

func (x *BoltFormulas) GetWorkCond() string {
	if x != nil {
		return x.WorkCond
	}
	return ""
}

type TubeSheetFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// s1 - Толщина трубной решетки в пределах зоны перфорации
	ZoneThick string `protobuf:"bytes,1,opt,name=zoneThick,proto3" json:"zoneThick,omitempty"`
	// где коэффициенты:
	Lambda string `protobuf:"bytes,2,opt,name=Lambda,json=lambda,proto3" json:"Lambda,omitempty"`
	Psi    string `protobuf:"bytes,3,opt,name=Psi,json=psi,proto3" json:"Psi,omitempty"`
	OmegaP string `protobuf:"bytes,4,opt,name=OmegaP,json=omegaP,proto3" json:"OmegaP,omitempty"`
	// s2 - Толщина трубной решетки в месте уплотнения
	PlaceThick string `protobuf:"bytes,5,opt,name=placeThick,proto3" json:"placeThick,omitempty"`
	// s3 - Толщина трубной решетки вне зоны уплотнения
	OutZoneThick string `protobuf:"bytes,6,opt,name=outZoneThick,proto3" json:"outZoneThick,omitempty"`
	// F1 - Расчетное усилие
	Effort string `protobuf:"bytes,7,opt,name=effort,proto3" json:"effort,omitempty"`
	// Условие прочности крепления труб в решетке
	Strength string `protobuf:"bytes,8,opt,name=strength,proto3" json:"strength,omitempty"`
	// где коэффициенты:
	Omega string `protobuf:"bytes,9,opt,name=omega,proto3" json:"omega,omitempty"`
	ZF    string `protobuf:"bytes,10,opt,name=zF,proto3" json:"zF,omitempty"`
	ZM    string `protobuf:"bytes,11,opt,name=zM,proto3" json:"zM,omitempty"`
}

func (x *TubeSheetFormulas) Reset() {
	*x = TubeSheetFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TubeSheetFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TubeSheetFormulas) ProtoMessage() {}

func (x *TubeSheetFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TubeSheetFormulas.ProtoReflect.Descriptor instead.
func (*TubeSheetFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{22}
}

func (x *TubeSheetFormulas) GetZoneThick() string {
	if x != nil {
		return x.ZoneThick
	}
	return ""
}

func (x *TubeSheetFormulas) GetLambda() string {
	if x != nil {
		return x.Lambda
	}
	return ""
}

func (x *TubeSheetFormulas) GetPsi() string {
	if x != nil {
		return x.Psi
	}
	return ""
}

func (x *TubeSheetFormulas) GetOmegaP() string {
	if x != nil {
		return x.OmegaP
	}
	return ""
}

func (x *TubeSheetFormulas) GetPlaceThick() string {
	if x != nil {
		return x.PlaceThick
	}
	return ""
}

func (x *TubeSheetFormulas) GetOutZoneThick() string {
	if x != nil {
		return x.OutZoneThick
	}
	return ""
}

func (x *TubeSheetFormulas) GetEffort() string {
	if x != nil {
		return x.Effort
	}
	return ""
}

func (x *TubeSheetFormulas) GetStrength() string {
	if x != nil {
		return x.Strength
	}
	return ""
}

func (x *TubeSheetFormulas) GetOmega() string {
	if x != nil {
		return x.Omega
	}
	return ""
}

func (x *TubeSheetFormulas) GetZF() string {
	if x != nil {
		return x.ZF
	}
	return ""
}

func (x *TubeSheetFormulas) GetZM() string {
	if x != nil {
		return x.ZM
	}
	return ""
}

type CapFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// s4 - Толщина донышка крышки
	BottomThick string `protobuf:"bytes,1,opt,name=bottomThick,proto3" json:"bottomThick,omitempty"`
	// где коэффициенты:
	Lambda string `protobuf:"bytes,2,opt,name=Lambda,json=lambda,proto3" json:"Lambda,omitempty"`
	Psi    string `protobuf:"bytes,3,opt,name=Psi,json=psi,proto3" json:"Psi,omitempty"`
	F1     string `protobuf:"bytes,4,opt,name=f1,proto3" json:"f1,omitempty"`
	F2     string `protobuf:"bytes,5,opt,name=f2,proto3" json:"f2,omitempty"`
	ChiK   string `protobuf:"bytes,6,opt,name=chiK,proto3" json:"chiK,omitempty"`
	// s5 - Толщина стенки крышки в месте присоединения к фланцу
	WallThick string `protobuf:"bytes,7,opt,name=wallThick,proto3" json:"wallThick,omitempty"`
	// где коэффициенты:
	Chi string `protobuf:"bytes,8,opt,name=chi,proto3" json:"chi,omitempty"`
	// s6 - Толщина фланца крышки
	FlangeThick string `protobuf:"bytes,9,opt,name=flangeThick,proto3" json:"flangeThick,omitempty"`
	// s7 - Толщина боковой стенки
	SideWallThick string `protobuf:"bytes,10,opt,name=sideWallThick,proto3" json:"sideWallThick,omitempty"`
}

func (x *CapFormulas) Reset() {
	*x = CapFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapFormulas) ProtoMessage() {}

func (x *CapFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapFormulas.ProtoReflect.Descriptor instead.
func (*CapFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{23}
}

func (x *CapFormulas) GetBottomThick() string {
	if x != nil {
		return x.BottomThick
	}
	return ""
}

func (x *CapFormulas) GetLambda() string {
	if x != nil {
		return x.Lambda
	}
	return ""
}

func (x *CapFormulas) GetPsi() string {
	if x != nil {
		return x.Psi
	}
	return ""
}

func (x *CapFormulas) GetF1() string {
	if x != nil {
		return x.F1
	}
	return ""
}

func (x *CapFormulas) GetF2() string {
	if x != nil {
		return x.F2
	}
	return ""
}

func (x *CapFormulas) GetChiK() string {
	if x != nil {
		return x.ChiK
	}
	return ""
}

func (x *CapFormulas) GetWallThick() string {
	if x != nil {
		return x.WallThick
	}
	return ""
}

func (x *CapFormulas) GetChi() string {
	if x != nil {
		return x.Chi
	}
	return ""
}

func (x *CapFormulas) GetFlangeThick() string {
	if x != nil {
		return x.FlangeThick
	}
	return ""
}

func (x *CapFormulas) GetSideWallThick() string {
	if x != nil {
		return x.SideWallThick
	}
	return ""
}

type MomentFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Крутящий момент при затяжке болтов/шпилек
	Mkp string `protobuf:"bytes,1,opt,name=Mkp,json=mkp,proto3" json:"Mkp,omitempty"`
	// Крутящий момент при затяжке болтов/шпилек со смазкой снижается на 25%
	Mkp1 string `protobuf:"bytes,2,opt,name=Mkp1,json=mkp1,proto3" json:"Mkp1,omitempty"`
	// Напряжение на прокладке
	Qrek string `protobuf:"bytes,3,opt,name=Qrek,json=qrek,proto3" json:"Qrek,omitempty"`
	// Момент затяжки при применении уплотнения на старых (изношенных) фланцах, имеющих перекосы
	Mrek string `protobuf:"bytes,4,opt,name=Mrek,json=mrek,proto3" json:"Mrek,omitempty"`
	// Максимальный крутящий момент при затяжке болтов/шпилек
	Mmax string `protobuf:"bytes,5,opt,name=Mmax,json=mmax,proto3" json:"Mmax,omitempty"`
	// Максимальное напряжение на прокладке
	Qmax string `protobuf:"bytes,6,opt,name=Qmax,json=qmax,proto3" json:"Qmax,omitempty"`
}

func (x *MomentFormulas) Reset() {
	*x = MomentFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MomentFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomentFormulas) ProtoMessage() {}

func (x *MomentFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomentFormulas.ProtoReflect.Descriptor instead.
func (*MomentFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{24}
}

func (x *MomentFormulas) GetMkp() string {
	if x != nil {
		return x.Mkp
	}
	return ""
}

func (x *MomentFormulas) GetMkp1() string {
	if x != nil {
		return x.Mkp1
	}
	return ""
}

func (x *MomentFormulas) GetQrek() string {
	if x != nil {
		return x.Qrek
	}
	return ""
}

func (x *MomentFormulas) GetMrek() string {
	if x != nil {
		return x.Mrek
	}
	return ""
}

func (x *MomentFormulas) GetMmax() string {
	if x != nil {
		return x.Mmax
	}
	return ""
}

func (x *MomentFormulas) GetQmax() string {
	if x != nil {
		return x.Qmax
	}
	return ""
}

type GasketData_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           string          `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Type            GasketData_Type `protobuf:"varint,2,opt,name=type,proto3,enum=dev_cooling_model.GasketData_Type" json:"type,omitempty"`
	Qo              float64         `protobuf:"fixed64,3,opt,name=qo,proto3" json:"qo,omitempty"`
	M               float64         `protobuf:"fixed64,4,opt,name=m,proto3" json:"m,omitempty"`
	Compression     float64         `protobuf:"fixed64,5,opt,name=compression,proto3" json:"compression,omitempty"`
	Epsilon         float64         `protobuf:"fixed64,6,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	PermissiblePres float64         `protobuf:"fixed64,7,opt,name=permissiblePres,proto3" json:"permissiblePres,omitempty"`
}

func (x *GasketData_Data) Reset() {
	*x = GasketData_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasketData_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasketData_Data) ProtoMessage() {}

func (x *GasketData_Data) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_dev_cooling_model_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasketData_Data.ProtoReflect.Descriptor instead.
func (*GasketData_Data) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GasketData_Data) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GasketData_Data) GetType() GasketData_Type {
	if x != nil {
		return x.Type
	}
	return GasketData_Soft
}

func (x *GasketData_Data) GetQo() float64 {
	if x != nil {
		return x.Qo
	}
	return 0
}

func (x *GasketData_Data) GetM() float64 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *GasketData_Data) GetCompression() float64 {
	if x != nil {
		return x.Compression
	}
	return 0
}

func (x *GasketData_Data) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *GasketData_Data) GetPermissiblePres() float64 {
	if x != nil {
		return x.PermissiblePres
	}
	return 0
}

var File_moment_calc_api_dev_cooling_model_proto protoreflect.FileDescriptor

var file_moment_calc_api_dev_cooling_model_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70,
	0x69, 0x2f, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x64, 0x65, 0x76, 0x5f, 0x63,
	0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x72, 0x0a, 0x0c,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6d, 0x61, 0x41, 0x74, 0x32, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x41, 0x74, 0x32, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69,
	0x67, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61,
	0x22, 0x98, 0x03, 0x0a, 0x07, 0x43, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x12, 0x1c,
	0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0b,
	0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x69, 0x64, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x69, 0x64, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x54,
	0x68, 0x69, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x0c, 0x0a, 0x01, 0x4c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x72, 0x72, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x72, 0x72, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x3b,
	0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0xe6, 0x02, 0x0a, 0x0d,
	0x54, 0x75, 0x62, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a,
	0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x6f,
	0x75, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x70, 0x4c, 0x6f, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x65, 0x70, 0x4c, 0x6f, 0x6e,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x65, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x72, 0x72, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x72, 0x72, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x65, 0x76, 0x5f,
	0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x22, 0x9f, 0x02, 0x0a, 0x08, 0x54, 0x75, 0x62, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x64,
	0x75, 0x63, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x72,
	0x72, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x6f,
	0x72, 0x72, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x65,
	0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0xf1, 0x01, 0x0a, 0x08, 0x42, 0x6f, 0x6c, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x22, 0xe6, 0x03, 0x0a, 0x0a, 0x47,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x7a, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x73, 0x69, 0x7a, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f,
	0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0xd8, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x71, 0x6f, 0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x01, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x73, 0x69,
	0x6c, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x50, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x22, 0x25, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x6f, 0x66, 0x74, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x4f, 0x76, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x65, 0x74, 0x61,
	0x6c, 0x10, 0x02, 0x22, 0xee, 0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x65,
	0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x6f, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x6f, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x44, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x44, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x22, 0xaf, 0x03, 0x0a, 0x09, 0x43, 0x61, 0x70, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x54, 0x68, 0x69, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x54,
	0x68, 0x69, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x68, 0x69, 0x63,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x68, 0x69,
	0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x68, 0x69, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x68, 0x69, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69, 0x64, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x54, 0x68, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x69, 0x64,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x0c, 0x0a, 0x01,
	0x4c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x72, 0x72, 0x6f, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x72, 0x72, 0x6f,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x73, 0x69,
	0x6c, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x41, 0x74, 0x32, 0x30, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x41, 0x74, 0x32, 0x30,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x22, 0xfd, 0x02, 0x0a, 0x0f, 0x54, 0x75, 0x62, 0x65, 0x53,
	0x68, 0x65, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x7a, 0x6f,
	0x6e, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x7a,
	0x6f, 0x6e, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5a,
	0x6f, 0x6e, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x6f, 0x75, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x70, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x65, 0x70, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x73, 0x74, 0x65, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x72, 0x72, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x63, 0x6f, 0x72, 0x72, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x73, 0x69,
	0x6c, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x41, 0x74, 0x32, 0x30, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x41, 0x74, 0x32, 0x30,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x22, 0xb6, 0x02, 0x0a, 0x0a, 0x54, 0x75, 0x62, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x24, 0x0a,
	0x0d, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x72, 0x72, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x63, 0x6f, 0x72, 0x72, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6d, 0x61, 0x41, 0x74, 0x32, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6d, 0x61, 0x41, 0x74, 0x32, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x67,
	0x6d, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x22,
	0xf0, 0x01, 0x0a, 0x0a, 0x42, 0x6f, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x61, 0x72, 0x65, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x41, 0x74, 0x32, 0x30, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x41, 0x74, 0x32, 0x30, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x69, 0x67, 0x6d, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x69, 0x67,
	0x6d, 0x61, 0x22, 0xc2, 0x02, 0x0a, 0x0c, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x27, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79,
	0x22, 0xa2, 0x04, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x12, 0x3c, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x28, 0x0a, 0x0f, 0x69,
	0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4d, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x12, 0x3e, 0x0a, 0x09, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x41, 0x75, 0x78,
	0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x52, 0x09, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72,
	0x79, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x42, 0x6f, 0x6c, 0x74, 0x52, 0x04, 0x62, 0x6f,
	0x6c, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64,
	0x12, 0x3e, 0x0a, 0x09, 0x74, 0x75, 0x62, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x54, 0x75, 0x62, 0x65,
	0x53, 0x68, 0x65, 0x65, 0x74, 0x52, 0x09, 0x74, 0x75, 0x62, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74,
	0x12, 0x2c, 0x0a, 0x03, 0x63, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x43, 0x61, 0x70, 0x52, 0x03, 0x63, 0x61, 0x70, 0x12, 0x35,
	0x0a, 0x06, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x6d,
	0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xf1, 0x02, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x63, 0x41, 0x75,
	0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x75, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x65, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x68, 0x69,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x68, 0x69, 0x12, 0x0c, 0x0a, 0x01, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x75, 0x62, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x75, 0x62, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6d, 0x75, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x6d, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x68, 0x69,
	0x54, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x68, 0x69, 0x54, 0x12, 0x32, 0x0a,
	0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x6d, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x61, 0x72, 0x6d, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x6d, 0x32, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x61, 0x72, 0x6d, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x42, 0x70, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x62, 0x70, 0x22, 0xa0, 0x03, 0x0a, 0x08, 0x43, 0x61,
	0x6c, 0x63, 0x42, 0x6f, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x66,
	0x66, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x45, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x4c, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x6c, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x65, 0x74, 0x61,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x70, 0x55, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x50, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x70, 0x55, 0x70, 0x73, 0x69, 0x6c, 0x6f,
	0x6e, 0x50, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x70, 0x55, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e,
	0x4d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x70, 0x55, 0x70, 0x73, 0x69,
	0x6c, 0x6f, 0x6e, 0x4d, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x65, 0x65, 0x74, 0x55, 0x70, 0x73,
	0x69, 0x6c, 0x6f, 0x6e, 0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x65,
	0x65, 0x74, 0x55, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x50, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68,
	0x65, 0x65, 0x74, 0x55, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x4d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x73, 0x68, 0x65, 0x65, 0x74, 0x55, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x4d,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x42, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x75, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x42, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x50, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x75, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x50, 0x12, 0x38, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x65, 0x76,
	0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x22, 0xf7, 0x02, 0x0a,
	0x0d, 0x43, 0x61, 0x6c, 0x63, 0x54, 0x75, 0x62, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06,
	0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6c, 0x61,
	0x6d, 0x62, 0x64, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x73, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x70, 0x73, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x6d, 0x65, 0x67, 0x61, 0x50,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6f, 0x6d, 0x65, 0x67, 0x61, 0x50, 0x12, 0x3a,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x75,
	0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x6f, 0x75, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63,
	0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x6d, 0x65, 0x67, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x6f, 0x6d, 0x65, 0x67, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x7a, 0x46, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x7a, 0x46, 0x12, 0x0e, 0x0a, 0x02, 0x7a, 0x4d, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x7a, 0x4d, 0x22, 0x81, 0x02, 0x0a, 0x07, 0x43, 0x61, 0x6c, 0x63, 0x43,
	0x61, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x54, 0x68, 0x69, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x54,
	0x68, 0x69, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x50, 0x73, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x73, 0x69, 0x12, 0x0e,
	0x0a, 0x02, 0x66, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x66, 0x31, 0x12, 0x0e,
	0x0a, 0x02, 0x66, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x66, 0x32, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x68, 0x69, 0x4b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x68,
	0x69, 0x4b, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x68, 0x69, 0x63, 0x6b,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x68, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63,
	0x68, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x68, 0x69, 0x63,
	0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x68, 0x69, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69, 0x64, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x54, 0x68, 0x69, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x69, 0x64,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x22, 0xbe, 0x01, 0x0a, 0x0a, 0x43,
	0x61, 0x6c, 0x63, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x6b, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x6b, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x4d,
	0x6b, 0x70, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x6b, 0x70, 0x31, 0x12,
	0x12, 0x0a, 0x04, 0x51, 0x72, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x71,
	0x72, 0x65, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x72, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x6d, 0x72, 0x65, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6d, 0x61, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x6d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x51,
	0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x71, 0x6d, 0x61, 0x78, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x22, 0xb0, 0x03, 0x0a, 0x08,
	0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x75, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f,
	0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x75, 0x78, 0x69,
	0x6c, 0x69, 0x61, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x09, 0x61,
	0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x42, 0x0a,
	0x09, 0x74, 0x75, 0x62, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x75, 0x62, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x09, 0x74, 0x75, 0x62, 0x65, 0x53, 0x68, 0x65, 0x65,
	0x74, 0x12, 0x30, 0x0a, 0x03, 0x63, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x43, 0x61, 0x70, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x03,
	0x63, 0x61, 0x70, 0x12, 0x39, 0x0a, 0x06, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x06, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xe5,
	0x02, 0x0a, 0x11, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70,
	0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x73,
	0x69, 0x6c, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x68, 0x69, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x68, 0x69, 0x12, 0x0c, 0x0a, 0x01, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x01, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x75,
	0x62, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x75,
	0x62, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x68, 0x69, 0x54, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x68, 0x69, 0x54, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x72, 0x6d, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72,
	0x6d, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x6d, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x72, 0x6d, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x42, 0x70, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x62, 0x70, 0x22, 0xe8, 0x02, 0x0a, 0x0c, 0x42, 0x6f, 0x6c, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x45,
	0x66, 0x66, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x45, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x4c, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x6c, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x74,
	0x61, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x70, 0x55, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x50,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x70, 0x55, 0x70, 0x73, 0x69, 0x6c,
	0x6f, 0x6e, 0x50, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x70, 0x55, 0x70, 0x73, 0x69, 0x6c, 0x6f,
	0x6e, 0x4d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x70, 0x55, 0x70, 0x73,
	0x69, 0x6c, 0x6f, 0x6e, 0x4d, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x65, 0x65, 0x74, 0x55, 0x70,
	0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68,
	0x65, 0x65, 0x74, 0x55, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x50, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x68, 0x65, 0x65, 0x74, 0x55, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x4d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x65, 0x65, 0x74, 0x55, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e,
	0x4d, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x42, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x42, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x50, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x64, 0x22, 0xa1, 0x02, 0x0a, 0x11, 0x54, 0x75, 0x62, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x54,
	0x68, 0x69, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x7a, 0x6f, 0x6e, 0x65,
	0x54, 0x68, 0x69, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x50, 0x73, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x73, 0x69, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x6d, 0x65, 0x67, 0x61, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x6d, 0x65, 0x67, 0x61, 0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x54, 0x68, 0x69, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5a, 0x6f,
	0x6e, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f,
	0x75, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x66, 0x66, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x66, 0x66,
	0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x6d, 0x65, 0x67, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x6d, 0x65, 0x67, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x7a, 0x46, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x7a, 0x46, 0x12, 0x0e, 0x0a, 0x02, 0x7a, 0x4d, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x7a, 0x4d, 0x22, 0x85, 0x02, 0x0a, 0x0b, 0x43, 0x61, 0x70, 0x46, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x54,
	0x68, 0x69, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6f, 0x74, 0x74,
	0x6f, 0x6d, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x6d, 0x62, 0x64,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x50, 0x73, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x73,
	0x69, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x66,
	0x31, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x66,
	0x32, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x68, 0x69, 0x4b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x68, 0x69, 0x4b, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x68, 0x69,
	0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x68,
	0x69, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x68, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x63, 0x68, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x68, 0x69, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69, 0x64, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x69, 0x64, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x22, 0x86, 0x01,
	0x0a, 0x0e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x4d, 0x6b, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x6b, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6b, 0x70, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x6b, 0x70, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x51, 0x72, 0x65, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x71, 0x72, 0x65, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x72,
	0x65, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x72, 0x65, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x4d, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6d,
	0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x51, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x71, 0x6d, 0x61, 0x78, 0x42, 0x4c, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x6c, 0x65, 0x78, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x32, 0x37,
	0x32, 0x2f, 0x73, 0x65, 0x61, 0x6c, 0x75, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_moment_calc_api_dev_cooling_model_proto_rawDescOnce sync.Once
	file_moment_calc_api_dev_cooling_model_proto_rawDescData = file_moment_calc_api_dev_cooling_model_proto_rawDesc
)

func file_moment_calc_api_dev_cooling_model_proto_rawDescGZIP() []byte {
	file_moment_calc_api_dev_cooling_model_proto_rawDescOnce.Do(func() {
		file_moment_calc_api_dev_cooling_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_moment_calc_api_dev_cooling_model_proto_rawDescData)
	})
	return file_moment_calc_api_dev_cooling_model_proto_rawDescData
}

var file_moment_calc_api_dev_cooling_model_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_moment_calc_api_dev_cooling_model_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_moment_calc_api_dev_cooling_model_proto_goTypes = []interface{}{
	(GasketData_Type)(0),      // 0: dev_cooling_model.GasketData.Type
	(*MaterialData)(nil),      // 1: dev_cooling_model.MaterialData
	(*CapData)(nil),           // 2: dev_cooling_model.CapData
	(*TubeSheetData)(nil),     // 3: dev_cooling_model.TubeSheetData
	(*TubeData)(nil),          // 4: dev_cooling_model.TubeData
	(*BoltData)(nil),          // 5: dev_cooling_model.BoltData
	(*GasketData)(nil),        // 6: dev_cooling_model.GasketData
	(*DataResult)(nil),        // 7: dev_cooling_model.DataResult
	(*CapResult)(nil),         // 8: dev_cooling_model.CapResult
	(*TubeSheetResult)(nil),   // 9: dev_cooling_model.TubeSheetResult
	(*TubeResult)(nil),        // 10: dev_cooling_model.TubeResult
	(*BoltResult)(nil),        // 11: dev_cooling_model.BoltResult
	(*GasketResult)(nil),      // 12: dev_cooling_model.GasketResult
	(*Condition)(nil),         // 13: dev_cooling_model.Condition
	(*Calculated)(nil),        // 14: dev_cooling_model.Calculated
	(*CalcAuxiliary)(nil),     // 15: dev_cooling_model.CalcAuxiliary
	(*CalcBolt)(nil),          // 16: dev_cooling_model.CalcBolt
	(*CalcTubeSheet)(nil),     // 17: dev_cooling_model.CalcTubeSheet
	(*CalcCap)(nil),           // 18: dev_cooling_model.CalcCap
	(*CalcMoment)(nil),        // 19: dev_cooling_model.CalcMoment
	(*Formulas)(nil),          // 20: dev_cooling_model.Formulas
	(*AuxiliaryFormulas)(nil), // 21: dev_cooling_model.AuxiliaryFormulas
	(*BoltFormulas)(nil),      // 22: dev_cooling_model.BoltFormulas
	(*TubeSheetFormulas)(nil), // 23: dev_cooling_model.TubeSheetFormulas
	(*CapFormulas)(nil),       // 24: dev_cooling_model.CapFormulas
	(*MomentFormulas)(nil),    // 25: dev_cooling_model.MomentFormulas
	(*GasketData_Data)(nil),   // 26: dev_cooling_model.GasketData.Data
}
var file_moment_calc_api_dev_cooling_model_proto_depIdxs = []int32{
	1,  // 0: dev_cooling_model.CapData.material:type_name -> dev_cooling_model.MaterialData
	1,  // 1: dev_cooling_model.TubeSheetData.material:type_name -> dev_cooling_model.MaterialData
	1,  // 2: dev_cooling_model.TubeData.material:type_name -> dev_cooling_model.MaterialData
	1,  // 3: dev_cooling_model.BoltData.material:type_name -> dev_cooling_model.MaterialData
	26, // 4: dev_cooling_model.GasketData.data:type_name -> dev_cooling_model.GasketData.Data
	13, // 5: dev_cooling_model.Calculated.condition1:type_name -> dev_cooling_model.Condition
	13, // 6: dev_cooling_model.Calculated.condition2:type_name -> dev_cooling_model.Condition
	15, // 7: dev_cooling_model.Calculated.auxiliary:type_name -> dev_cooling_model.CalcAuxiliary
	16, // 8: dev_cooling_model.Calculated.bolt:type_name -> dev_cooling_model.CalcBolt
	13, // 9: dev_cooling_model.Calculated.gasketCond:type_name -> dev_cooling_model.Condition
	17, // 10: dev_cooling_model.Calculated.tubeSheet:type_name -> dev_cooling_model.CalcTubeSheet
	18, // 11: dev_cooling_model.Calculated.cap:type_name -> dev_cooling_model.CalcCap
	19, // 12: dev_cooling_model.Calculated.moment:type_name -> dev_cooling_model.CalcMoment
	13, // 13: dev_cooling_model.CalcBolt.testCond:type_name -> dev_cooling_model.Condition
	13, // 14: dev_cooling_model.CalcBolt.workCond:type_name -> dev_cooling_model.Condition
	13, // 15: dev_cooling_model.CalcTubeSheet.condition:type_name -> dev_cooling_model.Condition
	13, // 16: dev_cooling_model.CalcTubeSheet.strength:type_name -> dev_cooling_model.Condition
	21, // 17: dev_cooling_model.Formulas.auxiliary:type_name -> dev_cooling_model.AuxiliaryFormulas
	22, // 18: dev_cooling_model.Formulas.bolt:type_name -> dev_cooling_model.BoltFormulas
	23, // 19: dev_cooling_model.Formulas.tubeSheet:type_name -> dev_cooling_model.TubeSheetFormulas
	24, // 20: dev_cooling_model.Formulas.cap:type_name -> dev_cooling_model.CapFormulas
	25, // 21: dev_cooling_model.Formulas.moment:type_name -> dev_cooling_model.MomentFormulas
	0,  // 22: dev_cooling_model.GasketData.Data.type:type_name -> dev_cooling_model.GasketData.Type
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_moment_calc_api_dev_cooling_model_proto_init() }
func file_moment_calc_api_dev_cooling_model_proto_init() {
	if File_moment_calc_api_dev_cooling_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TubeSheetData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TubeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoltData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TubeSheetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TubeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoltResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasketResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Calculated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcAuxiliary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcBolt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcTubeSheet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcCap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcMoment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Formulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuxiliaryFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoltFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TubeSheetFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MomentFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_dev_cooling_model_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasketData_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_moment_calc_api_dev_cooling_model_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_moment_calc_api_dev_cooling_model_proto_goTypes,
		DependencyIndexes: file_moment_calc_api_dev_cooling_model_proto_depIdxs,
		EnumInfos:         file_moment_calc_api_dev_cooling_model_proto_enumTypes,
		MessageInfos:      file_moment_calc_api_dev_cooling_model_proto_msgTypes,
	}.Build()
	File_moment_calc_api_dev_cooling_model_proto = out.File
	file_moment_calc_api_dev_cooling_model_proto_rawDesc = nil
	file_moment_calc_api_dev_cooling_model_proto_goTypes = nil
	file_moment_calc_api_dev_cooling_model_proto_depIdxs = nil
}
