// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: moment/calc_api.proto

package calc_api

import (
	cap_model "github.com/Alexander272/sealur_proto/api/moment/calc_api/cap_model"
	dev_cooling_model "github.com/Alexander272/sealur_proto/api/moment/calc_api/dev_cooling_model"
	express_circle_model "github.com/Alexander272/sealur_proto/api/moment/calc_api/express_circle_model"
	express_rectangle_model "github.com/Alexander272/sealur_proto/api/moment/calc_api/express_rectangle_model"
	flange_model "github.com/Alexander272/sealur_proto/api/moment/calc_api/flange_model"
	float_model "github.com/Alexander272/sealur_proto/api/moment/calc_api/float_model"
	gas_cooling_model "github.com/Alexander272/sealur_proto/api/moment/calc_api/gas_cooling_model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FlangeRequest_Flanges int32

const (
	// Изолированные фланцы
	FlangeRequest_isolated FlangeRequest_Flanges = 0
	// Неизолированные фланцы
	FlangeRequest_nonIsolated FlangeRequest_Flanges = 1
	// Задается вручную
	FlangeRequest_manually FlangeRequest_Flanges = 2
)

// Enum value maps for FlangeRequest_Flanges.
var (
	FlangeRequest_Flanges_name = map[int32]string{
		0: "isolated",
		1: "nonIsolated",
		2: "manually",
	}
	FlangeRequest_Flanges_value = map[string]int32{
		"isolated":    0,
		"nonIsolated": 1,
		"manually":    2,
	}
)

func (x FlangeRequest_Flanges) Enum() *FlangeRequest_Flanges {
	p := new(FlangeRequest_Flanges)
	*p = x
	return p
}

func (x FlangeRequest_Flanges) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlangeRequest_Flanges) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[0].Descriptor()
}

func (FlangeRequest_Flanges) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[0]
}

func (x FlangeRequest_Flanges) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlangeRequest_Flanges.Descriptor instead.
func (FlangeRequest_Flanges) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{0, 0}
}

type FlangeRequest_Type int32

const (
	// Болт
	FlangeRequest_bolt FlangeRequest_Type = 0
	// Шпилька
	FlangeRequest_pin FlangeRequest_Type = 1
)

// Enum value maps for FlangeRequest_Type.
var (
	FlangeRequest_Type_name = map[int32]string{
		0: "bolt",
		1: "pin",
	}
	FlangeRequest_Type_value = map[string]int32{
		"bolt": 0,
		"pin":  1,
	}
)

func (x FlangeRequest_Type) Enum() *FlangeRequest_Type {
	p := new(FlangeRequest_Type)
	*p = x
	return p
}

func (x FlangeRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlangeRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[1].Descriptor()
}

func (FlangeRequest_Type) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[1]
}

func (x FlangeRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlangeRequest_Type.Descriptor instead.
func (FlangeRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{0, 1}
}

type FlangeRequest_Condition int32

const (
	// Неконтролируемая затяжка
	FlangeRequest_uncontrollable FlangeRequest_Condition = 0
	// Контроль по крутящему моменту
	FlangeRequest_controllable FlangeRequest_Condition = 1
	// Контроль по вытяжке шпилек
	FlangeRequest_controllablePin FlangeRequest_Condition = 2
)

// Enum value maps for FlangeRequest_Condition.
var (
	FlangeRequest_Condition_name = map[int32]string{
		0: "uncontrollable",
		1: "controllable",
		2: "controllablePin",
	}
	FlangeRequest_Condition_value = map[string]int32{
		"uncontrollable":  0,
		"controllable":    1,
		"controllablePin": 2,
	}
)

func (x FlangeRequest_Condition) Enum() *FlangeRequest_Condition {
	p := new(FlangeRequest_Condition)
	*p = x
	return p
}

func (x FlangeRequest_Condition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlangeRequest_Condition) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[2].Descriptor()
}

func (FlangeRequest_Condition) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[2]
}

func (x FlangeRequest_Condition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlangeRequest_Condition.Descriptor instead.
func (FlangeRequest_Condition) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{0, 2}
}

type FlangeRequest_Calcutation int32

const (
	// Расчет основных величин
	FlangeRequest_basis FlangeRequest_Calcutation = 0
	// Прочностной
	FlangeRequest_strength FlangeRequest_Calcutation = 1
)

// Enum value maps for FlangeRequest_Calcutation.
var (
	FlangeRequest_Calcutation_name = map[int32]string{
		0: "basis",
		1: "strength",
	}
	FlangeRequest_Calcutation_value = map[string]int32{
		"basis":    0,
		"strength": 1,
	}
)

func (x FlangeRequest_Calcutation) Enum() *FlangeRequest_Calcutation {
	p := new(FlangeRequest_Calcutation)
	*p = x
	return p
}

func (x FlangeRequest_Calcutation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlangeRequest_Calcutation) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[3].Descriptor()
}

func (FlangeRequest_Calcutation) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[3]
}

func (x FlangeRequest_Calcutation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlangeRequest_Calcutation.Descriptor instead.
func (FlangeRequest_Calcutation) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{0, 3}
}

type CapRequestOld_Flanges int32

const (
	CapRequestOld_isolated    CapRequestOld_Flanges = 0
	CapRequestOld_nonIsolated CapRequestOld_Flanges = 1
	CapRequestOld_manually    CapRequestOld_Flanges = 2
)

// Enum value maps for CapRequestOld_Flanges.
var (
	CapRequestOld_Flanges_name = map[int32]string{
		0: "isolated",
		1: "nonIsolated",
		2: "manually",
	}
	CapRequestOld_Flanges_value = map[string]int32{
		"isolated":    0,
		"nonIsolated": 1,
		"manually":    2,
	}
)

func (x CapRequestOld_Flanges) Enum() *CapRequestOld_Flanges {
	p := new(CapRequestOld_Flanges)
	*p = x
	return p
}

func (x CapRequestOld_Flanges) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapRequestOld_Flanges) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[4].Descriptor()
}

func (CapRequestOld_Flanges) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[4]
}

func (x CapRequestOld_Flanges) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CapRequestOld_Flanges.Descriptor instead.
func (CapRequestOld_Flanges) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{2, 0}
}

type CapRequestOld_Type int32

const (
	CapRequestOld_bolt CapRequestOld_Type = 0
	CapRequestOld_pin  CapRequestOld_Type = 1
)

// Enum value maps for CapRequestOld_Type.
var (
	CapRequestOld_Type_name = map[int32]string{
		0: "bolt",
		1: "pin",
	}
	CapRequestOld_Type_value = map[string]int32{
		"bolt": 0,
		"pin":  1,
	}
)

func (x CapRequestOld_Type) Enum() *CapRequestOld_Type {
	p := new(CapRequestOld_Type)
	*p = x
	return p
}

func (x CapRequestOld_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapRequestOld_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[5].Descriptor()
}

func (CapRequestOld_Type) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[5]
}

func (x CapRequestOld_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CapRequestOld_Type.Descriptor instead.
func (CapRequestOld_Type) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{2, 1}
}

type CapRequestOld_Condition int32

const (
	CapRequestOld_uncontrollable  CapRequestOld_Condition = 0
	CapRequestOld_controllable    CapRequestOld_Condition = 1
	CapRequestOld_controllablePin CapRequestOld_Condition = 2
)

// Enum value maps for CapRequestOld_Condition.
var (
	CapRequestOld_Condition_name = map[int32]string{
		0: "uncontrollable",
		1: "controllable",
		2: "controllablePin",
	}
	CapRequestOld_Condition_value = map[string]int32{
		"uncontrollable":  0,
		"controllable":    1,
		"controllablePin": 2,
	}
)

func (x CapRequestOld_Condition) Enum() *CapRequestOld_Condition {
	p := new(CapRequestOld_Condition)
	*p = x
	return p
}

func (x CapRequestOld_Condition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapRequestOld_Condition) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[6].Descriptor()
}

func (CapRequestOld_Condition) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[6]
}

func (x CapRequestOld_Condition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CapRequestOld_Condition.Descriptor instead.
func (CapRequestOld_Condition) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{2, 2}
}

type CapRequestOld_Calcutation int32

const (
	CapRequestOld_basis    CapRequestOld_Calcutation = 0
	CapRequestOld_strength CapRequestOld_Calcutation = 1
)

// Enum value maps for CapRequestOld_Calcutation.
var (
	CapRequestOld_Calcutation_name = map[int32]string{
		0: "basis",
		1: "strength",
	}
	CapRequestOld_Calcutation_value = map[string]int32{
		"basis":    0,
		"strength": 1,
	}
)

func (x CapRequestOld_Calcutation) Enum() *CapRequestOld_Calcutation {
	p := new(CapRequestOld_Calcutation)
	*p = x
	return p
}

func (x CapRequestOld_Calcutation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapRequestOld_Calcutation) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[7].Descriptor()
}

func (CapRequestOld_Calcutation) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[7]
}

func (x CapRequestOld_Calcutation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CapRequestOld_Calcutation.Descriptor instead.
func (CapRequestOld_Calcutation) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{2, 3}
}

type FloatRequest_Condition int32

const (
	FloatRequest_uncontrollable  FloatRequest_Condition = 0
	FloatRequest_controllable    FloatRequest_Condition = 1
	FloatRequest_controllablePin FloatRequest_Condition = 2
)

// Enum value maps for FloatRequest_Condition.
var (
	FloatRequest_Condition_name = map[int32]string{
		0: "uncontrollable",
		1: "controllable",
		2: "controllablePin",
	}
	FloatRequest_Condition_value = map[string]int32{
		"uncontrollable":  0,
		"controllable":    1,
		"controllablePin": 2,
	}
)

func (x FloatRequest_Condition) Enum() *FloatRequest_Condition {
	p := new(FloatRequest_Condition)
	*p = x
	return p
}

func (x FloatRequest_Condition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FloatRequest_Condition) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[8].Descriptor()
}

func (FloatRequest_Condition) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[8]
}

func (x FloatRequest_Condition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FloatRequest_Condition.Descriptor instead.
func (FloatRequest_Condition) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{6, 0}
}

type FloatRequest_Type int32

const (
	FloatRequest_bolt FloatRequest_Type = 0
	FloatRequest_pin  FloatRequest_Type = 1
)

// Enum value maps for FloatRequest_Type.
var (
	FloatRequest_Type_name = map[int32]string{
		0: "bolt",
		1: "pin",
	}
	FloatRequest_Type_value = map[string]int32{
		"bolt": 0,
		"pin":  1,
	}
)

func (x FloatRequest_Type) Enum() *FloatRequest_Type {
	p := new(FloatRequest_Type)
	*p = x
	return p
}

func (x FloatRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FloatRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[9].Descriptor()
}

func (FloatRequest_Type) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[9]
}

func (x FloatRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FloatRequest_Type.Descriptor instead.
func (FloatRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{6, 1}
}

type DevCoolingRequest_TypeBolt int32

const (
	DevCoolingRequest_bolt DevCoolingRequest_TypeBolt = 0
	DevCoolingRequest_pin  DevCoolingRequest_TypeBolt = 1
)

// Enum value maps for DevCoolingRequest_TypeBolt.
var (
	DevCoolingRequest_TypeBolt_name = map[int32]string{
		0: "bolt",
		1: "pin",
	}
	DevCoolingRequest_TypeBolt_value = map[string]int32{
		"bolt": 0,
		"pin":  1,
	}
)

func (x DevCoolingRequest_TypeBolt) Enum() *DevCoolingRequest_TypeBolt {
	p := new(DevCoolingRequest_TypeBolt)
	*p = x
	return p
}

func (x DevCoolingRequest_TypeBolt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DevCoolingRequest_TypeBolt) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[10].Descriptor()
}

func (DevCoolingRequest_TypeBolt) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[10]
}

func (x DevCoolingRequest_TypeBolt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DevCoolingRequest_TypeBolt.Descriptor instead.
func (DevCoolingRequest_TypeBolt) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{8, 0}
}

type DevCoolingRequest_MountingMethod int32

const (
	DevCoolingRequest_AllThickness  DevCoolingRequest_MountingMethod = 0
	DevCoolingRequest_PartThickness DevCoolingRequest_MountingMethod = 1
	DevCoolingRequest_SteelSheet    DevCoolingRequest_MountingMethod = 2
)

// Enum value maps for DevCoolingRequest_MountingMethod.
var (
	DevCoolingRequest_MountingMethod_name = map[int32]string{
		0: "AllThickness",
		1: "PartThickness",
		2: "SteelSheet",
	}
	DevCoolingRequest_MountingMethod_value = map[string]int32{
		"AllThickness":  0,
		"PartThickness": 1,
		"SteelSheet":    2,
	}
)

func (x DevCoolingRequest_MountingMethod) Enum() *DevCoolingRequest_MountingMethod {
	p := new(DevCoolingRequest_MountingMethod)
	*p = x
	return p
}

func (x DevCoolingRequest_MountingMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DevCoolingRequest_MountingMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[11].Descriptor()
}

func (DevCoolingRequest_MountingMethod) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[11]
}

func (x DevCoolingRequest_MountingMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DevCoolingRequest_MountingMethod.Descriptor instead.
func (DevCoolingRequest_MountingMethod) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{8, 1}
}

type DevCoolingRequest_Mounting int32

const (
	DevCoolingRequest_flaring DevCoolingRequest_Mounting = 0
	DevCoolingRequest_welding DevCoolingRequest_Mounting = 1
	DevCoolingRequest_rolling DevCoolingRequest_Mounting = 2
)

// Enum value maps for DevCoolingRequest_Mounting.
var (
	DevCoolingRequest_Mounting_name = map[int32]string{
		0: "flaring",
		1: "welding",
		2: "rolling",
	}
	DevCoolingRequest_Mounting_value = map[string]int32{
		"flaring": 0,
		"welding": 1,
		"rolling": 2,
	}
)

func (x DevCoolingRequest_Mounting) Enum() *DevCoolingRequest_Mounting {
	p := new(DevCoolingRequest_Mounting)
	*p = x
	return p
}

func (x DevCoolingRequest_Mounting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DevCoolingRequest_Mounting) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[12].Descriptor()
}

func (DevCoolingRequest_Mounting) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[12]
}

func (x DevCoolingRequest_Mounting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DevCoolingRequest_Mounting.Descriptor instead.
func (DevCoolingRequest_Mounting) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{8, 2}
}

type DevCoolingRequest_TypeMounting int32

const (
	DevCoolingRequest_nothing DevCoolingRequest_TypeMounting = 0
	DevCoolingRequest_flat    DevCoolingRequest_TypeMounting = 1
	DevCoolingRequest_groove  DevCoolingRequest_TypeMounting = 2
)

// Enum value maps for DevCoolingRequest_TypeMounting.
var (
	DevCoolingRequest_TypeMounting_name = map[int32]string{
		0: "nothing",
		1: "flat",
		2: "groove",
	}
	DevCoolingRequest_TypeMounting_value = map[string]int32{
		"nothing": 0,
		"flat":    1,
		"groove":  2,
	}
)

func (x DevCoolingRequest_TypeMounting) Enum() *DevCoolingRequest_TypeMounting {
	p := new(DevCoolingRequest_TypeMounting)
	*p = x
	return p
}

func (x DevCoolingRequest_TypeMounting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DevCoolingRequest_TypeMounting) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[13].Descriptor()
}

func (DevCoolingRequest_TypeMounting) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[13]
}

func (x DevCoolingRequest_TypeMounting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DevCoolingRequest_TypeMounting.Descriptor instead.
func (DevCoolingRequest_TypeMounting) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{8, 3}
}

type DevCoolingRequest_CameraDiagram int32

const (
	DevCoolingRequest_schema1 DevCoolingRequest_CameraDiagram = 0
	DevCoolingRequest_schema2 DevCoolingRequest_CameraDiagram = 1
	DevCoolingRequest_schema3 DevCoolingRequest_CameraDiagram = 2
	DevCoolingRequest_schema4 DevCoolingRequest_CameraDiagram = 3
	DevCoolingRequest_schema5 DevCoolingRequest_CameraDiagram = 4
)

// Enum value maps for DevCoolingRequest_CameraDiagram.
var (
	DevCoolingRequest_CameraDiagram_name = map[int32]string{
		0: "schema1",
		1: "schema2",
		2: "schema3",
		3: "schema4",
		4: "schema5",
	}
	DevCoolingRequest_CameraDiagram_value = map[string]int32{
		"schema1": 0,
		"schema2": 1,
		"schema3": 2,
		"schema4": 3,
		"schema5": 4,
	}
)

func (x DevCoolingRequest_CameraDiagram) Enum() *DevCoolingRequest_CameraDiagram {
	p := new(DevCoolingRequest_CameraDiagram)
	*p = x
	return p
}

func (x DevCoolingRequest_CameraDiagram) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DevCoolingRequest_CameraDiagram) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[14].Descriptor()
}

func (DevCoolingRequest_CameraDiagram) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[14]
}

func (x DevCoolingRequest_CameraDiagram) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DevCoolingRequest_CameraDiagram.Descriptor instead.
func (DevCoolingRequest_CameraDiagram) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{8, 4}
}

type DevCoolingRequest_Layout int32

const (
	DevCoolingRequest_lSchema1 DevCoolingRequest_Layout = 0
	DevCoolingRequest_lSchema2 DevCoolingRequest_Layout = 1
)

// Enum value maps for DevCoolingRequest_Layout.
var (
	DevCoolingRequest_Layout_name = map[int32]string{
		0: "lSchema1",
		1: "lSchema2",
	}
	DevCoolingRequest_Layout_value = map[string]int32{
		"lSchema1": 0,
		"lSchema2": 1,
	}
)

func (x DevCoolingRequest_Layout) Enum() *DevCoolingRequest_Layout {
	p := new(DevCoolingRequest_Layout)
	*p = x
	return p
}

func (x DevCoolingRequest_Layout) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DevCoolingRequest_Layout) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[15].Descriptor()
}

func (DevCoolingRequest_Layout) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[15]
}

func (x DevCoolingRequest_Layout) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DevCoolingRequest_Layout.Descriptor instead.
func (DevCoolingRequest_Layout) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{8, 5}
}

type ExpressCircleRequest_TypeBolt int32

const (
	ExpressCircleRequest_bolt ExpressCircleRequest_TypeBolt = 0
	ExpressCircleRequest_pin  ExpressCircleRequest_TypeBolt = 1
)

// Enum value maps for ExpressCircleRequest_TypeBolt.
var (
	ExpressCircleRequest_TypeBolt_name = map[int32]string{
		0: "bolt",
		1: "pin",
	}
	ExpressCircleRequest_TypeBolt_value = map[string]int32{
		"bolt": 0,
		"pin":  1,
	}
)

func (x ExpressCircleRequest_TypeBolt) Enum() *ExpressCircleRequest_TypeBolt {
	p := new(ExpressCircleRequest_TypeBolt)
	*p = x
	return p
}

func (x ExpressCircleRequest_TypeBolt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpressCircleRequest_TypeBolt) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[16].Descriptor()
}

func (ExpressCircleRequest_TypeBolt) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[16]
}

func (x ExpressCircleRequest_TypeBolt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpressCircleRequest_TypeBolt.Descriptor instead.
func (ExpressCircleRequest_TypeBolt) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{12, 0}
}

type ExpressCircleRequest_Condition int32

const (
	ExpressCircleRequest_uncontrollable  ExpressCircleRequest_Condition = 0
	ExpressCircleRequest_controllable    ExpressCircleRequest_Condition = 1
	ExpressCircleRequest_controllablePin ExpressCircleRequest_Condition = 2
)

// Enum value maps for ExpressCircleRequest_Condition.
var (
	ExpressCircleRequest_Condition_name = map[int32]string{
		0: "uncontrollable",
		1: "controllable",
		2: "controllablePin",
	}
	ExpressCircleRequest_Condition_value = map[string]int32{
		"uncontrollable":  0,
		"controllable":    1,
		"controllablePin": 2,
	}
)

func (x ExpressCircleRequest_Condition) Enum() *ExpressCircleRequest_Condition {
	p := new(ExpressCircleRequest_Condition)
	*p = x
	return p
}

func (x ExpressCircleRequest_Condition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpressCircleRequest_Condition) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[17].Descriptor()
}

func (ExpressCircleRequest_Condition) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[17]
}

func (x ExpressCircleRequest_Condition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpressCircleRequest_Condition.Descriptor instead.
func (ExpressCircleRequest_Condition) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{12, 1}
}

type ExpressRectangleRequest_TypeBolt int32

const (
	ExpressRectangleRequest_bolt ExpressRectangleRequest_TypeBolt = 0
	ExpressRectangleRequest_pin  ExpressRectangleRequest_TypeBolt = 1
)

// Enum value maps for ExpressRectangleRequest_TypeBolt.
var (
	ExpressRectangleRequest_TypeBolt_name = map[int32]string{
		0: "bolt",
		1: "pin",
	}
	ExpressRectangleRequest_TypeBolt_value = map[string]int32{
		"bolt": 0,
		"pin":  1,
	}
)

func (x ExpressRectangleRequest_TypeBolt) Enum() *ExpressRectangleRequest_TypeBolt {
	p := new(ExpressRectangleRequest_TypeBolt)
	*p = x
	return p
}

func (x ExpressRectangleRequest_TypeBolt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpressRectangleRequest_TypeBolt) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[18].Descriptor()
}

func (ExpressRectangleRequest_TypeBolt) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[18]
}

func (x ExpressRectangleRequest_TypeBolt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpressRectangleRequest_TypeBolt.Descriptor instead.
func (ExpressRectangleRequest_TypeBolt) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{14, 0}
}

type ExpressRectangleRequest_Condition int32

const (
	ExpressRectangleRequest_uncontrollable  ExpressRectangleRequest_Condition = 0
	ExpressRectangleRequest_controllable    ExpressRectangleRequest_Condition = 1
	ExpressRectangleRequest_controllablePin ExpressRectangleRequest_Condition = 2
)

// Enum value maps for ExpressRectangleRequest_Condition.
var (
	ExpressRectangleRequest_Condition_name = map[int32]string{
		0: "uncontrollable",
		1: "controllable",
		2: "controllablePin",
	}
	ExpressRectangleRequest_Condition_value = map[string]int32{
		"uncontrollable":  0,
		"controllable":    1,
		"controllablePin": 2,
	}
)

func (x ExpressRectangleRequest_Condition) Enum() *ExpressRectangleRequest_Condition {
	p := new(ExpressRectangleRequest_Condition)
	*p = x
	return p
}

func (x ExpressRectangleRequest_Condition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpressRectangleRequest_Condition) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[19].Descriptor()
}

func (ExpressRectangleRequest_Condition) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[19]
}

func (x ExpressRectangleRequest_Condition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpressRectangleRequest_Condition.Descriptor instead.
func (ExpressRectangleRequest_Condition) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{14, 1}
}

type FlangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Расчетное давление
	Pressure float64 `protobuf:"fixed64,1,opt,name=pressure,proto3" json:"pressure,omitempty"`
	// Внешняя осевая сила
	AxialForce int32 `protobuf:"varint,2,opt,name=axialForce,proto3" json:"axialForce,omitempty"`
	// Внешний изгибающий момент
	BendingMoment int32 `protobuf:"varint,3,opt,name=bendingMoment,proto3" json:"bendingMoment,omitempty"`
	// Расчетная температура
	Temp float64 `protobuf:"fixed64,4,opt,name=temp,proto3" json:"temp,omitempty"`
	// Условия работы (true - рабочие, false - испытания)
	IsWork bool `protobuf:"varint,5,opt,name=isWork,proto3" json:"isWork,omitempty"`
	// Температура элементов фланцевого соединения
	Flanges FlangeRequest_Flanges `protobuf:"varint,6,opt,name=flanges,proto3,enum=calc_api.FlangeRequest_Flanges" json:"flanges,omitempty"`
	// Одинаковые фланцы
	IsSameFlange bool `protobuf:"varint,7,opt,name=isSameFlange,proto3" json:"isSameFlange,omitempty"`
	// Закладная деталь
	IsEmbedded bool `protobuf:"varint,8,opt,name=isEmbedded,proto3" json:"isEmbedded,omitempty"`
	// Тип соединения
	Type FlangeRequest_Type `protobuf:"varint,9,opt,name=type,proto3,enum=calc_api.FlangeRequest_Type" json:"type,omitempty"`
	// Условие затяжки
	Condition FlangeRequest_Condition `protobuf:"varint,10,opt,name=condition,proto3,enum=calc_api.FlangeRequest_Condition" json:"condition,omitempty"`
	// Расчет
	Calculation FlangeRequest_Calcutation `protobuf:"varint,11,opt,name=calculation,proto3,enum=calc_api.FlangeRequest_Calcutation" json:"calculation,omitempty"`
	// Исходные данные для первого фланца
	FlangesData []*flange_model.FlangeData `protobuf:"bytes,12,rep,name=flangesData,proto3" json:"flangesData,omitempty"`
	// Исходные данные для болт/шпилька
	Bolts *flange_model.BoltData `protobuf:"bytes,13,opt,name=bolts,proto3" json:"bolts,omitempty"`
	// Исходные данные прокладки
	Gasket *flange_model.GasketData `protobuf:"bytes,14,opt,name=gasket,proto3" json:"gasket,omitempty"`
	// Исходные данные для закладной детали
	Embed *flange_model.EmbedData `protobuf:"bytes,15,opt,name=embed,proto3" json:"embed,omitempty"`
	// Наличие шайб
	IsUseWasher bool `protobuf:"varint,16,opt,name=isUseWasher,proto3" json:"isUseWasher,omitempty"`
	// Исходные данные для шайб
	Washer []*flange_model.WasherData `protobuf:"bytes,17,rep,name=washer,proto3" json:"washer,omitempty"`
	// Выводить ли формулы
	IsNeedFormulas bool `protobuf:"varint,18,opt,name=isNeedFormulas,proto3" json:"isNeedFormulas,omitempty"`
}

func (x *FlangeRequest) Reset() {
	*x = FlangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlangeRequest) ProtoMessage() {}

func (x *FlangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlangeRequest.ProtoReflect.Descriptor instead.
func (*FlangeRequest) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{0}
}

func (x *FlangeRequest) GetPressure() float64 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *FlangeRequest) GetAxialForce() int32 {
	if x != nil {
		return x.AxialForce
	}
	return 0
}

func (x *FlangeRequest) GetBendingMoment() int32 {
	if x != nil {
		return x.BendingMoment
	}
	return 0
}

func (x *FlangeRequest) GetTemp() float64 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *FlangeRequest) GetIsWork() bool {
	if x != nil {
		return x.IsWork
	}
	return false
}

func (x *FlangeRequest) GetFlanges() FlangeRequest_Flanges {
	if x != nil {
		return x.Flanges
	}
	return FlangeRequest_isolated
}

func (x *FlangeRequest) GetIsSameFlange() bool {
	if x != nil {
		return x.IsSameFlange
	}
	return false
}

func (x *FlangeRequest) GetIsEmbedded() bool {
	if x != nil {
		return x.IsEmbedded
	}
	return false
}

func (x *FlangeRequest) GetType() FlangeRequest_Type {
	if x != nil {
		return x.Type
	}
	return FlangeRequest_bolt
}

func (x *FlangeRequest) GetCondition() FlangeRequest_Condition {
	if x != nil {
		return x.Condition
	}
	return FlangeRequest_uncontrollable
}

func (x *FlangeRequest) GetCalculation() FlangeRequest_Calcutation {
	if x != nil {
		return x.Calculation
	}
	return FlangeRequest_basis
}

func (x *FlangeRequest) GetFlangesData() []*flange_model.FlangeData {
	if x != nil {
		return x.FlangesData
	}
	return nil
}

func (x *FlangeRequest) GetBolts() *flange_model.BoltData {
	if x != nil {
		return x.Bolts
	}
	return nil
}

func (x *FlangeRequest) GetGasket() *flange_model.GasketData {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *FlangeRequest) GetEmbed() *flange_model.EmbedData {
	if x != nil {
		return x.Embed
	}
	return nil
}

func (x *FlangeRequest) GetIsUseWasher() bool {
	if x != nil {
		return x.IsUseWasher
	}
	return false
}

func (x *FlangeRequest) GetWasher() []*flange_model.WasherData {
	if x != nil {
		return x.Washer
	}
	return nil
}

func (x *FlangeRequest) GetIsNeedFormulas() bool {
	if x != nil {
		return x.IsNeedFormulas
	}
	return false
}

type FlangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Исходные данные для расчета
	Data *flange_model.DataResult `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Исходные данные для фланцев
	Flanges []*flange_model.FlangeResult `protobuf:"bytes,2,rep,name=flanges,proto3" json:"flanges,omitempty"`
	// Исходные данные для болт/шпилька
	Bolt *flange_model.BoltResult `protobuf:"bytes,3,opt,name=bolt,proto3" json:"bolt,omitempty"`
	// Исходные данные прокладки
	Gasket *flange_model.GasketResult `protobuf:"bytes,4,opt,name=gasket,proto3" json:"gasket,omitempty"`
	// Исходные данные для закладной детали
	Embed *flange_model.EmbedResult `protobuf:"bytes,5,opt,name=embed,proto3" json:"embed,omitempty"`
	// Исходные данные для шайб
	Washers []*flange_model.WasherResult `protobuf:"bytes,6,rep,name=washers,proto3" json:"washers,omitempty"`
	// Расчеты
	Calc *flange_model.Calculated `protobuf:"bytes,7,opt,name=calc,proto3" json:"calc,omitempty"`
	// Формулы
	Formulas *flange_model.Formulas `protobuf:"bytes,8,opt,name=formulas,proto3" json:"formulas,omitempty"`
}

func (x *FlangeResponse) Reset() {
	*x = FlangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlangeResponse) ProtoMessage() {}

func (x *FlangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlangeResponse.ProtoReflect.Descriptor instead.
func (*FlangeResponse) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{1}
}

func (x *FlangeResponse) GetData() *flange_model.DataResult {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FlangeResponse) GetFlanges() []*flange_model.FlangeResult {
	if x != nil {
		return x.Flanges
	}
	return nil
}

func (x *FlangeResponse) GetBolt() *flange_model.BoltResult {
	if x != nil {
		return x.Bolt
	}
	return nil
}

func (x *FlangeResponse) GetGasket() *flange_model.GasketResult {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *FlangeResponse) GetEmbed() *flange_model.EmbedResult {
	if x != nil {
		return x.Embed
	}
	return nil
}

func (x *FlangeResponse) GetWashers() []*flange_model.WasherResult {
	if x != nil {
		return x.Washers
	}
	return nil
}

func (x *FlangeResponse) GetCalc() *flange_model.Calculated {
	if x != nil {
		return x.Calc
	}
	return nil
}

func (x *FlangeResponse) GetFormulas() *flange_model.Formulas {
	if x != nil {
		return x.Formulas
	}
	return nil
}

type CapRequestOld struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pressure       float64                   `protobuf:"fixed64,1,opt,name=pressure,proto3" json:"pressure,omitempty"`
	AxialForce     int32                     `protobuf:"varint,2,opt,name=axialForce,proto3" json:"axialForce,omitempty"`
	Temp           float64                   `protobuf:"fixed64,3,opt,name=temp,proto3" json:"temp,omitempty"`
	IsWork         bool                      `protobuf:"varint,4,opt,name=isWork,proto3" json:"isWork,omitempty"`
	Flanges        CapRequestOld_Flanges     `protobuf:"varint,5,opt,name=flanges,proto3,enum=calc_api.CapRequestOld_Flanges" json:"flanges,omitempty"`
	IsEmbedded     bool                      `protobuf:"varint,6,opt,name=isEmbedded,proto3" json:"isEmbedded,omitempty"`
	Type           CapRequestOld_Type        `protobuf:"varint,7,opt,name=type,proto3,enum=calc_api.CapRequestOld_Type" json:"type,omitempty"`
	Condition      CapRequestOld_Condition   `protobuf:"varint,8,opt,name=condition,proto3,enum=calc_api.CapRequestOld_Condition" json:"condition,omitempty"`
	Calculation    CapRequestOld_Calcutation `protobuf:"varint,9,opt,name=calculation,proto3,enum=calc_api.CapRequestOld_Calcutation" json:"calculation,omitempty"`
	FlangeData     *cap_model.FlangeData     `protobuf:"bytes,10,opt,name=flangeData,proto3" json:"flangeData,omitempty"`
	CapData        *cap_model.CapData        `protobuf:"bytes,11,opt,name=capData,proto3" json:"capData,omitempty"`
	Bolts          *cap_model.BoltData       `protobuf:"bytes,12,opt,name=bolts,proto3" json:"bolts,omitempty"`
	Gasket         *cap_model.GasketData     `protobuf:"bytes,13,opt,name=gasket,proto3" json:"gasket,omitempty"`
	Embed          *cap_model.EmbedData      `protobuf:"bytes,14,opt,name=embed,proto3" json:"embed,omitempty"`
	IsUseWasher    bool                      `protobuf:"varint,15,opt,name=isUseWasher,proto3" json:"isUseWasher,omitempty"`
	Washer         []*cap_model.WasherData   `protobuf:"bytes,16,rep,name=washer,proto3" json:"washer,omitempty"`
	IsNeedFormulas bool                      `protobuf:"varint,17,opt,name=isNeedFormulas,proto3" json:"isNeedFormulas,omitempty"`
}

func (x *CapRequestOld) Reset() {
	*x = CapRequestOld{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapRequestOld) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapRequestOld) ProtoMessage() {}

func (x *CapRequestOld) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapRequestOld.ProtoReflect.Descriptor instead.
func (*CapRequestOld) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{2}
}

func (x *CapRequestOld) GetPressure() float64 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *CapRequestOld) GetAxialForce() int32 {
	if x != nil {
		return x.AxialForce
	}
	return 0
}

func (x *CapRequestOld) GetTemp() float64 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *CapRequestOld) GetIsWork() bool {
	if x != nil {
		return x.IsWork
	}
	return false
}

func (x *CapRequestOld) GetFlanges() CapRequestOld_Flanges {
	if x != nil {
		return x.Flanges
	}
	return CapRequestOld_isolated
}

func (x *CapRequestOld) GetIsEmbedded() bool {
	if x != nil {
		return x.IsEmbedded
	}
	return false
}

func (x *CapRequestOld) GetType() CapRequestOld_Type {
	if x != nil {
		return x.Type
	}
	return CapRequestOld_bolt
}

func (x *CapRequestOld) GetCondition() CapRequestOld_Condition {
	if x != nil {
		return x.Condition
	}
	return CapRequestOld_uncontrollable
}

func (x *CapRequestOld) GetCalculation() CapRequestOld_Calcutation {
	if x != nil {
		return x.Calculation
	}
	return CapRequestOld_basis
}

func (x *CapRequestOld) GetFlangeData() *cap_model.FlangeData {
	if x != nil {
		return x.FlangeData
	}
	return nil
}

func (x *CapRequestOld) GetCapData() *cap_model.CapData {
	if x != nil {
		return x.CapData
	}
	return nil
}

func (x *CapRequestOld) GetBolts() *cap_model.BoltData {
	if x != nil {
		return x.Bolts
	}
	return nil
}

func (x *CapRequestOld) GetGasket() *cap_model.GasketData {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *CapRequestOld) GetEmbed() *cap_model.EmbedData {
	if x != nil {
		return x.Embed
	}
	return nil
}

func (x *CapRequestOld) GetIsUseWasher() bool {
	if x != nil {
		return x.IsUseWasher
	}
	return false
}

func (x *CapRequestOld) GetWasher() []*cap_model.WasherData {
	if x != nil {
		return x.Washer
	}
	return nil
}

func (x *CapRequestOld) GetIsNeedFormulas() bool {
	if x != nil {
		return x.IsNeedFormulas
	}
	return false
}

type CapResponseOld struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flange   *cap_model.FlangeResultOld `protobuf:"bytes,1,opt,name=flange,proto3" json:"flange,omitempty"`
	Cap      *cap_model.CapResultOld    `protobuf:"bytes,2,opt,name=cap,proto3" json:"cap,omitempty"`
	Bolt     *cap_model.BoltResult      `protobuf:"bytes,3,opt,name=bolt,proto3" json:"bolt,omitempty"`
	Gasket   *cap_model.GasketResult    `protobuf:"bytes,4,opt,name=gasket,proto3" json:"gasket,omitempty"`
	Embed    *cap_model.EmbedResult     `protobuf:"bytes,5,opt,name=embed,proto3" json:"embed,omitempty"`
	Calc     *cap_model.CalculatedCap   `protobuf:"bytes,6,opt,name=calc,proto3" json:"calc,omitempty"`
	Formulas *cap_model.CalcCapFormulas `protobuf:"bytes,7,opt,name=formulas,proto3" json:"formulas,omitempty"`
	Data     *cap_model.DataResult      `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	Washers  []*cap_model.WasherResult  `protobuf:"bytes,9,rep,name=washers,proto3" json:"washers,omitempty"`
}

func (x *CapResponseOld) Reset() {
	*x = CapResponseOld{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapResponseOld) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapResponseOld) ProtoMessage() {}

func (x *CapResponseOld) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapResponseOld.ProtoReflect.Descriptor instead.
func (*CapResponseOld) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{3}
}

func (x *CapResponseOld) GetFlange() *cap_model.FlangeResultOld {
	if x != nil {
		return x.Flange
	}
	return nil
}

func (x *CapResponseOld) GetCap() *cap_model.CapResultOld {
	if x != nil {
		return x.Cap
	}
	return nil
}

func (x *CapResponseOld) GetBolt() *cap_model.BoltResult {
	if x != nil {
		return x.Bolt
	}
	return nil
}

func (x *CapResponseOld) GetGasket() *cap_model.GasketResult {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *CapResponseOld) GetEmbed() *cap_model.EmbedResult {
	if x != nil {
		return x.Embed
	}
	return nil
}

func (x *CapResponseOld) GetCalc() *cap_model.CalculatedCap {
	if x != nil {
		return x.Calc
	}
	return nil
}

func (x *CapResponseOld) GetFormulas() *cap_model.CalcCapFormulas {
	if x != nil {
		return x.Formulas
	}
	return nil
}

func (x *CapResponseOld) GetData() *cap_model.DataResult {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CapResponseOld) GetWashers() []*cap_model.WasherResult {
	if x != nil {
		return x.Washers
	}
	return nil
}

type CapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Исходные данные для расчета
	Data *cap_model.MainData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Исходные данные для фланца
	FlangeData *cap_model.FlangeData `protobuf:"bytes,2,opt,name=flangeData,proto3" json:"flangeData,omitempty"`
	// Исходные данные для крышки
	CapData *cap_model.CapData `protobuf:"bytes,3,opt,name=capData,proto3" json:"capData,omitempty"`
	// Исходные данные для болт/шпилька
	Bolts *cap_model.BoltData `protobuf:"bytes,4,opt,name=bolts,proto3" json:"bolts,omitempty"`
	// Исходные данные прокладки
	Gasket *cap_model.GasketData `protobuf:"bytes,5,opt,name=gasket,proto3" json:"gasket,omitempty"`
	// Исходные данные для закладной детали
	Embed *cap_model.EmbedData `protobuf:"bytes,6,opt,name=embed,proto3" json:"embed,omitempty"`
	// Наличие шайб
	IsUseWasher bool `protobuf:"varint,7,opt,name=isUseWasher,proto3" json:"isUseWasher,omitempty"`
	// Исходные данные для шайб
	Washer []*cap_model.WasherData `protobuf:"bytes,8,rep,name=washer,proto3" json:"washer,omitempty"`
	// Наличие формул
	IsNeedFormulas bool `protobuf:"varint,9,opt,name=isNeedFormulas,proto3" json:"isNeedFormulas,omitempty"`
}

func (x *CapRequest) Reset() {
	*x = CapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapRequest) ProtoMessage() {}

func (x *CapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapRequest.ProtoReflect.Descriptor instead.
func (*CapRequest) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{4}
}

func (x *CapRequest) GetData() *cap_model.MainData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CapRequest) GetFlangeData() *cap_model.FlangeData {
	if x != nil {
		return x.FlangeData
	}
	return nil
}

func (x *CapRequest) GetCapData() *cap_model.CapData {
	if x != nil {
		return x.CapData
	}
	return nil
}

func (x *CapRequest) GetBolts() *cap_model.BoltData {
	if x != nil {
		return x.Bolts
	}
	return nil
}

func (x *CapRequest) GetGasket() *cap_model.GasketData {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *CapRequest) GetEmbed() *cap_model.EmbedData {
	if x != nil {
		return x.Embed
	}
	return nil
}

func (x *CapRequest) GetIsUseWasher() bool {
	if x != nil {
		return x.IsUseWasher
	}
	return false
}

func (x *CapRequest) GetWasher() []*cap_model.WasherData {
	if x != nil {
		return x.Washer
	}
	return nil
}

func (x *CapRequest) GetIsNeedFormulas() bool {
	if x != nil {
		return x.IsNeedFormulas
	}
	return false
}

type CapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Исходные данные для расчета
	Data *cap_model.DataResult `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Исходные данные для фланца
	Flange *cap_model.FlangeResult `protobuf:"bytes,2,opt,name=flange,proto3" json:"flange,omitempty"`
	// Исходные данные для крышки
	Cap *cap_model.CapResult `protobuf:"bytes,3,opt,name=cap,proto3" json:"cap,omitempty"`
	// Исходные данные для болт/шпилька
	Bolt *cap_model.BoltResult `protobuf:"bytes,4,opt,name=bolt,proto3" json:"bolt,omitempty"`
	// Исходные данные прокладки
	Gasket *cap_model.GasketResult `protobuf:"bytes,5,opt,name=gasket,proto3" json:"gasket,omitempty"`
	// Исходные данные для закладной детали
	Embed *cap_model.EmbedResult `protobuf:"bytes,6,opt,name=embed,proto3" json:"embed,omitempty"`
	// Исходные данные для шайб
	Washers []*cap_model.WasherResult `protobuf:"bytes,7,rep,name=washers,proto3" json:"washers,omitempty"`
	// Расчеты
	Calc *cap_model.Calculated `protobuf:"bytes,8,opt,name=calc,proto3" json:"calc,omitempty"`
	// Формулы
	Formulas *cap_model.Formulas `protobuf:"bytes,9,opt,name=formulas,proto3" json:"formulas,omitempty"`
}

func (x *CapResponse) Reset() {
	*x = CapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapResponse) ProtoMessage() {}

func (x *CapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapResponse.ProtoReflect.Descriptor instead.
func (*CapResponse) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{5}
}

func (x *CapResponse) GetData() *cap_model.DataResult {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CapResponse) GetFlange() *cap_model.FlangeResult {
	if x != nil {
		return x.Flange
	}
	return nil
}

func (x *CapResponse) GetCap() *cap_model.CapResult {
	if x != nil {
		return x.Cap
	}
	return nil
}

func (x *CapResponse) GetBolt() *cap_model.BoltResult {
	if x != nil {
		return x.Bolt
	}
	return nil
}

func (x *CapResponse) GetGasket() *cap_model.GasketResult {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *CapResponse) GetEmbed() *cap_model.EmbedResult {
	if x != nil {
		return x.Embed
	}
	return nil
}

func (x *CapResponse) GetWashers() []*cap_model.WasherResult {
	if x != nil {
		return x.Washers
	}
	return nil
}

func (x *CapResponse) GetCalc() *cap_model.Calculated {
	if x != nil {
		return x.Calc
	}
	return nil
}

func (x *CapResponse) GetFormulas() *cap_model.Formulas {
	if x != nil {
		return x.Formulas
	}
	return nil
}

type FloatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pressure       float64                 `protobuf:"fixed64,1,opt,name=pressure,proto3" json:"pressure,omitempty"`
	IsWork         bool                    `protobuf:"varint,2,opt,name=isWork,proto3" json:"isWork,omitempty"`
	HasThorn       bool                    `protobuf:"varint,3,opt,name=hasThorn,proto3" json:"hasThorn,omitempty"`
	Type           FloatRequest_Type       `protobuf:"varint,4,opt,name=type,proto3,enum=calc_api.FloatRequest_Type" json:"type,omitempty"`
	Condition      FloatRequest_Condition  `protobuf:"varint,5,opt,name=condition,proto3,enum=calc_api.FloatRequest_Condition" json:"condition,omitempty"`
	FlangeData     *float_model.FlangeData `protobuf:"bytes,6,opt,name=flangeData,proto3" json:"flangeData,omitempty"`
	CapData        *float_model.CapData    `protobuf:"bytes,7,opt,name=capData,proto3" json:"capData,omitempty"`
	Bolts          *float_model.BoltData   `protobuf:"bytes,8,opt,name=bolts,proto3" json:"bolts,omitempty"`
	Gasket         *float_model.GasketData `protobuf:"bytes,9,opt,name=gasket,proto3" json:"gasket,omitempty"`
	IsNeedFormulas bool                    `protobuf:"varint,10,opt,name=isNeedFormulas,proto3" json:"isNeedFormulas,omitempty"`
}

func (x *FloatRequest) Reset() {
	*x = FloatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatRequest) ProtoMessage() {}

func (x *FloatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatRequest.ProtoReflect.Descriptor instead.
func (*FloatRequest) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{6}
}

func (x *FloatRequest) GetPressure() float64 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *FloatRequest) GetIsWork() bool {
	if x != nil {
		return x.IsWork
	}
	return false
}

func (x *FloatRequest) GetHasThorn() bool {
	if x != nil {
		return x.HasThorn
	}
	return false
}

func (x *FloatRequest) GetType() FloatRequest_Type {
	if x != nil {
		return x.Type
	}
	return FloatRequest_bolt
}

func (x *FloatRequest) GetCondition() FloatRequest_Condition {
	if x != nil {
		return x.Condition
	}
	return FloatRequest_uncontrollable
}

func (x *FloatRequest) GetFlangeData() *float_model.FlangeData {
	if x != nil {
		return x.FlangeData
	}
	return nil
}

func (x *FloatRequest) GetCapData() *float_model.CapData {
	if x != nil {
		return x.CapData
	}
	return nil
}

func (x *FloatRequest) GetBolts() *float_model.BoltData {
	if x != nil {
		return x.Bolts
	}
	return nil
}

func (x *FloatRequest) GetGasket() *float_model.GasketData {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *FloatRequest) GetIsNeedFormulas() bool {
	if x != nil {
		return x.IsNeedFormulas
	}
	return false
}

type FloatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     *float_model.DataResult   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Flange   *float_model.FlangeResult `protobuf:"bytes,2,opt,name=flange,proto3" json:"flange,omitempty"`
	Cap      *float_model.CapResult    `protobuf:"bytes,3,opt,name=cap,proto3" json:"cap,omitempty"`
	Bolt     *float_model.BoltResult   `protobuf:"bytes,4,opt,name=bolt,proto3" json:"bolt,omitempty"`
	Gasket   *float_model.GasketResult `protobuf:"bytes,5,opt,name=gasket,proto3" json:"gasket,omitempty"`
	Calc     *float_model.Calculated   `protobuf:"bytes,6,opt,name=calc,proto3" json:"calc,omitempty"`
	Formulas *float_model.Formulas     `protobuf:"bytes,7,opt,name=formulas,proto3" json:"formulas,omitempty"`
}

func (x *FloatResponse) Reset() {
	*x = FloatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatResponse) ProtoMessage() {}

func (x *FloatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatResponse.ProtoReflect.Descriptor instead.
func (*FloatResponse) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{7}
}

func (x *FloatResponse) GetData() *float_model.DataResult {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FloatResponse) GetFlange() *float_model.FlangeResult {
	if x != nil {
		return x.Flange
	}
	return nil
}

func (x *FloatResponse) GetCap() *float_model.CapResult {
	if x != nil {
		return x.Cap
	}
	return nil
}

func (x *FloatResponse) GetBolt() *float_model.BoltResult {
	if x != nil {
		return x.Bolt
	}
	return nil
}

func (x *FloatResponse) GetGasket() *float_model.GasketResult {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *FloatResponse) GetCalc() *float_model.Calculated {
	if x != nil {
		return x.Calc
	}
	return nil
}

func (x *FloatResponse) GetFormulas() *float_model.Formulas {
	if x != nil {
		return x.Formulas
	}
	return nil
}

type DevCoolingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Расчетное давление
	Pressure float64 `protobuf:"fixed64,1,opt,name=pressure,proto3" json:"pressure,omitempty"`
	// Расчетная температура
	Temp float64 `protobuf:"fixed64,2,opt,name=temp,proto3" json:"temp,omitempty"`
	// Способ крепления труб
	Method DevCoolingRequest_MountingMethod `protobuf:"varint,3,opt,name=method,proto3,enum=calc_api.DevCoolingRequest_MountingMethod" json:"method,omitempty"`
	// Тип соединения
	TypeBolt DevCoolingRequest_TypeBolt `protobuf:"varint,4,opt,name=typeBolt,proto3,enum=calc_api.DevCoolingRequest_TypeBolt" json:"typeBolt,omitempty"`
	// Способ крепления труб в трубной решетке
	Mounting DevCoolingRequest_Mounting `protobuf:"varint,5,opt,name=mounting,proto3,enum=calc_api.DevCoolingRequest_Mounting" json:"mounting,omitempty"`
	// Тип крепления труб в трубной решетке
	TypeMounting DevCoolingRequest_TypeMounting `protobuf:"varint,6,opt,name=typeMounting,proto3,enum=calc_api.DevCoolingRequest_TypeMounting" json:"typeMounting,omitempty"`
	// Схема камеры аппарата воздушного охлаждения
	CameraDiagram DevCoolingRequest_CameraDiagram `protobuf:"varint,7,opt,name=cameraDiagram,proto3,enum=calc_api.DevCoolingRequest_CameraDiagram" json:"cameraDiagram,omitempty"`
	// Схема размещения отверстий
	Layout         DevCoolingRequest_Layout         `protobuf:"varint,8,opt,name=layout,proto3,enum=calc_api.DevCoolingRequest_Layout" json:"layout,omitempty"`
	Cap            *dev_cooling_model.CapData       `protobuf:"bytes,9,opt,name=cap,proto3" json:"cap,omitempty"`
	TubeSheet      *dev_cooling_model.TubeSheetData `protobuf:"bytes,10,opt,name=tubeSheet,proto3" json:"tubeSheet,omitempty"`
	Tube           *dev_cooling_model.TubeData      `protobuf:"bytes,11,opt,name=tube,proto3" json:"tube,omitempty"`
	Bolts          *dev_cooling_model.BoltData      `protobuf:"bytes,12,opt,name=bolts,proto3" json:"bolts,omitempty"`
	Gasket         *dev_cooling_model.GasketData    `protobuf:"bytes,13,opt,name=gasket,proto3" json:"gasket,omitempty"`
	IsNeedFormulas bool                             `protobuf:"varint,14,opt,name=isNeedFormulas,proto3" json:"isNeedFormulas,omitempty"`
}

func (x *DevCoolingRequest) Reset() {
	*x = DevCoolingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevCoolingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevCoolingRequest) ProtoMessage() {}

func (x *DevCoolingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevCoolingRequest.ProtoReflect.Descriptor instead.
func (*DevCoolingRequest) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{8}
}

func (x *DevCoolingRequest) GetPressure() float64 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *DevCoolingRequest) GetTemp() float64 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *DevCoolingRequest) GetMethod() DevCoolingRequest_MountingMethod {
	if x != nil {
		return x.Method
	}
	return DevCoolingRequest_AllThickness
}

func (x *DevCoolingRequest) GetTypeBolt() DevCoolingRequest_TypeBolt {
	if x != nil {
		return x.TypeBolt
	}
	return DevCoolingRequest_bolt
}

func (x *DevCoolingRequest) GetMounting() DevCoolingRequest_Mounting {
	if x != nil {
		return x.Mounting
	}
	return DevCoolingRequest_flaring
}

func (x *DevCoolingRequest) GetTypeMounting() DevCoolingRequest_TypeMounting {
	if x != nil {
		return x.TypeMounting
	}
	return DevCoolingRequest_nothing
}

func (x *DevCoolingRequest) GetCameraDiagram() DevCoolingRequest_CameraDiagram {
	if x != nil {
		return x.CameraDiagram
	}
	return DevCoolingRequest_schema1
}

func (x *DevCoolingRequest) GetLayout() DevCoolingRequest_Layout {
	if x != nil {
		return x.Layout
	}
	return DevCoolingRequest_lSchema1
}

func (x *DevCoolingRequest) GetCap() *dev_cooling_model.CapData {
	if x != nil {
		return x.Cap
	}
	return nil
}

func (x *DevCoolingRequest) GetTubeSheet() *dev_cooling_model.TubeSheetData {
	if x != nil {
		return x.TubeSheet
	}
	return nil
}

func (x *DevCoolingRequest) GetTube() *dev_cooling_model.TubeData {
	if x != nil {
		return x.Tube
	}
	return nil
}

func (x *DevCoolingRequest) GetBolts() *dev_cooling_model.BoltData {
	if x != nil {
		return x.Bolts
	}
	return nil
}

func (x *DevCoolingRequest) GetGasket() *dev_cooling_model.GasketData {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *DevCoolingRequest) GetIsNeedFormulas() bool {
	if x != nil {
		return x.IsNeedFormulas
	}
	return false
}

type DevCoolingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      *dev_cooling_model.DataResult      `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Cap       *dev_cooling_model.CapResult       `protobuf:"bytes,2,opt,name=cap,proto3" json:"cap,omitempty"`
	TubeSheet *dev_cooling_model.TubeSheetResult `protobuf:"bytes,3,opt,name=tubeSheet,proto3" json:"tubeSheet,omitempty"`
	Tube      *dev_cooling_model.TubeResult      `protobuf:"bytes,4,opt,name=tube,proto3" json:"tube,omitempty"`
	Bolts     *dev_cooling_model.BoltResult      `protobuf:"bytes,5,opt,name=bolts,proto3" json:"bolts,omitempty"`
	Gasket    *dev_cooling_model.GasketResult    `protobuf:"bytes,6,opt,name=gasket,proto3" json:"gasket,omitempty"`
	Calc      *dev_cooling_model.Calculated      `protobuf:"bytes,7,opt,name=calc,proto3" json:"calc,omitempty"`
	Formulas  *dev_cooling_model.Formulas        `protobuf:"bytes,8,opt,name=formulas,proto3" json:"formulas,omitempty"`
}

func (x *DevCoolingResponse) Reset() {
	*x = DevCoolingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevCoolingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevCoolingResponse) ProtoMessage() {}

func (x *DevCoolingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevCoolingResponse.ProtoReflect.Descriptor instead.
func (*DevCoolingResponse) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{9}
}

func (x *DevCoolingResponse) GetData() *dev_cooling_model.DataResult {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DevCoolingResponse) GetCap() *dev_cooling_model.CapResult {
	if x != nil {
		return x.Cap
	}
	return nil
}

func (x *DevCoolingResponse) GetTubeSheet() *dev_cooling_model.TubeSheetResult {
	if x != nil {
		return x.TubeSheet
	}
	return nil
}

func (x *DevCoolingResponse) GetTube() *dev_cooling_model.TubeResult {
	if x != nil {
		return x.Tube
	}
	return nil
}

func (x *DevCoolingResponse) GetBolts() *dev_cooling_model.BoltResult {
	if x != nil {
		return x.Bolts
	}
	return nil
}

func (x *DevCoolingResponse) GetGasket() *dev_cooling_model.GasketResult {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *DevCoolingResponse) GetCalc() *dev_cooling_model.Calculated {
	if x != nil {
		return x.Calc
	}
	return nil
}

func (x *DevCoolingResponse) GetFormulas() *dev_cooling_model.Formulas {
	if x != nil {
		return x.Formulas
	}
	return nil
}

type GasCoolingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data           *gas_cooling_model.MainData   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Bolts          *gas_cooling_model.BoltData   `protobuf:"bytes,2,opt,name=bolts,proto3" json:"bolts,omitempty"`
	Gasket         *gas_cooling_model.GasketData `protobuf:"bytes,3,opt,name=gasket,proto3" json:"gasket,omitempty"`
	IsNeedFormulas bool                          `protobuf:"varint,4,opt,name=isNeedFormulas,proto3" json:"isNeedFormulas,omitempty"`
}

func (x *GasCoolingRequest) Reset() {
	*x = GasCoolingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasCoolingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasCoolingRequest) ProtoMessage() {}

func (x *GasCoolingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasCoolingRequest.ProtoReflect.Descriptor instead.
func (*GasCoolingRequest) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{10}
}

func (x *GasCoolingRequest) GetData() *gas_cooling_model.MainData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GasCoolingRequest) GetBolts() *gas_cooling_model.BoltData {
	if x != nil {
		return x.Bolts
	}
	return nil
}

func (x *GasCoolingRequest) GetGasket() *gas_cooling_model.GasketData {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *GasCoolingRequest) GetIsNeedFormulas() bool {
	if x != nil {
		return x.IsNeedFormulas
	}
	return false
}

type GasCoolingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     *gas_cooling_model.DataResult   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Bolts    *gas_cooling_model.BoltResult   `protobuf:"bytes,2,opt,name=bolts,proto3" json:"bolts,omitempty"`
	Gasket   *gas_cooling_model.GasketResult `protobuf:"bytes,3,opt,name=gasket,proto3" json:"gasket,omitempty"`
	Calc     *gas_cooling_model.Calculated   `protobuf:"bytes,4,opt,name=calc,proto3" json:"calc,omitempty"`
	Formulas *gas_cooling_model.Formulas     `protobuf:"bytes,5,opt,name=formulas,proto3" json:"formulas,omitempty"`
}

func (x *GasCoolingResponse) Reset() {
	*x = GasCoolingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasCoolingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasCoolingResponse) ProtoMessage() {}

func (x *GasCoolingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasCoolingResponse.ProtoReflect.Descriptor instead.
func (*GasCoolingResponse) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{11}
}

func (x *GasCoolingResponse) GetData() *gas_cooling_model.DataResult {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GasCoolingResponse) GetBolts() *gas_cooling_model.BoltResult {
	if x != nil {
		return x.Bolts
	}
	return nil
}

func (x *GasCoolingResponse) GetGasket() *gas_cooling_model.GasketResult {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *GasCoolingResponse) GetCalc() *gas_cooling_model.Calculated {
	if x != nil {
		return x.Calc
	}
	return nil
}

func (x *GasCoolingResponse) GetFormulas() *gas_cooling_model.Formulas {
	if x != nil {
		return x.Formulas
	}
	return nil
}

type ExpressCircleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Расчетное давление
	Pressure float64 `protobuf:"fixed64,1,opt,name=pressure,proto3" json:"pressure,omitempty"`
	// Тип соединения
	TypeBolt ExpressCircleRequest_TypeBolt `protobuf:"varint,2,opt,name=typeBolt,proto3,enum=calc_api.ExpressCircleRequest_TypeBolt" json:"typeBolt,omitempty"`
	// Условие затяжки
	Condition      ExpressCircleRequest_Condition   `protobuf:"varint,3,opt,name=condition,proto3,enum=calc_api.ExpressCircleRequest_Condition" json:"condition,omitempty"`
	Bolts          *express_circle_model.BoltData   `protobuf:"bytes,4,opt,name=bolts,proto3" json:"bolts,omitempty"`
	Gasket         *express_circle_model.GasketData `protobuf:"bytes,5,opt,name=gasket,proto3" json:"gasket,omitempty"`
	IsNeedFormulas bool                             `protobuf:"varint,6,opt,name=isNeedFormulas,proto3" json:"isNeedFormulas,omitempty"`
}

func (x *ExpressCircleRequest) Reset() {
	*x = ExpressCircleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpressCircleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpressCircleRequest) ProtoMessage() {}

func (x *ExpressCircleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpressCircleRequest.ProtoReflect.Descriptor instead.
func (*ExpressCircleRequest) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{12}
}

func (x *ExpressCircleRequest) GetPressure() float64 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *ExpressCircleRequest) GetTypeBolt() ExpressCircleRequest_TypeBolt {
	if x != nil {
		return x.TypeBolt
	}
	return ExpressCircleRequest_bolt
}

func (x *ExpressCircleRequest) GetCondition() ExpressCircleRequest_Condition {
	if x != nil {
		return x.Condition
	}
	return ExpressCircleRequest_uncontrollable
}

func (x *ExpressCircleRequest) GetBolts() *express_circle_model.BoltData {
	if x != nil {
		return x.Bolts
	}
	return nil
}

func (x *ExpressCircleRequest) GetGasket() *express_circle_model.GasketData {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *ExpressCircleRequest) GetIsNeedFormulas() bool {
	if x != nil {
		return x.IsNeedFormulas
	}
	return false
}

type ExpressCircleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     *express_circle_model.DataResult   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Bolts    *express_circle_model.BoltResult   `protobuf:"bytes,2,opt,name=bolts,proto3" json:"bolts,omitempty"`
	Gasket   *express_circle_model.GasketResult `protobuf:"bytes,3,opt,name=gasket,proto3" json:"gasket,omitempty"`
	Calc     *express_circle_model.Calculated   `protobuf:"bytes,4,opt,name=calc,proto3" json:"calc,omitempty"`
	Formulas *express_circle_model.Formulas     `protobuf:"bytes,5,opt,name=formulas,proto3" json:"formulas,omitempty"`
}

func (x *ExpressCircleResponse) Reset() {
	*x = ExpressCircleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpressCircleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpressCircleResponse) ProtoMessage() {}

func (x *ExpressCircleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpressCircleResponse.ProtoReflect.Descriptor instead.
func (*ExpressCircleResponse) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{13}
}

func (x *ExpressCircleResponse) GetData() *express_circle_model.DataResult {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExpressCircleResponse) GetBolts() *express_circle_model.BoltResult {
	if x != nil {
		return x.Bolts
	}
	return nil
}

func (x *ExpressCircleResponse) GetGasket() *express_circle_model.GasketResult {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *ExpressCircleResponse) GetCalc() *express_circle_model.Calculated {
	if x != nil {
		return x.Calc
	}
	return nil
}

func (x *ExpressCircleResponse) GetFormulas() *express_circle_model.Formulas {
	if x != nil {
		return x.Formulas
	}
	return nil
}

type ExpressRectangleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Расчетное давление
	Pressure float64 `protobuf:"fixed64,1,opt,name=pressure,proto3" json:"pressure,omitempty"`
	// Пробное давление
	TestPressure float64 `protobuf:"fixed64,2,opt,name=testPressure,proto3" json:"testPressure,omitempty"`
	// Тип соединения
	TypeBolt ExpressRectangleRequest_TypeBolt `protobuf:"varint,3,opt,name=typeBolt,proto3,enum=calc_api.ExpressRectangleRequest_TypeBolt" json:"typeBolt,omitempty"`
	// Условие затяжки
	Condition      ExpressRectangleRequest_Condition   `protobuf:"varint,4,opt,name=condition,proto3,enum=calc_api.ExpressRectangleRequest_Condition" json:"condition,omitempty"`
	Bolts          *express_rectangle_model.BoltData   `protobuf:"bytes,5,opt,name=bolts,proto3" json:"bolts,omitempty"`
	Gasket         *express_rectangle_model.GasketData `protobuf:"bytes,6,opt,name=gasket,proto3" json:"gasket,omitempty"`
	IsNeedFormulas bool                                `protobuf:"varint,7,opt,name=isNeedFormulas,proto3" json:"isNeedFormulas,omitempty"`
}

func (x *ExpressRectangleRequest) Reset() {
	*x = ExpressRectangleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpressRectangleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpressRectangleRequest) ProtoMessage() {}

func (x *ExpressRectangleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpressRectangleRequest.ProtoReflect.Descriptor instead.
func (*ExpressRectangleRequest) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{14}
}

func (x *ExpressRectangleRequest) GetPressure() float64 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *ExpressRectangleRequest) GetTestPressure() float64 {
	if x != nil {
		return x.TestPressure
	}
	return 0
}

func (x *ExpressRectangleRequest) GetTypeBolt() ExpressRectangleRequest_TypeBolt {
	if x != nil {
		return x.TypeBolt
	}
	return ExpressRectangleRequest_bolt
}

func (x *ExpressRectangleRequest) GetCondition() ExpressRectangleRequest_Condition {
	if x != nil {
		return x.Condition
	}
	return ExpressRectangleRequest_uncontrollable
}

func (x *ExpressRectangleRequest) GetBolts() *express_rectangle_model.BoltData {
	if x != nil {
		return x.Bolts
	}
	return nil
}

func (x *ExpressRectangleRequest) GetGasket() *express_rectangle_model.GasketData {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *ExpressRectangleRequest) GetIsNeedFormulas() bool {
	if x != nil {
		return x.IsNeedFormulas
	}
	return false
}

type ExpressRectangleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     *express_rectangle_model.DataResult   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Bolts    *express_rectangle_model.BoltResult   `protobuf:"bytes,2,opt,name=bolts,proto3" json:"bolts,omitempty"`
	Gasket   *express_rectangle_model.GasketResult `protobuf:"bytes,3,opt,name=gasket,proto3" json:"gasket,omitempty"`
	Calc     *express_rectangle_model.Calculated   `protobuf:"bytes,4,opt,name=calc,proto3" json:"calc,omitempty"`
	Formulas *express_rectangle_model.Formulas     `protobuf:"bytes,5,opt,name=formulas,proto3" json:"formulas,omitempty"`
}

func (x *ExpressRectangleResponse) Reset() {
	*x = ExpressRectangleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpressRectangleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpressRectangleResponse) ProtoMessage() {}

func (x *ExpressRectangleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpressRectangleResponse.ProtoReflect.Descriptor instead.
func (*ExpressRectangleResponse) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{15}
}

func (x *ExpressRectangleResponse) GetData() *express_rectangle_model.DataResult {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExpressRectangleResponse) GetBolts() *express_rectangle_model.BoltResult {
	if x != nil {
		return x.Bolts
	}
	return nil
}

func (x *ExpressRectangleResponse) GetGasket() *express_rectangle_model.GasketResult {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *ExpressRectangleResponse) GetCalc() *express_rectangle_model.Calculated {
	if x != nil {
		return x.Calc
	}
	return nil
}

func (x *ExpressRectangleResponse) GetFormulas() *express_rectangle_model.Formulas {
	if x != nil {
		return x.Formulas
	}
	return nil
}

var File_moment_calc_api_proto protoreflect.FileDescriptor

var file_moment_calc_api_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70,
	0x69, 0x1a, 0x22, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x61,
	0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x5f, 0x63,
	0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2a, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x5f,
	0x61, 0x70, 0x69, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d,
	0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2f,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6d,
	0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x07, 0x0a, 0x0d, 0x46, 0x6c, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x78, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x78, 0x69, 0x61, 0x6c, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x39, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x53, 0x61, 0x6d, 0x65, 0x46, 0x6c, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x61, 0x6d, 0x65, 0x46,
	0x6c, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46,
	0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x6c,
	0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3a, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b,
	0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x05, 0x62,
	0x6f, 0x6c, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x67, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73,
	0x55, 0x73, 0x65, 0x57, 0x61, 0x73, 0x68, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x55, 0x73, 0x65, 0x57, 0x61, 0x73, 0x68, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x06,
	0x77, 0x61, 0x73, 0x68, 0x65, 0x72, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66,
	0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x57, 0x61, 0x73, 0x68,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x77, 0x61, 0x73, 0x68, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x46, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x22, 0x36, 0x0a, 0x07, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x0c, 0x0a, 0x08, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x10, 0x02, 0x22, 0x19,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x10, 0x01, 0x22, 0x46, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x10,
	0x02, 0x22, 0x26, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x09, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x73, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x10, 0x01, 0x22, 0x9f, 0x03, 0x0a, 0x0e, 0x46, 0x6c,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x07, 0x66, 0x6c,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x12, 0x32,
	0x0a, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x77, 0x61, 0x73, 0x68, 0x65, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x57, 0x61, 0x73, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x77, 0x61, 0x73, 0x68, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x61, 0x6c,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x12, 0x32, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x73, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x22, 0xb3, 0x07, 0x0a, 0x0d,
	0x43, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x6c, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x78, 0x69,
	0x61, 0x6c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x78, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x39, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x6c, 0x64, 0x2e,
	0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64,
	0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4f, 0x6c, 0x64, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x6c, 0x64, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x6c,
	0x64, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x66, 0x6c,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43,
	0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x63, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x29, 0x0a, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x67, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x70,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x65, 0x6d, 0x62, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x55, 0x73, 0x65, 0x57, 0x61,
	0x73, 0x68, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x55, 0x73,
	0x65, 0x57, 0x61, 0x73, 0x68, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x77, 0x61, 0x73, 0x68, 0x65,
	0x72, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x57, 0x61, 0x73, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06,
	0x77, 0x61, 0x73, 0x68, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x22, 0x36,
	0x0a, 0x07, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x69, 0x73, 0x6f,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x49, 0x73,
	0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x6c, 0x79, 0x10, 0x02, 0x22, 0x19, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x10,
	0x01, 0x22, 0x46, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x0e, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x10, 0x02, 0x22, 0x26, 0x0a, 0x0b, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69,
	0x73, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x10,
	0x01, 0x22, 0xbd, 0x03, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4f, 0x6c, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x6c, 0x64,
	0x52, 0x06, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x03, 0x63, 0x61, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x43, 0x61, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x6c, 0x64, 0x52, 0x03,
	0x63, 0x61, 0x70, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x12, 0x2f,
	0x0a, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12,
	0x2c, 0x0a, 0x05, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x04, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x61,
	0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x61, 0x70, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x12, 0x36, 0x0a, 0x08, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x43, 0x61,
	0x70, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31,
	0x0a, 0x07, 0x77, 0x61, 0x73, 0x68, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x57, 0x61, 0x73, 0x68,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x77, 0x61, 0x73, 0x68, 0x65, 0x72,
	0x73, 0x22, 0x99, 0x03, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x0a, 0x66, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2c, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x63, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29,
	0x0a, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x67, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x70, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x6d, 0x62, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x55, 0x73, 0x65, 0x57, 0x61, 0x73,
	0x68, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x55, 0x73, 0x65,
	0x57, 0x61, 0x73, 0x68, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x77, 0x61, 0x73, 0x68, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x57, 0x61, 0x73, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x77,
	0x61, 0x73, 0x68, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69,
	0x73, 0x4e, 0x65, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x22, 0xaa, 0x03,
	0x0a, 0x0b, 0x43, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61,
	0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x63, 0x61, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x43, 0x61, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x03, 0x63, 0x61,
	0x70, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x06,
	0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x2c, 0x0a,
	0x05, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x77,
	0x61, 0x73, 0x68, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x57, 0x61, 0x73, 0x68, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x77, 0x61, 0x73, 0x68, 0x65, 0x72, 0x73, 0x12, 0x29,
	0x0a, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x12, 0x2f, 0x0a, 0x08, 0x66, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x61,
	0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73,
	0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x22, 0xa1, 0x04, 0x0a, 0x0c, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x57, 0x6f, 0x72,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x54, 0x68, 0x6f, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x54, 0x68, 0x6f, 0x72, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x6c, 0x63,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a,
	0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46,
	0x6c, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x6e, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x63, 0x61,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x62, 0x6f, 0x6c,
	0x74, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x67, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x46, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4e,
	0x65, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x22, 0x46, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x75, 0x6e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x69,
	0x6e, 0x10, 0x02, 0x22, 0x19, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x62,
	0x6f, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x10, 0x01, 0x22, 0xd9,
	0x02, 0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a,
	0x06, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x28, 0x0a, 0x03, 0x63, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x70, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x03, 0x63, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x6f,
	0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x63, 0x61,
	0x6c, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x12, 0x31, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73,
	0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x22, 0xdb, 0x08, 0x0a, 0x11, 0x44,
	0x65, 0x76, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70,
	0x12, 0x42, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x43,
	0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x40, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6c, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x65, 0x76, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6c, 0x74, 0x52, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x6f, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x43, 0x6f, 0x6f,
	0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4f, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x44, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x43, 0x6f, 0x6f, 0x6c,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x44, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x44, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x3a, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x06, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x63, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x63, 0x61,
	0x70, 0x12, 0x3e, 0x0a, 0x09, 0x74, 0x75, 0x62, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x75, 0x62, 0x65, 0x53, 0x68, 0x65,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x75, 0x62, 0x65, 0x53, 0x68, 0x65, 0x65,
	0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x75, 0x62, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x54, 0x75, 0x62, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x74, 0x75,
	0x62, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x62, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x73, 0x22, 0x1d, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6c, 0x74,
	0x12, 0x08, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x70, 0x69,
	0x6e, 0x10, 0x01, 0x22, 0x45, 0x0a, 0x0e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x54, 0x68, 0x69, 0x63,
	0x6b, 0x6e, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x54,
	0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x74,
	0x65, 0x65, 0x6c, 0x53, 0x68, 0x65, 0x65, 0x74, 0x10, 0x02, 0x22, 0x31, 0x0a, 0x08, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x77, 0x65, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x22, 0x31, 0x0a,
	0x0c, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0b, 0x0a,
	0x07, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x66, 0x6c,
	0x61, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x6f, 0x76, 0x65, 0x10, 0x02,
	0x22, 0x50, 0x0a, 0x0d, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x44, 0x69, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x31, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x32, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x33, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x34, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x35,
	0x10, 0x04, 0x22, 0x24, 0x0a, 0x06, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x0c, 0x0a, 0x08,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x31, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x32, 0x10, 0x01, 0x22, 0xc6, 0x03, 0x0a, 0x12, 0x44, 0x65, 0x76,
	0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x03, 0x63,
	0x61, 0x70, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x75, 0x62, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x75, 0x62, 0x65, 0x53, 0x68,
	0x65, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x74, 0x75, 0x62, 0x65, 0x53,
	0x68, 0x65, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x75, 0x62, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x75, 0x62, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x04, 0x74, 0x75, 0x62, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x06,
	0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64,
	0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x67,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x12, 0x37, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x76,
	0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x73, 0x22, 0xd6, 0x01, 0x0a, 0x11, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x05, 0x62, 0x6f, 0x6c, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f,
	0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x67,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61,
	0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4e, 0x65,
	0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x22, 0xa1, 0x02, 0x0a, 0x12, 0x47,
	0x61, 0x73, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x67, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x73, 0x5f,
	0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x04, 0x63, 0x61, 0x6c, 0x63, 0x12, 0x37, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f,
	0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x73, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x22, 0xbe,
	0x03, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6c, 0x74, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6c, 0x74, 0x12, 0x46, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x63, 0x61,
	0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x43, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x22, 0x1d, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x6f, 0x6c, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x70, 0x69, 0x6e, 0x10, 0x01, 0x22, 0x46, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x10, 0x02, 0x22,
	0xb3, 0x02, 0x0a, 0x15, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x43, 0x69, 0x72, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x36, 0x0a, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x67, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x12, 0x3a, 0x0a, 0x08, 0x66, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x08, 0x66, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x73, 0x22, 0xf1, 0x03, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x12, 0x46, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6c, 0x74, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63,
	0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f,
	0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x3b, 0x0a,
	0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73,
	0x4e, 0x65, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x73, 0x22, 0x1d, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6c, 0x74, 0x12, 0x08,
	0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x10,
	0x01, 0x22, 0x46, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x0e, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x10, 0x02, 0x22, 0xc5, 0x02, 0x0a, 0x18, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x39, 0x0a, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x67, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x63, 0x61, 0x6c,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x04, 0x63, 0x61,
	0x6c, 0x63, 0x12, 0x3d, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x73, 0x32, 0xf2, 0x04, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x44, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x6c,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x43, 0x61, 0x70, 0x12, 0x14, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x70, 0x4f, 0x6c, 0x64, 0x12, 0x17, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x6c, 0x64,
	0x1a, 0x18, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x6c, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x16, 0x2e, 0x63,
	0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x13, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x43, 0x6f, 0x6f,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x65, 0x76, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76,
	0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x50, 0x0a, 0x13, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x61, 0x73, 0x43,
	0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x61, 0x73, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x54, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x78,
	0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x45, 0x78, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12,
	0x21, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x6c, 0x65, 0x78, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x32, 0x37,
	0x32, 0x2f, 0x73, 0x65, 0x61, 0x6c, 0x75, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_moment_calc_api_proto_rawDescOnce sync.Once
	file_moment_calc_api_proto_rawDescData = file_moment_calc_api_proto_rawDesc
)

func file_moment_calc_api_proto_rawDescGZIP() []byte {
	file_moment_calc_api_proto_rawDescOnce.Do(func() {
		file_moment_calc_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_moment_calc_api_proto_rawDescData)
	})
	return file_moment_calc_api_proto_rawDescData
}

var file_moment_calc_api_proto_enumTypes = make([]protoimpl.EnumInfo, 20)
var file_moment_calc_api_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_moment_calc_api_proto_goTypes = []interface{}{
	(FlangeRequest_Flanges)(0),                   // 0: calc_api.FlangeRequest.Flanges
	(FlangeRequest_Type)(0),                      // 1: calc_api.FlangeRequest.Type
	(FlangeRequest_Condition)(0),                 // 2: calc_api.FlangeRequest.Condition
	(FlangeRequest_Calcutation)(0),               // 3: calc_api.FlangeRequest.Calcutation
	(CapRequestOld_Flanges)(0),                   // 4: calc_api.CapRequestOld.Flanges
	(CapRequestOld_Type)(0),                      // 5: calc_api.CapRequestOld.Type
	(CapRequestOld_Condition)(0),                 // 6: calc_api.CapRequestOld.Condition
	(CapRequestOld_Calcutation)(0),               // 7: calc_api.CapRequestOld.Calcutation
	(FloatRequest_Condition)(0),                  // 8: calc_api.FloatRequest.Condition
	(FloatRequest_Type)(0),                       // 9: calc_api.FloatRequest.Type
	(DevCoolingRequest_TypeBolt)(0),              // 10: calc_api.DevCoolingRequest.TypeBolt
	(DevCoolingRequest_MountingMethod)(0),        // 11: calc_api.DevCoolingRequest.MountingMethod
	(DevCoolingRequest_Mounting)(0),              // 12: calc_api.DevCoolingRequest.Mounting
	(DevCoolingRequest_TypeMounting)(0),          // 13: calc_api.DevCoolingRequest.TypeMounting
	(DevCoolingRequest_CameraDiagram)(0),         // 14: calc_api.DevCoolingRequest.CameraDiagram
	(DevCoolingRequest_Layout)(0),                // 15: calc_api.DevCoolingRequest.Layout
	(ExpressCircleRequest_TypeBolt)(0),           // 16: calc_api.ExpressCircleRequest.TypeBolt
	(ExpressCircleRequest_Condition)(0),          // 17: calc_api.ExpressCircleRequest.Condition
	(ExpressRectangleRequest_TypeBolt)(0),        // 18: calc_api.ExpressRectangleRequest.TypeBolt
	(ExpressRectangleRequest_Condition)(0),       // 19: calc_api.ExpressRectangleRequest.Condition
	(*FlangeRequest)(nil),                        // 20: calc_api.FlangeRequest
	(*FlangeResponse)(nil),                       // 21: calc_api.FlangeResponse
	(*CapRequestOld)(nil),                        // 22: calc_api.CapRequestOld
	(*CapResponseOld)(nil),                       // 23: calc_api.CapResponseOld
	(*CapRequest)(nil),                           // 24: calc_api.CapRequest
	(*CapResponse)(nil),                          // 25: calc_api.CapResponse
	(*FloatRequest)(nil),                         // 26: calc_api.FloatRequest
	(*FloatResponse)(nil),                        // 27: calc_api.FloatResponse
	(*DevCoolingRequest)(nil),                    // 28: calc_api.DevCoolingRequest
	(*DevCoolingResponse)(nil),                   // 29: calc_api.DevCoolingResponse
	(*GasCoolingRequest)(nil),                    // 30: calc_api.GasCoolingRequest
	(*GasCoolingResponse)(nil),                   // 31: calc_api.GasCoolingResponse
	(*ExpressCircleRequest)(nil),                 // 32: calc_api.ExpressCircleRequest
	(*ExpressCircleResponse)(nil),                // 33: calc_api.ExpressCircleResponse
	(*ExpressRectangleRequest)(nil),              // 34: calc_api.ExpressRectangleRequest
	(*ExpressRectangleResponse)(nil),             // 35: calc_api.ExpressRectangleResponse
	(*flange_model.FlangeData)(nil),              // 36: flange_model.FlangeData
	(*flange_model.BoltData)(nil),                // 37: flange_model.BoltData
	(*flange_model.GasketData)(nil),              // 38: flange_model.GasketData
	(*flange_model.EmbedData)(nil),               // 39: flange_model.EmbedData
	(*flange_model.WasherData)(nil),              // 40: flange_model.WasherData
	(*flange_model.DataResult)(nil),              // 41: flange_model.DataResult
	(*flange_model.FlangeResult)(nil),            // 42: flange_model.FlangeResult
	(*flange_model.BoltResult)(nil),              // 43: flange_model.BoltResult
	(*flange_model.GasketResult)(nil),            // 44: flange_model.GasketResult
	(*flange_model.EmbedResult)(nil),             // 45: flange_model.EmbedResult
	(*flange_model.WasherResult)(nil),            // 46: flange_model.WasherResult
	(*flange_model.Calculated)(nil),              // 47: flange_model.Calculated
	(*flange_model.Formulas)(nil),                // 48: flange_model.Formulas
	(*cap_model.FlangeData)(nil),                 // 49: cap_model.FlangeData
	(*cap_model.CapData)(nil),                    // 50: cap_model.CapData
	(*cap_model.BoltData)(nil),                   // 51: cap_model.BoltData
	(*cap_model.GasketData)(nil),                 // 52: cap_model.GasketData
	(*cap_model.EmbedData)(nil),                  // 53: cap_model.EmbedData
	(*cap_model.WasherData)(nil),                 // 54: cap_model.WasherData
	(*cap_model.FlangeResultOld)(nil),            // 55: cap_model.FlangeResultOld
	(*cap_model.CapResultOld)(nil),               // 56: cap_model.CapResultOld
	(*cap_model.BoltResult)(nil),                 // 57: cap_model.BoltResult
	(*cap_model.GasketResult)(nil),               // 58: cap_model.GasketResult
	(*cap_model.EmbedResult)(nil),                // 59: cap_model.EmbedResult
	(*cap_model.CalculatedCap)(nil),              // 60: cap_model.CalculatedCap
	(*cap_model.CalcCapFormulas)(nil),            // 61: cap_model.CalcCapFormulas
	(*cap_model.DataResult)(nil),                 // 62: cap_model.DataResult
	(*cap_model.WasherResult)(nil),               // 63: cap_model.WasherResult
	(*cap_model.MainData)(nil),                   // 64: cap_model.MainData
	(*cap_model.FlangeResult)(nil),               // 65: cap_model.FlangeResult
	(*cap_model.CapResult)(nil),                  // 66: cap_model.CapResult
	(*cap_model.Calculated)(nil),                 // 67: cap_model.Calculated
	(*cap_model.Formulas)(nil),                   // 68: cap_model.Formulas
	(*float_model.FlangeData)(nil),               // 69: float_model.FlangeData
	(*float_model.CapData)(nil),                  // 70: float_model.CapData
	(*float_model.BoltData)(nil),                 // 71: float_model.BoltData
	(*float_model.GasketData)(nil),               // 72: float_model.GasketData
	(*float_model.DataResult)(nil),               // 73: float_model.DataResult
	(*float_model.FlangeResult)(nil),             // 74: float_model.FlangeResult
	(*float_model.CapResult)(nil),                // 75: float_model.CapResult
	(*float_model.BoltResult)(nil),               // 76: float_model.BoltResult
	(*float_model.GasketResult)(nil),             // 77: float_model.GasketResult
	(*float_model.Calculated)(nil),               // 78: float_model.Calculated
	(*float_model.Formulas)(nil),                 // 79: float_model.Formulas
	(*dev_cooling_model.CapData)(nil),            // 80: dev_cooling_model.CapData
	(*dev_cooling_model.TubeSheetData)(nil),      // 81: dev_cooling_model.TubeSheetData
	(*dev_cooling_model.TubeData)(nil),           // 82: dev_cooling_model.TubeData
	(*dev_cooling_model.BoltData)(nil),           // 83: dev_cooling_model.BoltData
	(*dev_cooling_model.GasketData)(nil),         // 84: dev_cooling_model.GasketData
	(*dev_cooling_model.DataResult)(nil),         // 85: dev_cooling_model.DataResult
	(*dev_cooling_model.CapResult)(nil),          // 86: dev_cooling_model.CapResult
	(*dev_cooling_model.TubeSheetResult)(nil),    // 87: dev_cooling_model.TubeSheetResult
	(*dev_cooling_model.TubeResult)(nil),         // 88: dev_cooling_model.TubeResult
	(*dev_cooling_model.BoltResult)(nil),         // 89: dev_cooling_model.BoltResult
	(*dev_cooling_model.GasketResult)(nil),       // 90: dev_cooling_model.GasketResult
	(*dev_cooling_model.Calculated)(nil),         // 91: dev_cooling_model.Calculated
	(*dev_cooling_model.Formulas)(nil),           // 92: dev_cooling_model.Formulas
	(*gas_cooling_model.MainData)(nil),           // 93: gas_cooling_model.MainData
	(*gas_cooling_model.BoltData)(nil),           // 94: gas_cooling_model.BoltData
	(*gas_cooling_model.GasketData)(nil),         // 95: gas_cooling_model.GasketData
	(*gas_cooling_model.DataResult)(nil),         // 96: gas_cooling_model.DataResult
	(*gas_cooling_model.BoltResult)(nil),         // 97: gas_cooling_model.BoltResult
	(*gas_cooling_model.GasketResult)(nil),       // 98: gas_cooling_model.GasketResult
	(*gas_cooling_model.Calculated)(nil),         // 99: gas_cooling_model.Calculated
	(*gas_cooling_model.Formulas)(nil),           // 100: gas_cooling_model.Formulas
	(*express_circle_model.BoltData)(nil),        // 101: express_circle_model.BoltData
	(*express_circle_model.GasketData)(nil),      // 102: express_circle_model.GasketData
	(*express_circle_model.DataResult)(nil),      // 103: express_circle_model.DataResult
	(*express_circle_model.BoltResult)(nil),      // 104: express_circle_model.BoltResult
	(*express_circle_model.GasketResult)(nil),    // 105: express_circle_model.GasketResult
	(*express_circle_model.Calculated)(nil),      // 106: express_circle_model.Calculated
	(*express_circle_model.Formulas)(nil),        // 107: express_circle_model.Formulas
	(*express_rectangle_model.BoltData)(nil),     // 108: express_rectangle_model.BoltData
	(*express_rectangle_model.GasketData)(nil),   // 109: express_rectangle_model.GasketData
	(*express_rectangle_model.DataResult)(nil),   // 110: express_rectangle_model.DataResult
	(*express_rectangle_model.BoltResult)(nil),   // 111: express_rectangle_model.BoltResult
	(*express_rectangle_model.GasketResult)(nil), // 112: express_rectangle_model.GasketResult
	(*express_rectangle_model.Calculated)(nil),   // 113: express_rectangle_model.Calculated
	(*express_rectangle_model.Formulas)(nil),     // 114: express_rectangle_model.Formulas
}
var file_moment_calc_api_proto_depIdxs = []int32{
	0,   // 0: calc_api.FlangeRequest.flanges:type_name -> calc_api.FlangeRequest.Flanges
	1,   // 1: calc_api.FlangeRequest.type:type_name -> calc_api.FlangeRequest.Type
	2,   // 2: calc_api.FlangeRequest.condition:type_name -> calc_api.FlangeRequest.Condition
	3,   // 3: calc_api.FlangeRequest.calculation:type_name -> calc_api.FlangeRequest.Calcutation
	36,  // 4: calc_api.FlangeRequest.flangesData:type_name -> flange_model.FlangeData
	37,  // 5: calc_api.FlangeRequest.bolts:type_name -> flange_model.BoltData
	38,  // 6: calc_api.FlangeRequest.gasket:type_name -> flange_model.GasketData
	39,  // 7: calc_api.FlangeRequest.embed:type_name -> flange_model.EmbedData
	40,  // 8: calc_api.FlangeRequest.washer:type_name -> flange_model.WasherData
	41,  // 9: calc_api.FlangeResponse.data:type_name -> flange_model.DataResult
	42,  // 10: calc_api.FlangeResponse.flanges:type_name -> flange_model.FlangeResult
	43,  // 11: calc_api.FlangeResponse.bolt:type_name -> flange_model.BoltResult
	44,  // 12: calc_api.FlangeResponse.gasket:type_name -> flange_model.GasketResult
	45,  // 13: calc_api.FlangeResponse.embed:type_name -> flange_model.EmbedResult
	46,  // 14: calc_api.FlangeResponse.washers:type_name -> flange_model.WasherResult
	47,  // 15: calc_api.FlangeResponse.calc:type_name -> flange_model.Calculated
	48,  // 16: calc_api.FlangeResponse.formulas:type_name -> flange_model.Formulas
	4,   // 17: calc_api.CapRequestOld.flanges:type_name -> calc_api.CapRequestOld.Flanges
	5,   // 18: calc_api.CapRequestOld.type:type_name -> calc_api.CapRequestOld.Type
	6,   // 19: calc_api.CapRequestOld.condition:type_name -> calc_api.CapRequestOld.Condition
	7,   // 20: calc_api.CapRequestOld.calculation:type_name -> calc_api.CapRequestOld.Calcutation
	49,  // 21: calc_api.CapRequestOld.flangeData:type_name -> cap_model.FlangeData
	50,  // 22: calc_api.CapRequestOld.capData:type_name -> cap_model.CapData
	51,  // 23: calc_api.CapRequestOld.bolts:type_name -> cap_model.BoltData
	52,  // 24: calc_api.CapRequestOld.gasket:type_name -> cap_model.GasketData
	53,  // 25: calc_api.CapRequestOld.embed:type_name -> cap_model.EmbedData
	54,  // 26: calc_api.CapRequestOld.washer:type_name -> cap_model.WasherData
	55,  // 27: calc_api.CapResponseOld.flange:type_name -> cap_model.FlangeResultOld
	56,  // 28: calc_api.CapResponseOld.cap:type_name -> cap_model.CapResultOld
	57,  // 29: calc_api.CapResponseOld.bolt:type_name -> cap_model.BoltResult
	58,  // 30: calc_api.CapResponseOld.gasket:type_name -> cap_model.GasketResult
	59,  // 31: calc_api.CapResponseOld.embed:type_name -> cap_model.EmbedResult
	60,  // 32: calc_api.CapResponseOld.calc:type_name -> cap_model.CalculatedCap
	61,  // 33: calc_api.CapResponseOld.formulas:type_name -> cap_model.CalcCapFormulas
	62,  // 34: calc_api.CapResponseOld.data:type_name -> cap_model.DataResult
	63,  // 35: calc_api.CapResponseOld.washers:type_name -> cap_model.WasherResult
	64,  // 36: calc_api.CapRequest.data:type_name -> cap_model.MainData
	49,  // 37: calc_api.CapRequest.flangeData:type_name -> cap_model.FlangeData
	50,  // 38: calc_api.CapRequest.capData:type_name -> cap_model.CapData
	51,  // 39: calc_api.CapRequest.bolts:type_name -> cap_model.BoltData
	52,  // 40: calc_api.CapRequest.gasket:type_name -> cap_model.GasketData
	53,  // 41: calc_api.CapRequest.embed:type_name -> cap_model.EmbedData
	54,  // 42: calc_api.CapRequest.washer:type_name -> cap_model.WasherData
	62,  // 43: calc_api.CapResponse.data:type_name -> cap_model.DataResult
	65,  // 44: calc_api.CapResponse.flange:type_name -> cap_model.FlangeResult
	66,  // 45: calc_api.CapResponse.cap:type_name -> cap_model.CapResult
	57,  // 46: calc_api.CapResponse.bolt:type_name -> cap_model.BoltResult
	58,  // 47: calc_api.CapResponse.gasket:type_name -> cap_model.GasketResult
	59,  // 48: calc_api.CapResponse.embed:type_name -> cap_model.EmbedResult
	63,  // 49: calc_api.CapResponse.washers:type_name -> cap_model.WasherResult
	67,  // 50: calc_api.CapResponse.calc:type_name -> cap_model.Calculated
	68,  // 51: calc_api.CapResponse.formulas:type_name -> cap_model.Formulas
	9,   // 52: calc_api.FloatRequest.type:type_name -> calc_api.FloatRequest.Type
	8,   // 53: calc_api.FloatRequest.condition:type_name -> calc_api.FloatRequest.Condition
	69,  // 54: calc_api.FloatRequest.flangeData:type_name -> float_model.FlangeData
	70,  // 55: calc_api.FloatRequest.capData:type_name -> float_model.CapData
	71,  // 56: calc_api.FloatRequest.bolts:type_name -> float_model.BoltData
	72,  // 57: calc_api.FloatRequest.gasket:type_name -> float_model.GasketData
	73,  // 58: calc_api.FloatResponse.data:type_name -> float_model.DataResult
	74,  // 59: calc_api.FloatResponse.flange:type_name -> float_model.FlangeResult
	75,  // 60: calc_api.FloatResponse.cap:type_name -> float_model.CapResult
	76,  // 61: calc_api.FloatResponse.bolt:type_name -> float_model.BoltResult
	77,  // 62: calc_api.FloatResponse.gasket:type_name -> float_model.GasketResult
	78,  // 63: calc_api.FloatResponse.calc:type_name -> float_model.Calculated
	79,  // 64: calc_api.FloatResponse.formulas:type_name -> float_model.Formulas
	11,  // 65: calc_api.DevCoolingRequest.method:type_name -> calc_api.DevCoolingRequest.MountingMethod
	10,  // 66: calc_api.DevCoolingRequest.typeBolt:type_name -> calc_api.DevCoolingRequest.TypeBolt
	12,  // 67: calc_api.DevCoolingRequest.mounting:type_name -> calc_api.DevCoolingRequest.Mounting
	13,  // 68: calc_api.DevCoolingRequest.typeMounting:type_name -> calc_api.DevCoolingRequest.TypeMounting
	14,  // 69: calc_api.DevCoolingRequest.cameraDiagram:type_name -> calc_api.DevCoolingRequest.CameraDiagram
	15,  // 70: calc_api.DevCoolingRequest.layout:type_name -> calc_api.DevCoolingRequest.Layout
	80,  // 71: calc_api.DevCoolingRequest.cap:type_name -> dev_cooling_model.CapData
	81,  // 72: calc_api.DevCoolingRequest.tubeSheet:type_name -> dev_cooling_model.TubeSheetData
	82,  // 73: calc_api.DevCoolingRequest.tube:type_name -> dev_cooling_model.TubeData
	83,  // 74: calc_api.DevCoolingRequest.bolts:type_name -> dev_cooling_model.BoltData
	84,  // 75: calc_api.DevCoolingRequest.gasket:type_name -> dev_cooling_model.GasketData
	85,  // 76: calc_api.DevCoolingResponse.data:type_name -> dev_cooling_model.DataResult
	86,  // 77: calc_api.DevCoolingResponse.cap:type_name -> dev_cooling_model.CapResult
	87,  // 78: calc_api.DevCoolingResponse.tubeSheet:type_name -> dev_cooling_model.TubeSheetResult
	88,  // 79: calc_api.DevCoolingResponse.tube:type_name -> dev_cooling_model.TubeResult
	89,  // 80: calc_api.DevCoolingResponse.bolts:type_name -> dev_cooling_model.BoltResult
	90,  // 81: calc_api.DevCoolingResponse.gasket:type_name -> dev_cooling_model.GasketResult
	91,  // 82: calc_api.DevCoolingResponse.calc:type_name -> dev_cooling_model.Calculated
	92,  // 83: calc_api.DevCoolingResponse.formulas:type_name -> dev_cooling_model.Formulas
	93,  // 84: calc_api.GasCoolingRequest.data:type_name -> gas_cooling_model.MainData
	94,  // 85: calc_api.GasCoolingRequest.bolts:type_name -> gas_cooling_model.BoltData
	95,  // 86: calc_api.GasCoolingRequest.gasket:type_name -> gas_cooling_model.GasketData
	96,  // 87: calc_api.GasCoolingResponse.data:type_name -> gas_cooling_model.DataResult
	97,  // 88: calc_api.GasCoolingResponse.bolts:type_name -> gas_cooling_model.BoltResult
	98,  // 89: calc_api.GasCoolingResponse.gasket:type_name -> gas_cooling_model.GasketResult
	99,  // 90: calc_api.GasCoolingResponse.calc:type_name -> gas_cooling_model.Calculated
	100, // 91: calc_api.GasCoolingResponse.formulas:type_name -> gas_cooling_model.Formulas
	16,  // 92: calc_api.ExpressCircleRequest.typeBolt:type_name -> calc_api.ExpressCircleRequest.TypeBolt
	17,  // 93: calc_api.ExpressCircleRequest.condition:type_name -> calc_api.ExpressCircleRequest.Condition
	101, // 94: calc_api.ExpressCircleRequest.bolts:type_name -> express_circle_model.BoltData
	102, // 95: calc_api.ExpressCircleRequest.gasket:type_name -> express_circle_model.GasketData
	103, // 96: calc_api.ExpressCircleResponse.data:type_name -> express_circle_model.DataResult
	104, // 97: calc_api.ExpressCircleResponse.bolts:type_name -> express_circle_model.BoltResult
	105, // 98: calc_api.ExpressCircleResponse.gasket:type_name -> express_circle_model.GasketResult
	106, // 99: calc_api.ExpressCircleResponse.calc:type_name -> express_circle_model.Calculated
	107, // 100: calc_api.ExpressCircleResponse.formulas:type_name -> express_circle_model.Formulas
	18,  // 101: calc_api.ExpressRectangleRequest.typeBolt:type_name -> calc_api.ExpressRectangleRequest.TypeBolt
	19,  // 102: calc_api.ExpressRectangleRequest.condition:type_name -> calc_api.ExpressRectangleRequest.Condition
	108, // 103: calc_api.ExpressRectangleRequest.bolts:type_name -> express_rectangle_model.BoltData
	109, // 104: calc_api.ExpressRectangleRequest.gasket:type_name -> express_rectangle_model.GasketData
	110, // 105: calc_api.ExpressRectangleResponse.data:type_name -> express_rectangle_model.DataResult
	111, // 106: calc_api.ExpressRectangleResponse.bolts:type_name -> express_rectangle_model.BoltResult
	112, // 107: calc_api.ExpressRectangleResponse.gasket:type_name -> express_rectangle_model.GasketResult
	113, // 108: calc_api.ExpressRectangleResponse.calc:type_name -> express_rectangle_model.Calculated
	114, // 109: calc_api.ExpressRectangleResponse.formulas:type_name -> express_rectangle_model.Formulas
	20,  // 110: calc_api.CalcService.CalculateFlange:input_type -> calc_api.FlangeRequest
	24,  // 111: calc_api.CalcService.CalculateCap:input_type -> calc_api.CapRequest
	22,  // 112: calc_api.CalcService.CalculateCapOld:input_type -> calc_api.CapRequestOld
	26,  // 113: calc_api.CalcService.CalculateFloat:input_type -> calc_api.FloatRequest
	28,  // 114: calc_api.CalcService.CalculateDevCooling:input_type -> calc_api.DevCoolingRequest
	30,  // 115: calc_api.CalcService.CalculateGasCooling:input_type -> calc_api.GasCoolingRequest
	32,  // 116: calc_api.CalcService.CalculateExCircle:input_type -> calc_api.ExpressCircleRequest
	34,  // 117: calc_api.CalcService.CalculateExRectangle:input_type -> calc_api.ExpressRectangleRequest
	21,  // 118: calc_api.CalcService.CalculateFlange:output_type -> calc_api.FlangeResponse
	25,  // 119: calc_api.CalcService.CalculateCap:output_type -> calc_api.CapResponse
	23,  // 120: calc_api.CalcService.CalculateCapOld:output_type -> calc_api.CapResponseOld
	27,  // 121: calc_api.CalcService.CalculateFloat:output_type -> calc_api.FloatResponse
	29,  // 122: calc_api.CalcService.CalculateDevCooling:output_type -> calc_api.DevCoolingResponse
	31,  // 123: calc_api.CalcService.CalculateGasCooling:output_type -> calc_api.GasCoolingResponse
	33,  // 124: calc_api.CalcService.CalculateExCircle:output_type -> calc_api.ExpressCircleResponse
	35,  // 125: calc_api.CalcService.CalculateExRectangle:output_type -> calc_api.ExpressRectangleResponse
	118, // [118:126] is the sub-list for method output_type
	110, // [110:118] is the sub-list for method input_type
	110, // [110:110] is the sub-list for extension type_name
	110, // [110:110] is the sub-list for extension extendee
	0,   // [0:110] is the sub-list for field type_name
}

func init() { file_moment_calc_api_proto_init() }
func file_moment_calc_api_proto_init() {
	if File_moment_calc_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_moment_calc_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapRequestOld); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapResponseOld); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevCoolingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevCoolingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasCoolingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasCoolingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpressCircleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpressCircleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpressRectangleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpressRectangleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_moment_calc_api_proto_rawDesc,
			NumEnums:      20,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_moment_calc_api_proto_goTypes,
		DependencyIndexes: file_moment_calc_api_proto_depIdxs,
		EnumInfos:         file_moment_calc_api_proto_enumTypes,
		MessageInfos:      file_moment_calc_api_proto_msgTypes,
	}.Build()
	File_moment_calc_api_proto = out.File
	file_moment_calc_api_proto_rawDesc = nil
	file_moment_calc_api_proto_goTypes = nil
	file_moment_calc_api_proto_depIdxs = nil
}
