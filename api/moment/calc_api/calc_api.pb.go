// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: moment/calc_api.proto

package calc_api

import (
	cap_model "github.com/Alexander272/sealur_proto/api/moment/calc_api/cap_model"
	flange_model "github.com/Alexander272/sealur_proto/api/moment/calc_api/flange_model"
	float_model "github.com/Alexander272/sealur_proto/api/moment/calc_api/float_model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FlangeRequest_Flanges int32

const (
	FlangeRequest_isolated    FlangeRequest_Flanges = 0
	FlangeRequest_nonIsolated FlangeRequest_Flanges = 1
	FlangeRequest_manually    FlangeRequest_Flanges = 2
)

// Enum value maps for FlangeRequest_Flanges.
var (
	FlangeRequest_Flanges_name = map[int32]string{
		0: "isolated",
		1: "nonIsolated",
		2: "manually",
	}
	FlangeRequest_Flanges_value = map[string]int32{
		"isolated":    0,
		"nonIsolated": 1,
		"manually":    2,
	}
)

func (x FlangeRequest_Flanges) Enum() *FlangeRequest_Flanges {
	p := new(FlangeRequest_Flanges)
	*p = x
	return p
}

func (x FlangeRequest_Flanges) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlangeRequest_Flanges) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[0].Descriptor()
}

func (FlangeRequest_Flanges) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[0]
}

func (x FlangeRequest_Flanges) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlangeRequest_Flanges.Descriptor instead.
func (FlangeRequest_Flanges) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{0, 0}
}

type FlangeRequest_Type int32

const (
	FlangeRequest_bolt FlangeRequest_Type = 0
	FlangeRequest_pin  FlangeRequest_Type = 1
)

// Enum value maps for FlangeRequest_Type.
var (
	FlangeRequest_Type_name = map[int32]string{
		0: "bolt",
		1: "pin",
	}
	FlangeRequest_Type_value = map[string]int32{
		"bolt": 0,
		"pin":  1,
	}
)

func (x FlangeRequest_Type) Enum() *FlangeRequest_Type {
	p := new(FlangeRequest_Type)
	*p = x
	return p
}

func (x FlangeRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlangeRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[1].Descriptor()
}

func (FlangeRequest_Type) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[1]
}

func (x FlangeRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlangeRequest_Type.Descriptor instead.
func (FlangeRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{0, 1}
}

type FlangeRequest_Condition int32

const (
	FlangeRequest_uncontrollable  FlangeRequest_Condition = 0
	FlangeRequest_controllable    FlangeRequest_Condition = 1
	FlangeRequest_controllablePin FlangeRequest_Condition = 2
)

// Enum value maps for FlangeRequest_Condition.
var (
	FlangeRequest_Condition_name = map[int32]string{
		0: "uncontrollable",
		1: "controllable",
		2: "controllablePin",
	}
	FlangeRequest_Condition_value = map[string]int32{
		"uncontrollable":  0,
		"controllable":    1,
		"controllablePin": 2,
	}
)

func (x FlangeRequest_Condition) Enum() *FlangeRequest_Condition {
	p := new(FlangeRequest_Condition)
	*p = x
	return p
}

func (x FlangeRequest_Condition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlangeRequest_Condition) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[2].Descriptor()
}

func (FlangeRequest_Condition) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[2]
}

func (x FlangeRequest_Condition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlangeRequest_Condition.Descriptor instead.
func (FlangeRequest_Condition) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{0, 2}
}

type FlangeRequest_Calcutation int32

const (
	FlangeRequest_basis    FlangeRequest_Calcutation = 0
	FlangeRequest_strength FlangeRequest_Calcutation = 1
)

// Enum value maps for FlangeRequest_Calcutation.
var (
	FlangeRequest_Calcutation_name = map[int32]string{
		0: "basis",
		1: "strength",
	}
	FlangeRequest_Calcutation_value = map[string]int32{
		"basis":    0,
		"strength": 1,
	}
)

func (x FlangeRequest_Calcutation) Enum() *FlangeRequest_Calcutation {
	p := new(FlangeRequest_Calcutation)
	*p = x
	return p
}

func (x FlangeRequest_Calcutation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlangeRequest_Calcutation) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[3].Descriptor()
}

func (FlangeRequest_Calcutation) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[3]
}

func (x FlangeRequest_Calcutation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlangeRequest_Calcutation.Descriptor instead.
func (FlangeRequest_Calcutation) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{0, 3}
}

type CapRequest_Flanges int32

const (
	CapRequest_isolated    CapRequest_Flanges = 0
	CapRequest_nonIsolated CapRequest_Flanges = 1
	CapRequest_manually    CapRequest_Flanges = 2
)

// Enum value maps for CapRequest_Flanges.
var (
	CapRequest_Flanges_name = map[int32]string{
		0: "isolated",
		1: "nonIsolated",
		2: "manually",
	}
	CapRequest_Flanges_value = map[string]int32{
		"isolated":    0,
		"nonIsolated": 1,
		"manually":    2,
	}
)

func (x CapRequest_Flanges) Enum() *CapRequest_Flanges {
	p := new(CapRequest_Flanges)
	*p = x
	return p
}

func (x CapRequest_Flanges) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapRequest_Flanges) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[4].Descriptor()
}

func (CapRequest_Flanges) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[4]
}

func (x CapRequest_Flanges) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CapRequest_Flanges.Descriptor instead.
func (CapRequest_Flanges) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{2, 0}
}

type CapRequest_Type int32

const (
	CapRequest_bolt CapRequest_Type = 0
	CapRequest_pin  CapRequest_Type = 1
)

// Enum value maps for CapRequest_Type.
var (
	CapRequest_Type_name = map[int32]string{
		0: "bolt",
		1: "pin",
	}
	CapRequest_Type_value = map[string]int32{
		"bolt": 0,
		"pin":  1,
	}
)

func (x CapRequest_Type) Enum() *CapRequest_Type {
	p := new(CapRequest_Type)
	*p = x
	return p
}

func (x CapRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[5].Descriptor()
}

func (CapRequest_Type) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[5]
}

func (x CapRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CapRequest_Type.Descriptor instead.
func (CapRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{2, 1}
}

type CapRequest_Condition int32

const (
	CapRequest_uncontrollable  CapRequest_Condition = 0
	CapRequest_controllable    CapRequest_Condition = 1
	CapRequest_controllablePin CapRequest_Condition = 2
)

// Enum value maps for CapRequest_Condition.
var (
	CapRequest_Condition_name = map[int32]string{
		0: "uncontrollable",
		1: "controllable",
		2: "controllablePin",
	}
	CapRequest_Condition_value = map[string]int32{
		"uncontrollable":  0,
		"controllable":    1,
		"controllablePin": 2,
	}
)

func (x CapRequest_Condition) Enum() *CapRequest_Condition {
	p := new(CapRequest_Condition)
	*p = x
	return p
}

func (x CapRequest_Condition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapRequest_Condition) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[6].Descriptor()
}

func (CapRequest_Condition) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[6]
}

func (x CapRequest_Condition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CapRequest_Condition.Descriptor instead.
func (CapRequest_Condition) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{2, 2}
}

type CapRequest_Calcutation int32

const (
	CapRequest_basis    CapRequest_Calcutation = 0
	CapRequest_strength CapRequest_Calcutation = 1
)

// Enum value maps for CapRequest_Calcutation.
var (
	CapRequest_Calcutation_name = map[int32]string{
		0: "basis",
		1: "strength",
	}
	CapRequest_Calcutation_value = map[string]int32{
		"basis":    0,
		"strength": 1,
	}
)

func (x CapRequest_Calcutation) Enum() *CapRequest_Calcutation {
	p := new(CapRequest_Calcutation)
	*p = x
	return p
}

func (x CapRequest_Calcutation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapRequest_Calcutation) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[7].Descriptor()
}

func (CapRequest_Calcutation) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[7]
}

func (x CapRequest_Calcutation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CapRequest_Calcutation.Descriptor instead.
func (CapRequest_Calcutation) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{2, 3}
}

type FloatRequest_Condition int32

const (
	FloatRequest_uncontrollable  FloatRequest_Condition = 0
	FloatRequest_controllable    FloatRequest_Condition = 1
	FloatRequest_controllablePin FloatRequest_Condition = 2
)

// Enum value maps for FloatRequest_Condition.
var (
	FloatRequest_Condition_name = map[int32]string{
		0: "uncontrollable",
		1: "controllable",
		2: "controllablePin",
	}
	FloatRequest_Condition_value = map[string]int32{
		"uncontrollable":  0,
		"controllable":    1,
		"controllablePin": 2,
	}
)

func (x FloatRequest_Condition) Enum() *FloatRequest_Condition {
	p := new(FloatRequest_Condition)
	*p = x
	return p
}

func (x FloatRequest_Condition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FloatRequest_Condition) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[8].Descriptor()
}

func (FloatRequest_Condition) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[8]
}

func (x FloatRequest_Condition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FloatRequest_Condition.Descriptor instead.
func (FloatRequest_Condition) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{4, 0}
}

type FloatRequest_Type int32

const (
	FloatRequest_bolt FloatRequest_Type = 0
	FloatRequest_pin  FloatRequest_Type = 1
)

// Enum value maps for FloatRequest_Type.
var (
	FloatRequest_Type_name = map[int32]string{
		0: "bolt",
		1: "pin",
	}
	FloatRequest_Type_value = map[string]int32{
		"bolt": 0,
		"pin":  1,
	}
)

func (x FloatRequest_Type) Enum() *FloatRequest_Type {
	p := new(FloatRequest_Type)
	*p = x
	return p
}

func (x FloatRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FloatRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_proto_enumTypes[9].Descriptor()
}

func (FloatRequest_Type) Type() protoreflect.EnumType {
	return &file_moment_calc_api_proto_enumTypes[9]
}

func (x FloatRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FloatRequest_Type.Descriptor instead.
func (FloatRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{4, 1}
}

type FlangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pressure       float64                    `protobuf:"fixed64,1,opt,name=pressure,proto3" json:"pressure,omitempty"`
	AxialForce     int32                      `protobuf:"varint,2,opt,name=axialForce,proto3" json:"axialForce,omitempty"`
	BendingMoment  int32                      `protobuf:"varint,3,opt,name=bendingMoment,proto3" json:"bendingMoment,omitempty"`
	Temp           float64                    `protobuf:"fixed64,4,opt,name=temp,proto3" json:"temp,omitempty"`
	IsWork         bool                       `protobuf:"varint,5,opt,name=isWork,proto3" json:"isWork,omitempty"`
	Flanges        FlangeRequest_Flanges      `protobuf:"varint,6,opt,name=flanges,proto3,enum=calc_api.FlangeRequest_Flanges" json:"flanges,omitempty"`
	IsSameFlange   bool                       `protobuf:"varint,7,opt,name=isSameFlange,proto3" json:"isSameFlange,omitempty"`
	IsEmbedded     bool                       `protobuf:"varint,8,opt,name=isEmbedded,proto3" json:"isEmbedded,omitempty"`
	Type           FlangeRequest_Type         `protobuf:"varint,9,opt,name=type,proto3,enum=calc_api.FlangeRequest_Type" json:"type,omitempty"`
	Condition      FlangeRequest_Condition    `protobuf:"varint,10,opt,name=condition,proto3,enum=calc_api.FlangeRequest_Condition" json:"condition,omitempty"`
	Calculation    FlangeRequest_Calcutation  `protobuf:"varint,11,opt,name=calculation,proto3,enum=calc_api.FlangeRequest_Calcutation" json:"calculation,omitempty"`
	FlangesData    []*flange_model.FlangeData `protobuf:"bytes,12,rep,name=flangesData,proto3" json:"flangesData,omitempty"`
	Bolts          *flange_model.BoltData     `protobuf:"bytes,13,opt,name=bolts,proto3" json:"bolts,omitempty"`
	Gasket         *flange_model.GasketData   `protobuf:"bytes,14,opt,name=gasket,proto3" json:"gasket,omitempty"`
	Embed          *flange_model.EmbedData    `protobuf:"bytes,15,opt,name=embed,proto3" json:"embed,omitempty"`
	IsUseWasher    bool                       `protobuf:"varint,16,opt,name=isUseWasher,proto3" json:"isUseWasher,omitempty"`
	Washer         []*flange_model.WasherData `protobuf:"bytes,17,rep,name=washer,proto3" json:"washer,omitempty"`
	IsNeedFormulas bool                       `protobuf:"varint,18,opt,name=isNeedFormulas,proto3" json:"isNeedFormulas,omitempty"`
}

func (x *FlangeRequest) Reset() {
	*x = FlangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlangeRequest) ProtoMessage() {}

func (x *FlangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlangeRequest.ProtoReflect.Descriptor instead.
func (*FlangeRequest) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{0}
}

func (x *FlangeRequest) GetPressure() float64 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *FlangeRequest) GetAxialForce() int32 {
	if x != nil {
		return x.AxialForce
	}
	return 0
}

func (x *FlangeRequest) GetBendingMoment() int32 {
	if x != nil {
		return x.BendingMoment
	}
	return 0
}

func (x *FlangeRequest) GetTemp() float64 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *FlangeRequest) GetIsWork() bool {
	if x != nil {
		return x.IsWork
	}
	return false
}

func (x *FlangeRequest) GetFlanges() FlangeRequest_Flanges {
	if x != nil {
		return x.Flanges
	}
	return FlangeRequest_isolated
}

func (x *FlangeRequest) GetIsSameFlange() bool {
	if x != nil {
		return x.IsSameFlange
	}
	return false
}

func (x *FlangeRequest) GetIsEmbedded() bool {
	if x != nil {
		return x.IsEmbedded
	}
	return false
}

func (x *FlangeRequest) GetType() FlangeRequest_Type {
	if x != nil {
		return x.Type
	}
	return FlangeRequest_bolt
}

func (x *FlangeRequest) GetCondition() FlangeRequest_Condition {
	if x != nil {
		return x.Condition
	}
	return FlangeRequest_uncontrollable
}

func (x *FlangeRequest) GetCalculation() FlangeRequest_Calcutation {
	if x != nil {
		return x.Calculation
	}
	return FlangeRequest_basis
}

func (x *FlangeRequest) GetFlangesData() []*flange_model.FlangeData {
	if x != nil {
		return x.FlangesData
	}
	return nil
}

func (x *FlangeRequest) GetBolts() *flange_model.BoltData {
	if x != nil {
		return x.Bolts
	}
	return nil
}

func (x *FlangeRequest) GetGasket() *flange_model.GasketData {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *FlangeRequest) GetEmbed() *flange_model.EmbedData {
	if x != nil {
		return x.Embed
	}
	return nil
}

func (x *FlangeRequest) GetIsUseWasher() bool {
	if x != nil {
		return x.IsUseWasher
	}
	return false
}

func (x *FlangeRequest) GetWasher() []*flange_model.WasherData {
	if x != nil {
		return x.Washer
	}
	return nil
}

func (x *FlangeRequest) GetIsNeedFormulas() bool {
	if x != nil {
		return x.IsNeedFormulas
	}
	return false
}

type FlangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSameFlange bool                             `protobuf:"varint,1,opt,name=isSameFlange,proto3" json:"isSameFlange,omitempty"`
	Flanges      []*flange_model.FlangeResult     `protobuf:"bytes,2,rep,name=flanges,proto3" json:"flanges,omitempty"`
	Bolt         *flange_model.BoltResult         `protobuf:"bytes,3,opt,name=bolt,proto3" json:"bolt,omitempty"`
	Gasket       *flange_model.GasketResult       `protobuf:"bytes,4,opt,name=gasket,proto3" json:"gasket,omitempty"`
	Embed        *flange_model.EmbedResult        `protobuf:"bytes,5,opt,name=embed,proto3" json:"embed,omitempty"`
	Calc         *flange_model.CalculatedFlange   `protobuf:"bytes,6,opt,name=calc,proto3" json:"calc,omitempty"`
	Formulas     *flange_model.CalcFlangeFormulas `protobuf:"bytes,7,opt,name=formulas,proto3" json:"formulas,omitempty"`
	Data         *flange_model.DataResult         `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	Washers      []*flange_model.WasherResult     `protobuf:"bytes,9,rep,name=washers,proto3" json:"washers,omitempty"`
}

func (x *FlangeResponse) Reset() {
	*x = FlangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlangeResponse) ProtoMessage() {}

func (x *FlangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlangeResponse.ProtoReflect.Descriptor instead.
func (*FlangeResponse) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{1}
}

func (x *FlangeResponse) GetIsSameFlange() bool {
	if x != nil {
		return x.IsSameFlange
	}
	return false
}

func (x *FlangeResponse) GetFlanges() []*flange_model.FlangeResult {
	if x != nil {
		return x.Flanges
	}
	return nil
}

func (x *FlangeResponse) GetBolt() *flange_model.BoltResult {
	if x != nil {
		return x.Bolt
	}
	return nil
}

func (x *FlangeResponse) GetGasket() *flange_model.GasketResult {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *FlangeResponse) GetEmbed() *flange_model.EmbedResult {
	if x != nil {
		return x.Embed
	}
	return nil
}

func (x *FlangeResponse) GetCalc() *flange_model.CalculatedFlange {
	if x != nil {
		return x.Calc
	}
	return nil
}

func (x *FlangeResponse) GetFormulas() *flange_model.CalcFlangeFormulas {
	if x != nil {
		return x.Formulas
	}
	return nil
}

func (x *FlangeResponse) GetData() *flange_model.DataResult {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FlangeResponse) GetWashers() []*flange_model.WasherResult {
	if x != nil {
		return x.Washers
	}
	return nil
}

type CapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pressure       float64                 `protobuf:"fixed64,1,opt,name=pressure,proto3" json:"pressure,omitempty"`
	AxialForce     int32                   `protobuf:"varint,2,opt,name=axialForce,proto3" json:"axialForce,omitempty"`
	Temp           float64                 `protobuf:"fixed64,3,opt,name=temp,proto3" json:"temp,omitempty"`
	IsWork         bool                    `protobuf:"varint,4,opt,name=isWork,proto3" json:"isWork,omitempty"`
	Flanges        CapRequest_Flanges      `protobuf:"varint,5,opt,name=flanges,proto3,enum=calc_api.CapRequest_Flanges" json:"flanges,omitempty"`
	IsEmbedded     bool                    `protobuf:"varint,6,opt,name=isEmbedded,proto3" json:"isEmbedded,omitempty"`
	Type           CapRequest_Type         `protobuf:"varint,7,opt,name=type,proto3,enum=calc_api.CapRequest_Type" json:"type,omitempty"`
	Condition      CapRequest_Condition    `protobuf:"varint,8,opt,name=condition,proto3,enum=calc_api.CapRequest_Condition" json:"condition,omitempty"`
	Calculation    CapRequest_Calcutation  `protobuf:"varint,9,opt,name=calculation,proto3,enum=calc_api.CapRequest_Calcutation" json:"calculation,omitempty"`
	FlangeData     *cap_model.FlangeData   `protobuf:"bytes,10,opt,name=flangeData,proto3" json:"flangeData,omitempty"`
	CapData        *cap_model.CapData      `protobuf:"bytes,11,opt,name=capData,proto3" json:"capData,omitempty"`
	Bolts          *cap_model.BoltData     `protobuf:"bytes,12,opt,name=bolts,proto3" json:"bolts,omitempty"`
	Gasket         *cap_model.GasketData   `protobuf:"bytes,13,opt,name=gasket,proto3" json:"gasket,omitempty"`
	Embed          *cap_model.EmbedData    `protobuf:"bytes,14,opt,name=embed,proto3" json:"embed,omitempty"`
	IsUseWasher    bool                    `protobuf:"varint,15,opt,name=isUseWasher,proto3" json:"isUseWasher,omitempty"`
	Washer         []*cap_model.WasherData `protobuf:"bytes,16,rep,name=washer,proto3" json:"washer,omitempty"`
	IsNeedFormulas bool                    `protobuf:"varint,17,opt,name=isNeedFormulas,proto3" json:"isNeedFormulas,omitempty"`
}

func (x *CapRequest) Reset() {
	*x = CapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapRequest) ProtoMessage() {}

func (x *CapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapRequest.ProtoReflect.Descriptor instead.
func (*CapRequest) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{2}
}

func (x *CapRequest) GetPressure() float64 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *CapRequest) GetAxialForce() int32 {
	if x != nil {
		return x.AxialForce
	}
	return 0
}

func (x *CapRequest) GetTemp() float64 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *CapRequest) GetIsWork() bool {
	if x != nil {
		return x.IsWork
	}
	return false
}

func (x *CapRequest) GetFlanges() CapRequest_Flanges {
	if x != nil {
		return x.Flanges
	}
	return CapRequest_isolated
}

func (x *CapRequest) GetIsEmbedded() bool {
	if x != nil {
		return x.IsEmbedded
	}
	return false
}

func (x *CapRequest) GetType() CapRequest_Type {
	if x != nil {
		return x.Type
	}
	return CapRequest_bolt
}

func (x *CapRequest) GetCondition() CapRequest_Condition {
	if x != nil {
		return x.Condition
	}
	return CapRequest_uncontrollable
}

func (x *CapRequest) GetCalculation() CapRequest_Calcutation {
	if x != nil {
		return x.Calculation
	}
	return CapRequest_basis
}

func (x *CapRequest) GetFlangeData() *cap_model.FlangeData {
	if x != nil {
		return x.FlangeData
	}
	return nil
}

func (x *CapRequest) GetCapData() *cap_model.CapData {
	if x != nil {
		return x.CapData
	}
	return nil
}

func (x *CapRequest) GetBolts() *cap_model.BoltData {
	if x != nil {
		return x.Bolts
	}
	return nil
}

func (x *CapRequest) GetGasket() *cap_model.GasketData {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *CapRequest) GetEmbed() *cap_model.EmbedData {
	if x != nil {
		return x.Embed
	}
	return nil
}

func (x *CapRequest) GetIsUseWasher() bool {
	if x != nil {
		return x.IsUseWasher
	}
	return false
}

func (x *CapRequest) GetWasher() []*cap_model.WasherData {
	if x != nil {
		return x.Washer
	}
	return nil
}

func (x *CapRequest) GetIsNeedFormulas() bool {
	if x != nil {
		return x.IsNeedFormulas
	}
	return false
}

type CapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flange   *cap_model.FlangeResult    `protobuf:"bytes,1,opt,name=flange,proto3" json:"flange,omitempty"`
	Cap      *cap_model.CapResult       `protobuf:"bytes,2,opt,name=cap,proto3" json:"cap,omitempty"`
	Bolt     *cap_model.BoltResult      `protobuf:"bytes,3,opt,name=bolt,proto3" json:"bolt,omitempty"`
	Gasket   *cap_model.GasketResult    `protobuf:"bytes,4,opt,name=gasket,proto3" json:"gasket,omitempty"`
	Embed    *cap_model.EmbedResult     `protobuf:"bytes,5,opt,name=embed,proto3" json:"embed,omitempty"`
	Calc     *cap_model.CalculatedCap   `protobuf:"bytes,6,opt,name=calc,proto3" json:"calc,omitempty"`
	Formulas *cap_model.CalcCapFormulas `protobuf:"bytes,7,opt,name=formulas,proto3" json:"formulas,omitempty"`
	Data     *cap_model.DataResult      `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	Washers  []*cap_model.WasherResult  `protobuf:"bytes,9,rep,name=washers,proto3" json:"washers,omitempty"`
}

func (x *CapResponse) Reset() {
	*x = CapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapResponse) ProtoMessage() {}

func (x *CapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapResponse.ProtoReflect.Descriptor instead.
func (*CapResponse) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{3}
}

func (x *CapResponse) GetFlange() *cap_model.FlangeResult {
	if x != nil {
		return x.Flange
	}
	return nil
}

func (x *CapResponse) GetCap() *cap_model.CapResult {
	if x != nil {
		return x.Cap
	}
	return nil
}

func (x *CapResponse) GetBolt() *cap_model.BoltResult {
	if x != nil {
		return x.Bolt
	}
	return nil
}

func (x *CapResponse) GetGasket() *cap_model.GasketResult {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *CapResponse) GetEmbed() *cap_model.EmbedResult {
	if x != nil {
		return x.Embed
	}
	return nil
}

func (x *CapResponse) GetCalc() *cap_model.CalculatedCap {
	if x != nil {
		return x.Calc
	}
	return nil
}

func (x *CapResponse) GetFormulas() *cap_model.CalcCapFormulas {
	if x != nil {
		return x.Formulas
	}
	return nil
}

func (x *CapResponse) GetData() *cap_model.DataResult {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CapResponse) GetWashers() []*cap_model.WasherResult {
	if x != nil {
		return x.Washers
	}
	return nil
}

type FloatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pressure       float64                 `protobuf:"fixed64,1,opt,name=pressure,proto3" json:"pressure,omitempty"`
	IsWork         bool                    `protobuf:"varint,2,opt,name=isWork,proto3" json:"isWork,omitempty"`
	HasThorn       bool                    `protobuf:"varint,3,opt,name=hasThorn,proto3" json:"hasThorn,omitempty"`
	Type           FloatRequest_Type       `protobuf:"varint,4,opt,name=type,proto3,enum=calc_api.FloatRequest_Type" json:"type,omitempty"`
	Condition      FloatRequest_Condition  `protobuf:"varint,5,opt,name=condition,proto3,enum=calc_api.FloatRequest_Condition" json:"condition,omitempty"`
	FlangeData     *float_model.FlangeData `protobuf:"bytes,6,opt,name=flangeData,proto3" json:"flangeData,omitempty"`
	CapData        *float_model.CapData    `protobuf:"bytes,7,opt,name=capData,proto3" json:"capData,omitempty"`
	Bolts          *float_model.BoltData   `protobuf:"bytes,8,opt,name=bolts,proto3" json:"bolts,omitempty"`
	Gasket         *float_model.GasketData `protobuf:"bytes,9,opt,name=gasket,proto3" json:"gasket,omitempty"`
	IsNeedFormulas bool                    `protobuf:"varint,10,opt,name=isNeedFormulas,proto3" json:"isNeedFormulas,omitempty"`
}

func (x *FloatRequest) Reset() {
	*x = FloatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatRequest) ProtoMessage() {}

func (x *FloatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatRequest.ProtoReflect.Descriptor instead.
func (*FloatRequest) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{4}
}

func (x *FloatRequest) GetPressure() float64 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *FloatRequest) GetIsWork() bool {
	if x != nil {
		return x.IsWork
	}
	return false
}

func (x *FloatRequest) GetHasThorn() bool {
	if x != nil {
		return x.HasThorn
	}
	return false
}

func (x *FloatRequest) GetType() FloatRequest_Type {
	if x != nil {
		return x.Type
	}
	return FloatRequest_bolt
}

func (x *FloatRequest) GetCondition() FloatRequest_Condition {
	if x != nil {
		return x.Condition
	}
	return FloatRequest_uncontrollable
}

func (x *FloatRequest) GetFlangeData() *float_model.FlangeData {
	if x != nil {
		return x.FlangeData
	}
	return nil
}

func (x *FloatRequest) GetCapData() *float_model.CapData {
	if x != nil {
		return x.CapData
	}
	return nil
}

func (x *FloatRequest) GetBolts() *float_model.BoltData {
	if x != nil {
		return x.Bolts
	}
	return nil
}

func (x *FloatRequest) GetGasket() *float_model.GasketData {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *FloatRequest) GetIsNeedFormulas() bool {
	if x != nil {
		return x.IsNeedFormulas
	}
	return false
}

type FloatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   *float_model.DataResult   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Flange *float_model.FlangeResult `protobuf:"bytes,2,opt,name=flange,proto3" json:"flange,omitempty"`
	Cap    *float_model.CapResult    `protobuf:"bytes,3,opt,name=cap,proto3" json:"cap,omitempty"`
	Bolt   *float_model.BoltResult   `protobuf:"bytes,4,opt,name=bolt,proto3" json:"bolt,omitempty"`
	Gasket *float_model.GasketResult `protobuf:"bytes,5,opt,name=gasket,proto3" json:"gasket,omitempty"`
	Calc   *float_model.Calculated   `protobuf:"bytes,6,opt,name=calc,proto3" json:"calc,omitempty"` // float_model.CalcCapFormulas formulas = 7;
}

func (x *FloatResponse) Reset() {
	*x = FloatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatResponse) ProtoMessage() {}

func (x *FloatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatResponse.ProtoReflect.Descriptor instead.
func (*FloatResponse) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_proto_rawDescGZIP(), []int{5}
}

func (x *FloatResponse) GetData() *float_model.DataResult {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FloatResponse) GetFlange() *float_model.FlangeResult {
	if x != nil {
		return x.Flange
	}
	return nil
}

func (x *FloatResponse) GetCap() *float_model.CapResult {
	if x != nil {
		return x.Cap
	}
	return nil
}

func (x *FloatResponse) GetBolt() *float_model.BoltResult {
	if x != nil {
		return x.Bolt
	}
	return nil
}

func (x *FloatResponse) GetGasket() *float_model.GasketResult {
	if x != nil {
		return x.Gasket
	}
	return nil
}

func (x *FloatResponse) GetCalc() *float_model.Calculated {
	if x != nil {
		return x.Calc
	}
	return nil
}

var File_moment_calc_api_proto protoreflect.FileDescriptor

var file_moment_calc_api_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70,
	0x69, 0x1a, 0x22, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x61,
	0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x07, 0x0a, 0x0d, 0x46, 0x6c,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x78, 0x69, 0x61, 0x6c,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x78, 0x69,
	0x61, 0x6c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x62, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x65, 0x6d,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x39, 0x0a, 0x07, 0x66, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x61, 0x6c,
	0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x07, 0x66, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x53, 0x61, 0x6d, 0x65, 0x46, 0x6c,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x61,
	0x6d, 0x65, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6c, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c,
	0x0a, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x06,
	0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66,
	0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x2d,
	0x0a, 0x05, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x73, 0x55, 0x73, 0x65, 0x57, 0x61, 0x73, 0x68, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x55, 0x73, 0x65, 0x57, 0x61, 0x73, 0x68, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x06, 0x77, 0x61, 0x73, 0x68, 0x65, 0x72, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x57,
	0x61, 0x73, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x77, 0x61, 0x73, 0x68, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4e, 0x65, 0x65,
	0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x22, 0x36, 0x0a, 0x07, 0x46, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x10,
	0x02, 0x22, 0x19, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x62, 0x6f, 0x6c,
	0x74, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x10, 0x01, 0x22, 0x46, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x75, 0x6e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x69, 0x6e, 0x10, 0x02, 0x22, 0x26, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x73, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x10, 0x01, 0x22, 0xd3, 0x03, 0x0a,
	0x0e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x69, 0x73, 0x53, 0x61, 0x6d, 0x65, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x61, 0x6d, 0x65, 0x46, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x62, 0x6f, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x04,
	0x63, 0x61, 0x6c, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x63,
	0x12, 0x3c, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x73, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x2c,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66,
	0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x07,
	0x77, 0x61, 0x73, 0x68, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x57, 0x61, 0x73,
	0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x77, 0x61, 0x73, 0x68, 0x65,
	0x72, 0x73, 0x22, 0xa4, 0x07, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x78, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x78, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x65, 0x6d,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x36, 0x0a, 0x07, 0x66, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x61, 0x6c,
	0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65,
	0x64, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x66,
	0x6c, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x61, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x70,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x63, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x62, 0x6f, 0x6c,
	0x74, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x73, 0x55, 0x73, 0x65, 0x57, 0x61, 0x73, 0x68, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x55, 0x73, 0x65, 0x57, 0x61, 0x73, 0x68, 0x65, 0x72, 0x12,
	0x2d, 0x0a, 0x06, 0x77, 0x61, 0x73, 0x68, 0x65, 0x72, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x57, 0x61, 0x73, 0x68,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x77, 0x61, 0x73, 0x68, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x46, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x22, 0x36, 0x0a, 0x07, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x0c, 0x0a, 0x08, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x10, 0x02, 0x22, 0x19,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x10, 0x01, 0x22, 0x46, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x10,
	0x02, 0x22, 0x26, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x09, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x73, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x10, 0x01, 0x22, 0xb4, 0x03, 0x0a, 0x0b, 0x43, 0x61,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x6c, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x70, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x63, 0x61,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x03, 0x63,
	0x61, 0x70, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x12, 0x2f, 0x0a,
	0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x2c,
	0x0a, 0x05, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x04,
	0x63, 0x61, 0x6c, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x61, 0x70,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x61, 0x70, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x12, 0x36, 0x0a, 0x08, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x43, 0x61, 0x70,
	0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a,
	0x07, 0x77, 0x61, 0x73, 0x68, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x57, 0x61, 0x73, 0x68, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x77, 0x61, 0x73, 0x68, 0x65, 0x72, 0x73,
	0x22, 0xa1, 0x04, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x54, 0x68, 0x6f, 0x72,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x54, 0x68, 0x6f, 0x72,
	0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x07, 0x63,
	0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x63, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x05, 0x62,
	0x6f, 0x6c, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x62, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x67, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x4e,
	0x65, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x73, 0x22, 0x46, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x0e, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x10, 0x02, 0x22, 0x19, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x70,
	0x69, 0x6e, 0x10, 0x01, 0x22, 0xa6, 0x02, 0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x66, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x63, 0x61, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x43, 0x61, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x03, 0x63, 0x61, 0x70,
	0x12, 0x2b, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x12, 0x31, 0x0a,
	0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x12, 0x2b, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x32, 0xd3, 0x01,
	0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a,
	0x0f, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x17, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6c, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x61, 0x6c, 0x63,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x70, 0x12, 0x14, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x61, 0x6c, 0x63,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x0e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x61, 0x6c,
	0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x41, 0x6c, 0x65, 0x78, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x32, 0x37, 0x32, 0x2f, 0x73,
	0x65, 0x61, 0x6c, 0x75, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_moment_calc_api_proto_rawDescOnce sync.Once
	file_moment_calc_api_proto_rawDescData = file_moment_calc_api_proto_rawDesc
)

func file_moment_calc_api_proto_rawDescGZIP() []byte {
	file_moment_calc_api_proto_rawDescOnce.Do(func() {
		file_moment_calc_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_moment_calc_api_proto_rawDescData)
	})
	return file_moment_calc_api_proto_rawDescData
}

var file_moment_calc_api_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_moment_calc_api_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_moment_calc_api_proto_goTypes = []interface{}{
	(FlangeRequest_Flanges)(0),              // 0: calc_api.FlangeRequest.Flanges
	(FlangeRequest_Type)(0),                 // 1: calc_api.FlangeRequest.Type
	(FlangeRequest_Condition)(0),            // 2: calc_api.FlangeRequest.Condition
	(FlangeRequest_Calcutation)(0),          // 3: calc_api.FlangeRequest.Calcutation
	(CapRequest_Flanges)(0),                 // 4: calc_api.CapRequest.Flanges
	(CapRequest_Type)(0),                    // 5: calc_api.CapRequest.Type
	(CapRequest_Condition)(0),               // 6: calc_api.CapRequest.Condition
	(CapRequest_Calcutation)(0),             // 7: calc_api.CapRequest.Calcutation
	(FloatRequest_Condition)(0),             // 8: calc_api.FloatRequest.Condition
	(FloatRequest_Type)(0),                  // 9: calc_api.FloatRequest.Type
	(*FlangeRequest)(nil),                   // 10: calc_api.FlangeRequest
	(*FlangeResponse)(nil),                  // 11: calc_api.FlangeResponse
	(*CapRequest)(nil),                      // 12: calc_api.CapRequest
	(*CapResponse)(nil),                     // 13: calc_api.CapResponse
	(*FloatRequest)(nil),                    // 14: calc_api.FloatRequest
	(*FloatResponse)(nil),                   // 15: calc_api.FloatResponse
	(*flange_model.FlangeData)(nil),         // 16: flange_model.FlangeData
	(*flange_model.BoltData)(nil),           // 17: flange_model.BoltData
	(*flange_model.GasketData)(nil),         // 18: flange_model.GasketData
	(*flange_model.EmbedData)(nil),          // 19: flange_model.EmbedData
	(*flange_model.WasherData)(nil),         // 20: flange_model.WasherData
	(*flange_model.FlangeResult)(nil),       // 21: flange_model.FlangeResult
	(*flange_model.BoltResult)(nil),         // 22: flange_model.BoltResult
	(*flange_model.GasketResult)(nil),       // 23: flange_model.GasketResult
	(*flange_model.EmbedResult)(nil),        // 24: flange_model.EmbedResult
	(*flange_model.CalculatedFlange)(nil),   // 25: flange_model.CalculatedFlange
	(*flange_model.CalcFlangeFormulas)(nil), // 26: flange_model.CalcFlangeFormulas
	(*flange_model.DataResult)(nil),         // 27: flange_model.DataResult
	(*flange_model.WasherResult)(nil),       // 28: flange_model.WasherResult
	(*cap_model.FlangeData)(nil),            // 29: cap_model.FlangeData
	(*cap_model.CapData)(nil),               // 30: cap_model.CapData
	(*cap_model.BoltData)(nil),              // 31: cap_model.BoltData
	(*cap_model.GasketData)(nil),            // 32: cap_model.GasketData
	(*cap_model.EmbedData)(nil),             // 33: cap_model.EmbedData
	(*cap_model.WasherData)(nil),            // 34: cap_model.WasherData
	(*cap_model.FlangeResult)(nil),          // 35: cap_model.FlangeResult
	(*cap_model.CapResult)(nil),             // 36: cap_model.CapResult
	(*cap_model.BoltResult)(nil),            // 37: cap_model.BoltResult
	(*cap_model.GasketResult)(nil),          // 38: cap_model.GasketResult
	(*cap_model.EmbedResult)(nil),           // 39: cap_model.EmbedResult
	(*cap_model.CalculatedCap)(nil),         // 40: cap_model.CalculatedCap
	(*cap_model.CalcCapFormulas)(nil),       // 41: cap_model.CalcCapFormulas
	(*cap_model.DataResult)(nil),            // 42: cap_model.DataResult
	(*cap_model.WasherResult)(nil),          // 43: cap_model.WasherResult
	(*float_model.FlangeData)(nil),          // 44: float_model.FlangeData
	(*float_model.CapData)(nil),             // 45: float_model.CapData
	(*float_model.BoltData)(nil),            // 46: float_model.BoltData
	(*float_model.GasketData)(nil),          // 47: float_model.GasketData
	(*float_model.DataResult)(nil),          // 48: float_model.DataResult
	(*float_model.FlangeResult)(nil),        // 49: float_model.FlangeResult
	(*float_model.CapResult)(nil),           // 50: float_model.CapResult
	(*float_model.BoltResult)(nil),          // 51: float_model.BoltResult
	(*float_model.GasketResult)(nil),        // 52: float_model.GasketResult
	(*float_model.Calculated)(nil),          // 53: float_model.Calculated
}
var file_moment_calc_api_proto_depIdxs = []int32{
	0,  // 0: calc_api.FlangeRequest.flanges:type_name -> calc_api.FlangeRequest.Flanges
	1,  // 1: calc_api.FlangeRequest.type:type_name -> calc_api.FlangeRequest.Type
	2,  // 2: calc_api.FlangeRequest.condition:type_name -> calc_api.FlangeRequest.Condition
	3,  // 3: calc_api.FlangeRequest.calculation:type_name -> calc_api.FlangeRequest.Calcutation
	16, // 4: calc_api.FlangeRequest.flangesData:type_name -> flange_model.FlangeData
	17, // 5: calc_api.FlangeRequest.bolts:type_name -> flange_model.BoltData
	18, // 6: calc_api.FlangeRequest.gasket:type_name -> flange_model.GasketData
	19, // 7: calc_api.FlangeRequest.embed:type_name -> flange_model.EmbedData
	20, // 8: calc_api.FlangeRequest.washer:type_name -> flange_model.WasherData
	21, // 9: calc_api.FlangeResponse.flanges:type_name -> flange_model.FlangeResult
	22, // 10: calc_api.FlangeResponse.bolt:type_name -> flange_model.BoltResult
	23, // 11: calc_api.FlangeResponse.gasket:type_name -> flange_model.GasketResult
	24, // 12: calc_api.FlangeResponse.embed:type_name -> flange_model.EmbedResult
	25, // 13: calc_api.FlangeResponse.calc:type_name -> flange_model.CalculatedFlange
	26, // 14: calc_api.FlangeResponse.formulas:type_name -> flange_model.CalcFlangeFormulas
	27, // 15: calc_api.FlangeResponse.data:type_name -> flange_model.DataResult
	28, // 16: calc_api.FlangeResponse.washers:type_name -> flange_model.WasherResult
	4,  // 17: calc_api.CapRequest.flanges:type_name -> calc_api.CapRequest.Flanges
	5,  // 18: calc_api.CapRequest.type:type_name -> calc_api.CapRequest.Type
	6,  // 19: calc_api.CapRequest.condition:type_name -> calc_api.CapRequest.Condition
	7,  // 20: calc_api.CapRequest.calculation:type_name -> calc_api.CapRequest.Calcutation
	29, // 21: calc_api.CapRequest.flangeData:type_name -> cap_model.FlangeData
	30, // 22: calc_api.CapRequest.capData:type_name -> cap_model.CapData
	31, // 23: calc_api.CapRequest.bolts:type_name -> cap_model.BoltData
	32, // 24: calc_api.CapRequest.gasket:type_name -> cap_model.GasketData
	33, // 25: calc_api.CapRequest.embed:type_name -> cap_model.EmbedData
	34, // 26: calc_api.CapRequest.washer:type_name -> cap_model.WasherData
	35, // 27: calc_api.CapResponse.flange:type_name -> cap_model.FlangeResult
	36, // 28: calc_api.CapResponse.cap:type_name -> cap_model.CapResult
	37, // 29: calc_api.CapResponse.bolt:type_name -> cap_model.BoltResult
	38, // 30: calc_api.CapResponse.gasket:type_name -> cap_model.GasketResult
	39, // 31: calc_api.CapResponse.embed:type_name -> cap_model.EmbedResult
	40, // 32: calc_api.CapResponse.calc:type_name -> cap_model.CalculatedCap
	41, // 33: calc_api.CapResponse.formulas:type_name -> cap_model.CalcCapFormulas
	42, // 34: calc_api.CapResponse.data:type_name -> cap_model.DataResult
	43, // 35: calc_api.CapResponse.washers:type_name -> cap_model.WasherResult
	9,  // 36: calc_api.FloatRequest.type:type_name -> calc_api.FloatRequest.Type
	8,  // 37: calc_api.FloatRequest.condition:type_name -> calc_api.FloatRequest.Condition
	44, // 38: calc_api.FloatRequest.flangeData:type_name -> float_model.FlangeData
	45, // 39: calc_api.FloatRequest.capData:type_name -> float_model.CapData
	46, // 40: calc_api.FloatRequest.bolts:type_name -> float_model.BoltData
	47, // 41: calc_api.FloatRequest.gasket:type_name -> float_model.GasketData
	48, // 42: calc_api.FloatResponse.data:type_name -> float_model.DataResult
	49, // 43: calc_api.FloatResponse.flange:type_name -> float_model.FlangeResult
	50, // 44: calc_api.FloatResponse.cap:type_name -> float_model.CapResult
	51, // 45: calc_api.FloatResponse.bolt:type_name -> float_model.BoltResult
	52, // 46: calc_api.FloatResponse.gasket:type_name -> float_model.GasketResult
	53, // 47: calc_api.FloatResponse.calc:type_name -> float_model.Calculated
	10, // 48: calc_api.CalcService.CalculateFlange:input_type -> calc_api.FlangeRequest
	12, // 49: calc_api.CalcService.CalculateCap:input_type -> calc_api.CapRequest
	14, // 50: calc_api.CalcService.CalculateFloat:input_type -> calc_api.FloatRequest
	11, // 51: calc_api.CalcService.CalculateFlange:output_type -> calc_api.FlangeResponse
	13, // 52: calc_api.CalcService.CalculateCap:output_type -> calc_api.CapResponse
	15, // 53: calc_api.CalcService.CalculateFloat:output_type -> calc_api.FloatResponse
	51, // [51:54] is the sub-list for method output_type
	48, // [48:51] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_moment_calc_api_proto_init() }
func file_moment_calc_api_proto_init() {
	if File_moment_calc_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_moment_calc_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_moment_calc_api_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_moment_calc_api_proto_goTypes,
		DependencyIndexes: file_moment_calc_api_proto_depIdxs,
		EnumInfos:         file_moment_calc_api_proto_enumTypes,
		MessageInfos:      file_moment_calc_api_proto_msgTypes,
	}.Build()
	File_moment_calc_api_proto = out.File
	file_moment_calc_api_proto_rawDesc = nil
	file_moment_calc_api_proto_goTypes = nil
	file_moment_calc_api_proto_depIdxs = nil
}
