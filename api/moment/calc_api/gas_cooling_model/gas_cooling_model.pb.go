// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: moment/calc_api/gas_cooling_model.proto

package gas_cooling_model

import (
	device_model "github.com/Alexander272/sealur_proto/api/moment/models/device_model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MainData_TypeBolt int32

const (
	MainData_bolt MainData_TypeBolt = 0
	MainData_pin  MainData_TypeBolt = 1
)

// Enum value maps for MainData_TypeBolt.
var (
	MainData_TypeBolt_name = map[int32]string{
		0: "bolt",
		1: "pin",
	}
	MainData_TypeBolt_value = map[string]int32{
		"bolt": 0,
		"pin":  1,
	}
)

func (x MainData_TypeBolt) Enum() *MainData_TypeBolt {
	p := new(MainData_TypeBolt)
	*p = x
	return p
}

func (x MainData_TypeBolt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MainData_TypeBolt) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_gas_cooling_model_proto_enumTypes[0].Descriptor()
}

func (MainData_TypeBolt) Type() protoreflect.EnumType {
	return &file_moment_calc_api_gas_cooling_model_proto_enumTypes[0]
}

func (x MainData_TypeBolt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MainData_TypeBolt.Descriptor instead.
func (MainData_TypeBolt) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP(), []int{1, 0}
}

type MainData_Condition int32

const (
	MainData_uncontrollable  MainData_Condition = 0
	MainData_controllable    MainData_Condition = 1
	MainData_controllablePin MainData_Condition = 2
)

// Enum value maps for MainData_Condition.
var (
	MainData_Condition_name = map[int32]string{
		0: "uncontrollable",
		1: "controllable",
		2: "controllablePin",
	}
	MainData_Condition_value = map[string]int32{
		"uncontrollable":  0,
		"controllable":    1,
		"controllablePin": 2,
	}
)

func (x MainData_Condition) Enum() *MainData_Condition {
	p := new(MainData_Condition)
	*p = x
	return p
}

func (x MainData_Condition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MainData_Condition) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_gas_cooling_model_proto_enumTypes[1].Descriptor()
}

func (MainData_Condition) Type() protoreflect.EnumType {
	return &file_moment_calc_api_gas_cooling_model_proto_enumTypes[1]
}

func (x MainData_Condition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MainData_Condition.Descriptor instead.
func (MainData_Condition) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP(), []int{1, 1}
}

type GasketData_Type int32

const (
	GasketData_Soft  GasketData_Type = 0
	GasketData_Oval  GasketData_Type = 1
	GasketData_Metal GasketData_Type = 2
)

// Enum value maps for GasketData_Type.
var (
	GasketData_Type_name = map[int32]string{
		0: "Soft",
		1: "Oval",
		2: "Metal",
	}
	GasketData_Type_value = map[string]int32{
		"Soft":  0,
		"Oval":  1,
		"Metal": 2,
	}
)

func (x GasketData_Type) Enum() *GasketData_Type {
	p := new(GasketData_Type)
	*p = x
	return p
}

func (x GasketData_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GasketData_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_calc_api_gas_cooling_model_proto_enumTypes[2].Descriptor()
}

func (GasketData_Type) Type() protoreflect.EnumType {
	return &file_moment_calc_api_gas_cooling_model_proto_enumTypes[2]
}

func (x GasketData_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GasketData_Type.Descriptor instead.
func (GasketData_Type) EnumDescriptor() ([]byte, []int) {
	return file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP(), []int{3, 0}
}

type MaterialData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	EpsilonAt20 float64 `protobuf:"fixed64,2,opt,name=epsilonAt20,proto3" json:"epsilonAt20,omitempty"`
	SigmaAt20   float64 `protobuf:"fixed64,3,opt,name=sigmaAt20,proto3" json:"sigmaAt20,omitempty"`
}

func (x *MaterialData) Reset() {
	*x = MaterialData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialData) ProtoMessage() {}

func (x *MaterialData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialData.ProtoReflect.Descriptor instead.
func (*MaterialData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP(), []int{0}
}

func (x *MaterialData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MaterialData) GetEpsilonAt20() float64 {
	if x != nil {
		return x.EpsilonAt20
	}
	return 0
}

func (x *MaterialData) GetSigmaAt20() float64 {
	if x != nil {
		return x.SigmaAt20
	}
	return 0
}

type MainData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Модификация аппарата
	Device *device_model.Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	// Коэффициент оребрения
	Factor *device_model.FinningFactor `protobuf:"bytes,2,opt,name=factor,proto3" json:"factor,omitempty"`
	// Условное давление
	Pressure *device_model.Pressure `protobuf:"bytes,3,opt,name=pressure,proto3" json:"pressure,omitempty"`
	// Материальное исполнение секции
	Section *device_model.SectionExecution `protobuf:"bytes,4,opt,name=section,proto3" json:"section,omitempty"`
	// Число рядов труб в секции
	TubeCount *device_model.TubeCount `protobuf:"bytes,5,opt,name=tubeCount,proto3" json:"tubeCount,omitempty"`
	// Число ходов по трубному пространству
	NumberOfMoves *device_model.NumberOfMoves `protobuf:"bytes,6,opt,name=numberOfMoves,proto3" json:"numberOfMoves,omitempty"`
	// Длина оребренных труб в секции
	TubeLength *device_model.TubeLength `protobuf:"bytes,7,opt,name=tubeLength,proto3" json:"tubeLength,omitempty"`
	// Пробное давление
	TestPressure float64 `protobuf:"fixed64,8,opt,name=testPressure,proto3" json:"testPressure,omitempty"`
	// Тип соединения
	TypeBolt MainData_TypeBolt `protobuf:"varint,9,opt,name=typeBolt,proto3,enum=gas_cooling_model.MainData_TypeBolt" json:"typeBolt,omitempty"`
	// Условие затяжки
	Condition MainData_Condition `protobuf:"varint,10,opt,name=condition,proto3,enum=gas_cooling_model.MainData_Condition" json:"condition,omitempty"`
	// Коэффициент трения
	Friction float64 `protobuf:"fixed64,11,opt,name=friction,proto3" json:"friction,omitempty"`
}

func (x *MainData) Reset() {
	*x = MainData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainData) ProtoMessage() {}

func (x *MainData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainData.ProtoReflect.Descriptor instead.
func (*MainData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP(), []int{1}
}

func (x *MainData) GetDevice() *device_model.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *MainData) GetFactor() *device_model.FinningFactor {
	if x != nil {
		return x.Factor
	}
	return nil
}

func (x *MainData) GetPressure() *device_model.Pressure {
	if x != nil {
		return x.Pressure
	}
	return nil
}

func (x *MainData) GetSection() *device_model.SectionExecution {
	if x != nil {
		return x.Section
	}
	return nil
}

func (x *MainData) GetTubeCount() *device_model.TubeCount {
	if x != nil {
		return x.TubeCount
	}
	return nil
}

func (x *MainData) GetNumberOfMoves() *device_model.NumberOfMoves {
	if x != nil {
		return x.NumberOfMoves
	}
	return nil
}

func (x *MainData) GetTubeLength() *device_model.TubeLength {
	if x != nil {
		return x.TubeLength
	}
	return nil
}

func (x *MainData) GetTestPressure() float64 {
	if x != nil {
		return x.TestPressure
	}
	return 0
}

func (x *MainData) GetTypeBolt() MainData_TypeBolt {
	if x != nil {
		return x.TypeBolt
	}
	return MainData_bolt
}

func (x *MainData) GetCondition() MainData_Condition {
	if x != nil {
		return x.Condition
	}
	return MainData_uncontrollable
}

func (x *MainData) GetFriction() float64 {
	if x != nil {
		return x.Friction
	}
	return 0
}

type BoltData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// n - Количество болтов/шпилек
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// Id болта
	BoltId string `protobuf:"bytes,2,opt,name=boltId,proto3" json:"boltId,omitempty"`
	// Id Материала болтов
	MarkId   string        `protobuf:"bytes,3,opt,name=markId,proto3" json:"markId,omitempty"`
	Material *MaterialData `protobuf:"bytes,4,opt,name=material,proto3" json:"material,omitempty"`
	// d - Наружный диаметр болта/шпильки
	Diameter float64 `protobuf:"fixed64,5,opt,name=diameter,proto3" json:"diameter,omitempty"`
	// fб - Площадь болта/шпильки
	Area float64 `protobuf:"fixed64,6,opt,name=area,proto3" json:"area,omitempty"`
}

func (x *BoltData) Reset() {
	*x = BoltData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoltData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoltData) ProtoMessage() {}

func (x *BoltData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoltData.ProtoReflect.Descriptor instead.
func (*BoltData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP(), []int{2}
}

func (x *BoltData) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BoltData) GetBoltId() string {
	if x != nil {
		return x.BoltId
	}
	return ""
}

func (x *BoltData) GetMarkId() string {
	if x != nil {
		return x.MarkId
	}
	return ""
}

func (x *BoltData) GetMaterial() *MaterialData {
	if x != nil {
		return x.Material
	}
	return nil
}

func (x *BoltData) GetDiameter() float64 {
	if x != nil {
		return x.Diameter
	}
	return 0
}

func (x *BoltData) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

type GasketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id прокладки
	GasketId string `protobuf:"bytes,1,opt,name=gasketId,proto3" json:"gasketId,omitempty"`
	// Id среды
	EnvId string `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	// Толщина прокладки
	Thickness float64 `protobuf:"fixed64,3,opt,name=thickness,proto3" json:"thickness,omitempty"`
	// Тип прокладки (id и Название)
	NameGasket *device_model.NameGasket `protobuf:"bytes,4,opt,name=nameGasket,proto3" json:"nameGasket,omitempty"`
}

func (x *GasketData) Reset() {
	*x = GasketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasketData) ProtoMessage() {}

func (x *GasketData) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasketData.ProtoReflect.Descriptor instead.
func (*GasketData) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP(), []int{3}
}

func (x *GasketData) GetGasketId() string {
	if x != nil {
		return x.GasketId
	}
	return ""
}

func (x *GasketData) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *GasketData) GetThickness() float64 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

func (x *GasketData) GetNameGasket() *device_model.NameGasket {
	if x != nil {
		return x.NameGasket
	}
	return nil
}

type DataResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Модификация аппарата
	Device string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	// Коэффициент оребрения
	Factor string `protobuf:"bytes,2,opt,name=factor,proto3" json:"factor,omitempty"`
	// Условное давление
	Pressure float64 `protobuf:"fixed64,3,opt,name=pressure,proto3" json:"pressure,omitempty"`
	// Материальное исполнение секции
	Section string `protobuf:"bytes,4,opt,name=section,proto3" json:"section,omitempty"`
	// Число рядов труб в секции
	TubeCount string `protobuf:"bytes,5,opt,name=tubeCount,proto3" json:"tubeCount,omitempty"`
	// Число ходов по трубному пространству
	NumberOfMoves string `protobuf:"bytes,6,opt,name=numberOfMoves,proto3" json:"numberOfMoves,omitempty"`
	// Длина оребренных труб в секции
	TubeLength string `protobuf:"bytes,7,opt,name=tubeLength,proto3" json:"tubeLength,omitempty"`
	// Пробное давлени1е
	TestPressure float64 `protobuf:"fixed64,8,opt,name=testPressure,proto3" json:"testPressure,omitempty"`
	// Тип соединения
	Type string `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	// Условие затяжки
	Condition string `protobuf:"bytes,10,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *DataResult) Reset() {
	*x = DataResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataResult) ProtoMessage() {}

func (x *DataResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataResult.ProtoReflect.Descriptor instead.
func (*DataResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP(), []int{4}
}

func (x *DataResult) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *DataResult) GetFactor() string {
	if x != nil {
		return x.Factor
	}
	return ""
}

func (x *DataResult) GetPressure() float64 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *DataResult) GetSection() string {
	if x != nil {
		return x.Section
	}
	return ""
}

func (x *DataResult) GetTubeCount() string {
	if x != nil {
		return x.TubeCount
	}
	return ""
}

func (x *DataResult) GetNumberOfMoves() string {
	if x != nil {
		return x.NumberOfMoves
	}
	return ""
}

func (x *DataResult) GetTubeLength() string {
	if x != nil {
		return x.TubeLength
	}
	return ""
}

func (x *DataResult) GetTestPressure() float64 {
	if x != nil {
		return x.TestPressure
	}
	return 0
}

func (x *DataResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DataResult) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

type BoltResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// n - Количество болтов/шпилек
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// Материал болта/шпильки
	Material string `protobuf:"bytes,2,opt,name=material,proto3" json:"material,omitempty"`
	// d - Наружный диаметр болта/шпильки
	Diameter float64 `protobuf:"fixed64,3,opt,name=diameter,proto3" json:"diameter,omitempty"`
	// fб - Площадь болта/шпильки
	Area float64 `protobuf:"fixed64,4,opt,name=area,proto3" json:"area,omitempty"`
	// Модуль продольной упругости материала болта (шпильки) при температуре 20 C
	EpsilonAt20 float64 `protobuf:"fixed64,5,opt,name=epsilonAt20,proto3" json:"epsilonAt20,omitempty"`
	// Допускаемое напряжение для болтов (шпилек) при затяжке
	SigmaAt20 float64 `protobuf:"fixed64,6,opt,name=sigmaAt20,proto3" json:"sigmaAt20,omitempty"`
}

func (x *BoltResult) Reset() {
	*x = BoltResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoltResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoltResult) ProtoMessage() {}

func (x *BoltResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoltResult.ProtoReflect.Descriptor instead.
func (*BoltResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP(), []int{5}
}

func (x *BoltResult) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BoltResult) GetMaterial() string {
	if x != nil {
		return x.Material
	}
	return ""
}

func (x *BoltResult) GetDiameter() float64 {
	if x != nil {
		return x.Diameter
	}
	return 0
}

func (x *BoltResult) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *BoltResult) GetEpsilonAt20() float64 {
	if x != nil {
		return x.EpsilonAt20
	}
	return 0
}

func (x *BoltResult) GetSigmaAt20() float64 {
	if x != nil {
		return x.SigmaAt20
	}
	return 0
}

type GasketResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// название прокладки
	Gasket string `protobuf:"bytes,1,opt,name=gasket,proto3" json:"gasket,omitempty"`
	// название среды
	Env string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	// Толщина прокладки
	Thickness float64 `protobuf:"fixed64,3,opt,name=thickness,proto3" json:"thickness,omitempty"`
	// bп Ширина прокладки
	Width float64 `protobuf:"fixed64,4,opt,name=width,proto3" json:"width,omitempty"`
	// L2 - Размер прокладки в продольном направлении
	SizeLong float64 `protobuf:"fixed64,5,opt,name=sizeLong,proto3" json:"sizeLong,omitempty"`
	// B2 - Размер прокладки в поперечном направление
	SizeTrans float64 `protobuf:"fixed64,6,opt,name=sizeTrans,proto3" json:"sizeTrans,omitempty"`
	// h1
	Thick1 float64 `protobuf:"fixed64,7,opt,name=thick1,proto3" json:"thick1,omitempty"`
	// h2
	Thick2 float64 `protobuf:"fixed64,8,opt,name=thick2,proto3" json:"thick2,omitempty"`
	// h3
	Thick3 float64 `protobuf:"fixed64,9,opt,name=thick3,proto3" json:"thick3,omitempty"`
	// h4
	Thick4 float64 `protobuf:"fixed64,10,opt,name=thick4,proto3" json:"thick4,omitempty"`
	// m - Прокладочный коэффициент
	M float64 `protobuf:"fixed64,11,opt,name=m,proto3" json:"m,omitempty"`
	// qобж - Удельное давление обжатия прокладки
	Pres float64 `protobuf:"fixed64,12,opt,name=pres,proto3" json:"pres,omitempty"`
	// Kобж - Коэффициент обжатия
	Compression float64 `protobuf:"fixed64,13,opt,name=compression,proto3" json:"compression,omitempty"`
	// Ep - Условный модуль сжатия прокладки
	Epsilon float64 `protobuf:"fixed64,14,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	// [q] - Допускаемое удельное давление
	PermissiblePres float64 `protobuf:"fixed64,15,opt,name=permissiblePres,proto3" json:"permissiblePres,omitempty"`
	// тип прокладки
	Type string `protobuf:"bytes,16,opt,name=type,proto3" json:"type,omitempty"`
	// Тип прокладки (name_gasket)
	Name string `protobuf:"bytes,17,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GasketResult) Reset() {
	*x = GasketResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasketResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasketResult) ProtoMessage() {}

func (x *GasketResult) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasketResult.ProtoReflect.Descriptor instead.
func (*GasketResult) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP(), []int{6}
}

func (x *GasketResult) GetGasket() string {
	if x != nil {
		return x.Gasket
	}
	return ""
}

func (x *GasketResult) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *GasketResult) GetThickness() float64 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

func (x *GasketResult) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *GasketResult) GetSizeLong() float64 {
	if x != nil {
		return x.SizeLong
	}
	return 0
}

func (x *GasketResult) GetSizeTrans() float64 {
	if x != nil {
		return x.SizeTrans
	}
	return 0
}

func (x *GasketResult) GetThick1() float64 {
	if x != nil {
		return x.Thick1
	}
	return 0
}

func (x *GasketResult) GetThick2() float64 {
	if x != nil {
		return x.Thick2
	}
	return 0
}

func (x *GasketResult) GetThick3() float64 {
	if x != nil {
		return x.Thick3
	}
	return 0
}

func (x *GasketResult) GetThick4() float64 {
	if x != nil {
		return x.Thick4
	}
	return 0
}

func (x *GasketResult) GetM() float64 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *GasketResult) GetPres() float64 {
	if x != nil {
		return x.Pres
	}
	return 0
}

func (x *GasketResult) GetCompression() float64 {
	if x != nil {
		return x.Compression
	}
	return 0
}

func (x *GasketResult) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *GasketResult) GetPermissiblePres() float64 {
	if x != nil {
		return x.PermissiblePres
	}
	return 0
}

func (x *GasketResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GasketResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Calculated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auxiliary     *CalcAuxiliary     `protobuf:"bytes,1,opt,name=auxiliary,proto3" json:"auxiliary,omitempty"`
	ForcesInBolts *CalcForcesInBolts `protobuf:"bytes,2,opt,name=forcesInBolts,proto3" json:"forcesInBolts,omitempty"`
	Bolt          *CalcBolts         `protobuf:"bytes,3,opt,name=bolt,proto3" json:"bolt,omitempty"`
	Moment        *CalcMoment        `protobuf:"bytes,4,opt,name=moment,proto3" json:"moment,omitempty"`
}

func (x *Calculated) Reset() {
	*x = Calculated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Calculated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Calculated) ProtoMessage() {}

func (x *Calculated) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Calculated.ProtoReflect.Descriptor instead.
func (*Calculated) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP(), []int{7}
}

func (x *Calculated) GetAuxiliary() *CalcAuxiliary {
	if x != nil {
		return x.Auxiliary
	}
	return nil
}

func (x *Calculated) GetForcesInBolts() *CalcForcesInBolts {
	if x != nil {
		return x.ForcesInBolts
	}
	return nil
}

func (x *Calculated) GetBolt() *CalcBolts {
	if x != nil {
		return x.Bolt
	}
	return nil
}

func (x *Calculated) GetMoment() *CalcMoment {
	if x != nil {
		return x.Moment
	}
	return nil
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP(), []int{8}
}

func (x *Condition) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Condition) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

type CalcAuxiliary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// b pR - Расчетная ширина плоской прокладки
	EstimatedGasketWidth float64 `protobuf:"fixed64,1,opt,name=estimatedGasketWidth,proto3" json:"estimatedGasketWidth,omitempty"`
	// Lp - Расчетный размер решетки в продольном направлении
	SizeLong float64 `protobuf:"fixed64,2,opt,name=sizeLong,proto3" json:"sizeLong,omitempty"`
	// Bp - Расчетный размер решетки в поперечном направлении
	SizeTrans float64 `protobuf:"fixed64,3,opt,name=sizeTrans,proto3" json:"sizeTrans,omitempty"`
}

func (x *CalcAuxiliary) Reset() {
	*x = CalcAuxiliary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcAuxiliary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcAuxiliary) ProtoMessage() {}

func (x *CalcAuxiliary) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcAuxiliary.ProtoReflect.Descriptor instead.
func (*CalcAuxiliary) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP(), []int{9}
}

func (x *CalcAuxiliary) GetEstimatedGasketWidth() float64 {
	if x != nil {
		return x.EstimatedGasketWidth
	}
	return 0
}

func (x *CalcAuxiliary) GetSizeLong() float64 {
	if x != nil {
		return x.SizeLong
	}
	return 0
}

func (x *CalcAuxiliary) GetSizeTrans() float64 {
	if x != nil {
		return x.SizeTrans
	}
	return 0
}

type CalcForcesInBolts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ab - Суммарная площадь сечения болтов/шпилек
	Area float64 `protobuf:"fixed64,1,opt,name=area,proto3" json:"area,omitempty"`
	// Fв - Расчетное усилие в болтах (шпильках) в условиях эксплуатации
	WorkEffort float64 `protobuf:"fixed64,2,opt,name=workEffort,proto3" json:"workEffort,omitempty"`
	// F0 - Расчетное усилие в болтах (шпильках) в условиях испытаний или монтажа
	Effort float64 `protobuf:"fixed64,3,opt,name=effort,proto3" json:"effort,omitempty"`
}

func (x *CalcForcesInBolts) Reset() {
	*x = CalcForcesInBolts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcForcesInBolts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcForcesInBolts) ProtoMessage() {}

func (x *CalcForcesInBolts) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcForcesInBolts.ProtoReflect.Descriptor instead.
func (*CalcForcesInBolts) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP(), []int{10}
}

func (x *CalcForcesInBolts) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *CalcForcesInBolts) GetWorkEffort() float64 {
	if x != nil {
		return x.WorkEffort
	}
	return 0
}

func (x *CalcForcesInBolts) GetEffort() float64 {
	if x != nil {
		return x.Effort
	}
	return 0
}

type CalcBolts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sigmaB1 - Расчетное напряжение в болтах/шпильках - при затяжке
	RatedStress float64 `protobuf:"fixed64,1,opt,name=ratedStress,proto3" json:"ratedStress,omitempty"`
	// [sigma]бм - Допускаемое напряжение для болтов шпилек - при затяжке
	AllowableVoltage float64 `protobuf:"fixed64,2,opt,name=allowableVoltage,proto3" json:"allowableVoltage,omitempty"`
	// Условия прочности болтов шпилек - при затяжке
	StrengthBolt *Condition `protobuf:"bytes,3,opt,name=strengthBolt,proto3" json:"strengthBolt,omitempty"`
	// Условие прочности прокладки
	StrengthGasket *Condition `protobuf:"bytes,4,opt,name=strengthGasket,proto3" json:"strengthGasket,omitempty"`
}

func (x *CalcBolts) Reset() {
	*x = CalcBolts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcBolts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcBolts) ProtoMessage() {}

func (x *CalcBolts) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcBolts.ProtoReflect.Descriptor instead.
func (*CalcBolts) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP(), []int{11}
}

func (x *CalcBolts) GetRatedStress() float64 {
	if x != nil {
		return x.RatedStress
	}
	return 0
}

func (x *CalcBolts) GetAllowableVoltage() float64 {
	if x != nil {
		return x.AllowableVoltage
	}
	return 0
}

func (x *CalcBolts) GetStrengthBolt() *Condition {
	if x != nil {
		return x.StrengthBolt
	}
	return nil
}

func (x *CalcBolts) GetStrengthGasket() *Condition {
	if x != nil {
		return x.StrengthGasket
	}
	return nil
}

type CalcMoment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Крутящий момент при затяжке болтов/шпилек
	Mkp float64 `protobuf:"fixed64,1,opt,name=Mkp,json=mkp,proto3" json:"Mkp,omitempty"`
	// Крутящий момент при затяжке болтов/шпилек со смазкой снижается на 25%
	Mkp1 float64 `protobuf:"fixed64,2,opt,name=Mkp1,json=mkp1,proto3" json:"Mkp1,omitempty"`
	// Напряжение на прокладке
	Qrek float64 `protobuf:"fixed64,3,opt,name=Qrek,json=qrek,proto3" json:"Qrek,omitempty"`
	// Момент затяжки при применении уплотнения на старых (изношенных) фланцах, имеющих перекосы
	Mrek float64 `protobuf:"fixed64,4,opt,name=Mrek,json=mrek,proto3" json:"Mrek,omitempty"`
	// Максимальный крутящий момент при затяжке болтов/шпилек
	Mmax float64 `protobuf:"fixed64,5,opt,name=Mmax,json=mmax,proto3" json:"Mmax,omitempty"`
	// Максимальное напряжение на прокладке
	Qmax float64 `protobuf:"fixed64,6,opt,name=Qmax,json=qmax,proto3" json:"Qmax,omitempty"`
}

func (x *CalcMoment) Reset() {
	*x = CalcMoment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcMoment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcMoment) ProtoMessage() {}

func (x *CalcMoment) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcMoment.ProtoReflect.Descriptor instead.
func (*CalcMoment) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP(), []int{12}
}

func (x *CalcMoment) GetMkp() float64 {
	if x != nil {
		return x.Mkp
	}
	return 0
}

func (x *CalcMoment) GetMkp1() float64 {
	if x != nil {
		return x.Mkp1
	}
	return 0
}

func (x *CalcMoment) GetQrek() float64 {
	if x != nil {
		return x.Qrek
	}
	return 0
}

func (x *CalcMoment) GetMrek() float64 {
	if x != nil {
		return x.Mrek
	}
	return 0
}

func (x *CalcMoment) GetMmax() float64 {
	if x != nil {
		return x.Mmax
	}
	return 0
}

func (x *CalcMoment) GetQmax() float64 {
	if x != nil {
		return x.Qmax
	}
	return 0
}

type Formulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auxiliary     *AuxiliaryFormulas     `protobuf:"bytes,1,opt,name=auxiliary,proto3" json:"auxiliary,omitempty"`
	ForcesInBolts *ForcesInBoltsFormulas `protobuf:"bytes,2,opt,name=forcesInBolts,proto3" json:"forcesInBolts,omitempty"`
	Bolt          *BoltsFormulas         `protobuf:"bytes,3,opt,name=bolt,proto3" json:"bolt,omitempty"`
	Moment        *MomentFormulas        `protobuf:"bytes,4,opt,name=moment,proto3" json:"moment,omitempty"`
}

func (x *Formulas) Reset() {
	*x = Formulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Formulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Formulas) ProtoMessage() {}

func (x *Formulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Formulas.ProtoReflect.Descriptor instead.
func (*Formulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP(), []int{13}
}

func (x *Formulas) GetAuxiliary() *AuxiliaryFormulas {
	if x != nil {
		return x.Auxiliary
	}
	return nil
}

func (x *Formulas) GetForcesInBolts() *ForcesInBoltsFormulas {
	if x != nil {
		return x.ForcesInBolts
	}
	return nil
}

func (x *Formulas) GetBolt() *BoltsFormulas {
	if x != nil {
		return x.Bolt
	}
	return nil
}

func (x *Formulas) GetMoment() *MomentFormulas {
	if x != nil {
		return x.Moment
	}
	return nil
}

type AuxiliaryFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// b pR - Расчетная ширина плоской прокладки
	EstimatedGasketWidth string `protobuf:"bytes,1,opt,name=estimatedGasketWidth,proto3" json:"estimatedGasketWidth,omitempty"`
	// Lp - Расчетный размер решетки в продольном направлении
	SizeLong string `protobuf:"bytes,2,opt,name=sizeLong,proto3" json:"sizeLong,omitempty"`
	// Bp - Расчетный размер решетки в поперечном направлении
	SizeTrans string `protobuf:"bytes,3,opt,name=sizeTrans,proto3" json:"sizeTrans,omitempty"`
}

func (x *AuxiliaryFormulas) Reset() {
	*x = AuxiliaryFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuxiliaryFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuxiliaryFormulas) ProtoMessage() {}

func (x *AuxiliaryFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuxiliaryFormulas.ProtoReflect.Descriptor instead.
func (*AuxiliaryFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP(), []int{14}
}

func (x *AuxiliaryFormulas) GetEstimatedGasketWidth() string {
	if x != nil {
		return x.EstimatedGasketWidth
	}
	return ""
}

func (x *AuxiliaryFormulas) GetSizeLong() string {
	if x != nil {
		return x.SizeLong
	}
	return ""
}

func (x *AuxiliaryFormulas) GetSizeTrans() string {
	if x != nil {
		return x.SizeTrans
	}
	return ""
}

type ForcesInBoltsFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ab - Суммарная площадь сечения болтов/шпилек
	Area string `protobuf:"bytes,1,opt,name=area,proto3" json:"area,omitempty"`
	// Fв - Расчетное усилие в болтах (шпильках) в условиях эксплуатации
	WorkEffort string `protobuf:"bytes,2,opt,name=workEffort,proto3" json:"workEffort,omitempty"`
	// F0 - Расчетное усилие в болтах (шпильках) в условиях испытаний или монтажа
	Effort string `protobuf:"bytes,3,opt,name=effort,proto3" json:"effort,omitempty"`
}

func (x *ForcesInBoltsFormulas) Reset() {
	*x = ForcesInBoltsFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForcesInBoltsFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForcesInBoltsFormulas) ProtoMessage() {}

func (x *ForcesInBoltsFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForcesInBoltsFormulas.ProtoReflect.Descriptor instead.
func (*ForcesInBoltsFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP(), []int{15}
}

func (x *ForcesInBoltsFormulas) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *ForcesInBoltsFormulas) GetWorkEffort() string {
	if x != nil {
		return x.WorkEffort
	}
	return ""
}

func (x *ForcesInBoltsFormulas) GetEffort() string {
	if x != nil {
		return x.Effort
	}
	return ""
}

type BoltsFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sigmaB1 - Расчетное напряжение в болтах/шпильках - при затяжке
	RatedStress string `protobuf:"bytes,1,opt,name=ratedStress,proto3" json:"ratedStress,omitempty"`
	// [sigma]бм - Допускаемое напряжение для болтов шпилек - при затяжке
	AllowableVoltage string `protobuf:"bytes,2,opt,name=allowableVoltage,proto3" json:"allowableVoltage,omitempty"`
	// Условие прочности прокладки
	StrengthGasket string `protobuf:"bytes,3,opt,name=strengthGasket,proto3" json:"strengthGasket,omitempty"`
}

func (x *BoltsFormulas) Reset() {
	*x = BoltsFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoltsFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoltsFormulas) ProtoMessage() {}

func (x *BoltsFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoltsFormulas.ProtoReflect.Descriptor instead.
func (*BoltsFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP(), []int{16}
}

func (x *BoltsFormulas) GetRatedStress() string {
	if x != nil {
		return x.RatedStress
	}
	return ""
}

func (x *BoltsFormulas) GetAllowableVoltage() string {
	if x != nil {
		return x.AllowableVoltage
	}
	return ""
}

func (x *BoltsFormulas) GetStrengthGasket() string {
	if x != nil {
		return x.StrengthGasket
	}
	return ""
}

type MomentFormulas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Крутящий момент при затяжке болтов/шпилек
	Mkp string `protobuf:"bytes,1,opt,name=Mkp,json=mkp,proto3" json:"Mkp,omitempty"`
	// Крутящий момент при затяжке болтов/шпилек со смазкой снижается на 25%
	Mkp1 string `protobuf:"bytes,2,opt,name=Mkp1,json=mkp1,proto3" json:"Mkp1,omitempty"`
	// Напряжение на прокладке
	Qrek string `protobuf:"bytes,3,opt,name=Qrek,json=qrek,proto3" json:"Qrek,omitempty"`
	// Момент затяжки при применении уплотнения на старых (изношенных) фланцах, имеющих перекосы
	Mrek string `protobuf:"bytes,4,opt,name=Mrek,json=mrek,proto3" json:"Mrek,omitempty"`
	// Максимальный крутящий момент при затяжке болтов/шпилек
	Mmax string `protobuf:"bytes,5,opt,name=Mmax,json=mmax,proto3" json:"Mmax,omitempty"`
	// Максимальное напряжение на прокладке
	Qmax string `protobuf:"bytes,6,opt,name=Qmax,json=qmax,proto3" json:"Qmax,omitempty"`
}

func (x *MomentFormulas) Reset() {
	*x = MomentFormulas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MomentFormulas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomentFormulas) ProtoMessage() {}

func (x *MomentFormulas) ProtoReflect() protoreflect.Message {
	mi := &file_moment_calc_api_gas_cooling_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomentFormulas.ProtoReflect.Descriptor instead.
func (*MomentFormulas) Descriptor() ([]byte, []int) {
	return file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP(), []int{17}
}

func (x *MomentFormulas) GetMkp() string {
	if x != nil {
		return x.Mkp
	}
	return ""
}

func (x *MomentFormulas) GetMkp1() string {
	if x != nil {
		return x.Mkp1
	}
	return ""
}

func (x *MomentFormulas) GetQrek() string {
	if x != nil {
		return x.Qrek
	}
	return ""
}

func (x *MomentFormulas) GetMrek() string {
	if x != nil {
		return x.Mrek
	}
	return ""
}

func (x *MomentFormulas) GetMmax() string {
	if x != nil {
		return x.Mmax
	}
	return ""
}

func (x *MomentFormulas) GetQmax() string {
	if x != nil {
		return x.Qmax
	}
	return ""
}

var File_moment_calc_api_gas_cooling_model_proto protoreflect.FileDescriptor

var file_moment_calc_api_gas_cooling_model_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x67, 0x61, 0x73, 0x5f, 0x63,
	0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x20, 0x6d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x64,
	0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x41,
	0x74, 0x32, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x65, 0x70, 0x73, 0x69, 0x6c,
	0x6f, 0x6e, 0x41, 0x74, 0x32, 0x30, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x41,
	0x74, 0x32, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61,
	0x41, 0x74, 0x32, 0x30, 0x22, 0xbd, 0x05, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46,
	0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x08,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x74, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09,
	0x74, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x52, 0x0d, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0a,
	0x74, 0x75, 0x62, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x54, 0x75, 0x62, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0a, 0x74, 0x75, 0x62, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72,
	0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x6f, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67,
	0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6f,
	0x6c, 0x74, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6c, 0x74, 0x12, 0x43, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1d, 0x0a,
	0x08, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6c, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x62, 0x6f, 0x6c,
	0x74, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x10, 0x01, 0x22, 0x46, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x75, 0x6e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x69, 0x6e, 0x10, 0x02, 0x22, 0xbd, 0x01, 0x0a, 0x08, 0x42, 0x6f, 0x6c, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x73, 0x5f,
	0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x61, 0x72, 0x65, 0x61, 0x22, 0xbd, 0x01, 0x0a, 0x0a, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x22, 0x25, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x6f, 0x66, 0x74, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x4f, 0x76, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x65, 0x74,
	0x61, 0x6c, 0x10, 0x02, 0x22, 0xac, 0x02, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x75, 0x62,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x75,
	0x62, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x75, 0x62, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x75, 0x62, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xae, 0x01, 0x0a, 0x0a, 0x42, 0x6f, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x61, 0x72, 0x65, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x41,
	0x74, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x65, 0x70, 0x73, 0x69, 0x6c,
	0x6f, 0x6e, 0x41, 0x74, 0x32, 0x30, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x41,
	0x74, 0x32, 0x30, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6d, 0x61,
	0x41, 0x74, 0x32, 0x30, 0x22, 0xb6, 0x03, 0x0a, 0x0c, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x74,
	0x68, 0x69, 0x63, 0x6b, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x32, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x32, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x33, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x74,
	0x68, 0x69, 0x63, 0x6b, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x34, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x34, 0x12, 0x0c, 0x0a,
	0x01, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x72, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x72, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x50, 0x72, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x81, 0x02,
	0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x09,
	0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72,
	0x79, 0x52, 0x09, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x0d,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x42, 0x6f, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x73, 0x49, 0x6e, 0x42, 0x6f, 0x6c, 0x74, 0x73, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x73, 0x49, 0x6e, 0x42, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6f,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x42,
	0x6f, 0x6c, 0x74, 0x73, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x6d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x73,
	0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43,
	0x61, 0x6c, 0x63, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x6d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x27, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x22, 0x7d, 0x0a, 0x0d, 0x43, 0x61,
	0x6c, 0x63, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x7a, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x73, 0x69, 0x7a, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x22, 0x5f, 0x0a, 0x11, 0x43, 0x61, 0x6c,
	0x63, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x42, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x61, 0x72,
	0x65, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x66, 0x66, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x66, 0x66, 0x6f,
	0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x22, 0xe1, 0x01, 0x0a, 0x09, 0x43,
	0x61, 0x6c, 0x63, 0x42, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x42, 0x6f, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x42, 0x6f, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x22, 0x82,
	0x01, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x63, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x4d, 0x6b, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x6b, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x4d, 0x6b, 0x70, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d,
	0x6b, 0x70, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x51, 0x72, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x71, 0x72, 0x65, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x72, 0x65, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x72, 0x65, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x4d,
	0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x6d, 0x61, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x51, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x71,
	0x6d, 0x61, 0x78, 0x22, 0x8f, 0x02, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73,
	0x12, 0x42, 0x0a, 0x09, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72,
	0x79, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x09, 0x61, 0x75, 0x78, 0x69, 0x6c,
	0x69, 0x61, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e,
	0x42, 0x6f, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x61,
	0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x42, 0x6f, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x42,
	0x6f, 0x6c, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x73, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x6d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x73,
	0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d,
	0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x52, 0x06, 0x6d,
	0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69,
	0x61, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x7a, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x69, 0x7a, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x22, 0x63, 0x0a, 0x15, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x73, 0x49, 0x6e, 0x42, 0x6f, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x66,
	0x66, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x45, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x22, 0x85,
	0x01, 0x0a, 0x0d, 0x42, 0x6f, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x0e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x6b, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x6b, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x4d,
	0x6b, 0x70, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6b, 0x70, 0x31, 0x12,
	0x12, 0x0a, 0x04, 0x51, 0x72, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x71,
	0x72, 0x65, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x72, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x72, 0x65, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6d, 0x61, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x51,
	0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x71, 0x6d, 0x61, 0x78, 0x42,
	0x4c, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x6c,
	0x65, 0x78, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x32, 0x37, 0x32, 0x2f, 0x73, 0x65, 0x61, 0x6c, 0x75,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x73, 0x5f,
	0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_moment_calc_api_gas_cooling_model_proto_rawDescOnce sync.Once
	file_moment_calc_api_gas_cooling_model_proto_rawDescData = file_moment_calc_api_gas_cooling_model_proto_rawDesc
)

func file_moment_calc_api_gas_cooling_model_proto_rawDescGZIP() []byte {
	file_moment_calc_api_gas_cooling_model_proto_rawDescOnce.Do(func() {
		file_moment_calc_api_gas_cooling_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_moment_calc_api_gas_cooling_model_proto_rawDescData)
	})
	return file_moment_calc_api_gas_cooling_model_proto_rawDescData
}

var file_moment_calc_api_gas_cooling_model_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_moment_calc_api_gas_cooling_model_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_moment_calc_api_gas_cooling_model_proto_goTypes = []interface{}{
	(MainData_TypeBolt)(0),                // 0: gas_cooling_model.MainData.TypeBolt
	(MainData_Condition)(0),               // 1: gas_cooling_model.MainData.Condition
	(GasketData_Type)(0),                  // 2: gas_cooling_model.GasketData.Type
	(*MaterialData)(nil),                  // 3: gas_cooling_model.MaterialData
	(*MainData)(nil),                      // 4: gas_cooling_model.MainData
	(*BoltData)(nil),                      // 5: gas_cooling_model.BoltData
	(*GasketData)(nil),                    // 6: gas_cooling_model.GasketData
	(*DataResult)(nil),                    // 7: gas_cooling_model.DataResult
	(*BoltResult)(nil),                    // 8: gas_cooling_model.BoltResult
	(*GasketResult)(nil),                  // 9: gas_cooling_model.GasketResult
	(*Calculated)(nil),                    // 10: gas_cooling_model.Calculated
	(*Condition)(nil),                     // 11: gas_cooling_model.Condition
	(*CalcAuxiliary)(nil),                 // 12: gas_cooling_model.CalcAuxiliary
	(*CalcForcesInBolts)(nil),             // 13: gas_cooling_model.CalcForcesInBolts
	(*CalcBolts)(nil),                     // 14: gas_cooling_model.CalcBolts
	(*CalcMoment)(nil),                    // 15: gas_cooling_model.CalcMoment
	(*Formulas)(nil),                      // 16: gas_cooling_model.Formulas
	(*AuxiliaryFormulas)(nil),             // 17: gas_cooling_model.AuxiliaryFormulas
	(*ForcesInBoltsFormulas)(nil),         // 18: gas_cooling_model.ForcesInBoltsFormulas
	(*BoltsFormulas)(nil),                 // 19: gas_cooling_model.BoltsFormulas
	(*MomentFormulas)(nil),                // 20: gas_cooling_model.MomentFormulas
	(*device_model.Device)(nil),           // 21: device_model.Device
	(*device_model.FinningFactor)(nil),    // 22: device_model.FinningFactor
	(*device_model.Pressure)(nil),         // 23: device_model.Pressure
	(*device_model.SectionExecution)(nil), // 24: device_model.SectionExecution
	(*device_model.TubeCount)(nil),        // 25: device_model.TubeCount
	(*device_model.NumberOfMoves)(nil),    // 26: device_model.NumberOfMoves
	(*device_model.TubeLength)(nil),       // 27: device_model.TubeLength
	(*device_model.NameGasket)(nil),       // 28: device_model.NameGasket
}
var file_moment_calc_api_gas_cooling_model_proto_depIdxs = []int32{
	21, // 0: gas_cooling_model.MainData.device:type_name -> device_model.Device
	22, // 1: gas_cooling_model.MainData.factor:type_name -> device_model.FinningFactor
	23, // 2: gas_cooling_model.MainData.pressure:type_name -> device_model.Pressure
	24, // 3: gas_cooling_model.MainData.section:type_name -> device_model.SectionExecution
	25, // 4: gas_cooling_model.MainData.tubeCount:type_name -> device_model.TubeCount
	26, // 5: gas_cooling_model.MainData.numberOfMoves:type_name -> device_model.NumberOfMoves
	27, // 6: gas_cooling_model.MainData.tubeLength:type_name -> device_model.TubeLength
	0,  // 7: gas_cooling_model.MainData.typeBolt:type_name -> gas_cooling_model.MainData.TypeBolt
	1,  // 8: gas_cooling_model.MainData.condition:type_name -> gas_cooling_model.MainData.Condition
	3,  // 9: gas_cooling_model.BoltData.material:type_name -> gas_cooling_model.MaterialData
	28, // 10: gas_cooling_model.GasketData.nameGasket:type_name -> device_model.NameGasket
	12, // 11: gas_cooling_model.Calculated.auxiliary:type_name -> gas_cooling_model.CalcAuxiliary
	13, // 12: gas_cooling_model.Calculated.forcesInBolts:type_name -> gas_cooling_model.CalcForcesInBolts
	14, // 13: gas_cooling_model.Calculated.bolt:type_name -> gas_cooling_model.CalcBolts
	15, // 14: gas_cooling_model.Calculated.moment:type_name -> gas_cooling_model.CalcMoment
	11, // 15: gas_cooling_model.CalcBolts.strengthBolt:type_name -> gas_cooling_model.Condition
	11, // 16: gas_cooling_model.CalcBolts.strengthGasket:type_name -> gas_cooling_model.Condition
	17, // 17: gas_cooling_model.Formulas.auxiliary:type_name -> gas_cooling_model.AuxiliaryFormulas
	18, // 18: gas_cooling_model.Formulas.forcesInBolts:type_name -> gas_cooling_model.ForcesInBoltsFormulas
	19, // 19: gas_cooling_model.Formulas.bolt:type_name -> gas_cooling_model.BoltsFormulas
	20, // 20: gas_cooling_model.Formulas.moment:type_name -> gas_cooling_model.MomentFormulas
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_moment_calc_api_gas_cooling_model_proto_init() }
func file_moment_calc_api_gas_cooling_model_proto_init() {
	if File_moment_calc_api_gas_cooling_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_moment_calc_api_gas_cooling_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_gas_cooling_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_gas_cooling_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoltData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_gas_cooling_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_gas_cooling_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_gas_cooling_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoltResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_gas_cooling_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasketResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_gas_cooling_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Calculated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_gas_cooling_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_gas_cooling_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcAuxiliary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_gas_cooling_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcForcesInBolts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_gas_cooling_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcBolts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_gas_cooling_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcMoment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_gas_cooling_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Formulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_gas_cooling_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuxiliaryFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_gas_cooling_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForcesInBoltsFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_gas_cooling_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoltsFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_calc_api_gas_cooling_model_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MomentFormulas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_moment_calc_api_gas_cooling_model_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_moment_calc_api_gas_cooling_model_proto_goTypes,
		DependencyIndexes: file_moment_calc_api_gas_cooling_model_proto_depIdxs,
		EnumInfos:         file_moment_calc_api_gas_cooling_model_proto_enumTypes,
		MessageInfos:      file_moment_calc_api_gas_cooling_model_proto_msgTypes,
	}.Build()
	File_moment_calc_api_gas_cooling_model_proto = out.File
	file_moment_calc_api_gas_cooling_model_proto_rawDesc = nil
	file_moment_calc_api_gas_cooling_model_proto_goTypes = nil
	file_moment_calc_api_gas_cooling_model_proto_depIdxs = nil
}
