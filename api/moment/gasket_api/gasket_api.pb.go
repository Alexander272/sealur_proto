// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: moment/gasket_api.proto

package gasket_api

import (
	gasket_model "github.com/Alexander272/sealur_proto/api/moment/models/gasket_model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TypeGasket int32

const (
	TypeGasket_All   TypeGasket = 0
	TypeGasket_Soft  TypeGasket = 1
	TypeGasket_Oval  TypeGasket = 2
	TypeGasket_Metal TypeGasket = 3
)

// Enum value maps for TypeGasket.
var (
	TypeGasket_name = map[int32]string{
		0: "All",
		1: "Soft",
		2: "Oval",
		3: "Metal",
	}
	TypeGasket_value = map[string]int32{
		"All":   0,
		"Soft":  1,
		"Oval":  2,
		"Metal": 3,
	}
)

func (x TypeGasket) Enum() *TypeGasket {
	p := new(TypeGasket)
	*p = x
	return p
}

func (x TypeGasket) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeGasket) Descriptor() protoreflect.EnumDescriptor {
	return file_moment_gasket_api_proto_enumTypes[0].Descriptor()
}

func (TypeGasket) Type() protoreflect.EnumType {
	return &file_moment_gasket_api_proto_enumTypes[0]
}

func (x TypeGasket) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeGasket.Descriptor instead.
func (TypeGasket) EnumDescriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{0}
}

type IdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdResponse) Reset() {
	*x = IdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdResponse) ProtoMessage() {}

func (x *IdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdResponse.ProtoReflect.Descriptor instead.
func (*IdResponse) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{0}
}

func (x *IdResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{1}
}

type GetGasketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeGasket []TypeGasket `protobuf:"varint,1,rep,packed,name=typeGasket,proto3,enum=gasket_api.TypeGasket" json:"typeGasket,omitempty"`
}

func (x *GetGasketRequest) Reset() {
	*x = GetGasketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGasketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGasketRequest) ProtoMessage() {}

func (x *GetGasketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGasketRequest.ProtoReflect.Descriptor instead.
func (*GetGasketRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{2}
}

func (x *GetGasketRequest) GetTypeGasket() []TypeGasket {
	if x != nil {
		return x.TypeGasket
	}
	return nil
}

type CreateGasketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *CreateGasketRequest) Reset() {
	*x = CreateGasketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGasketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGasketRequest) ProtoMessage() {}

func (x *CreateGasketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGasketRequest.ProtoReflect.Descriptor instead.
func (*CreateGasketRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{3}
}

func (x *CreateGasketRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type UpdateGasketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *UpdateGasketRequest) Reset() {
	*x = UpdateGasketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGasketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGasketRequest) ProtoMessage() {}

func (x *UpdateGasketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGasketRequest.ProtoReflect.Descriptor instead.
func (*UpdateGasketRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateGasketRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateGasketRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type DeleteGasketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteGasketRequest) Reset() {
	*x = DeleteGasketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGasketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGasketRequest) ProtoMessage() {}

func (x *DeleteGasketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGasketRequest.ProtoReflect.Descriptor instead.
func (*DeleteGasketRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteGasketRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GasketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gasket []*gasket_model.Gasket `protobuf:"bytes,1,rep,name=gasket,proto3" json:"gasket,omitempty"`
}

func (x *GasketResponse) Reset() {
	*x = GasketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasketResponse) ProtoMessage() {}

func (x *GasketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasketResponse.ProtoReflect.Descriptor instead.
func (*GasketResponse) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{6}
}

func (x *GasketResponse) GetGasket() []*gasket_model.Gasket {
	if x != nil {
		return x.Gasket
	}
	return nil
}

type GasketWithThickResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gasket []*gasket_model.GasketWithThick `protobuf:"bytes,1,rep,name=gasket,proto3" json:"gasket,omitempty"`
}

func (x *GasketWithThickResponse) Reset() {
	*x = GasketWithThickResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasketWithThickResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasketWithThickResponse) ProtoMessage() {}

func (x *GasketWithThickResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasketWithThickResponse.ProtoReflect.Descriptor instead.
func (*GasketWithThickResponse) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{7}
}

func (x *GasketWithThickResponse) GetGasket() []*gasket_model.GasketWithThick {
	if x != nil {
		return x.Gasket
	}
	return nil
}

type GetGasketTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeGasket []TypeGasket `protobuf:"varint,1,rep,packed,name=typeGasket,proto3,enum=gasket_api.TypeGasket" json:"typeGasket,omitempty"`
}

func (x *GetGasketTypeRequest) Reset() {
	*x = GetGasketTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGasketTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGasketTypeRequest) ProtoMessage() {}

func (x *GetGasketTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGasketTypeRequest.ProtoReflect.Descriptor instead.
func (*GetGasketTypeRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{8}
}

func (x *GetGasketTypeRequest) GetTypeGasket() []TypeGasket {
	if x != nil {
		return x.TypeGasket
	}
	return nil
}

type CreateGasketTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *CreateGasketTypeRequest) Reset() {
	*x = CreateGasketTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGasketTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGasketTypeRequest) ProtoMessage() {}

func (x *CreateGasketTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGasketTypeRequest.ProtoReflect.Descriptor instead.
func (*CreateGasketTypeRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{9}
}

func (x *CreateGasketTypeRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateGasketTypeRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type UpdateGasketTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Label string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *UpdateGasketTypeRequest) Reset() {
	*x = UpdateGasketTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGasketTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGasketTypeRequest) ProtoMessage() {}

func (x *UpdateGasketTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGasketTypeRequest.ProtoReflect.Descriptor instead.
func (*UpdateGasketTypeRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateGasketTypeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateGasketTypeRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateGasketTypeRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type DeleteGasketTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteGasketTypeRequest) Reset() {
	*x = DeleteGasketTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGasketTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGasketTypeRequest) ProtoMessage() {}

func (x *DeleteGasketTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGasketTypeRequest.ProtoReflect.Descriptor instead.
func (*DeleteGasketTypeRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteGasketTypeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GasketTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasketType []*gasket_model.GasketType `protobuf:"bytes,1,rep,name=gasketType,proto3" json:"gasketType,omitempty"`
}

func (x *GasketTypeResponse) Reset() {
	*x = GasketTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasketTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasketTypeResponse) ProtoMessage() {}

func (x *GasketTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasketTypeResponse.ProtoReflect.Descriptor instead.
func (*GasketTypeResponse) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{12}
}

func (x *GasketTypeResponse) GetGasketType() []*gasket_model.GasketType {
	if x != nil {
		return x.GasketType
	}
	return nil
}

type GetEnvRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEnvRequest) Reset() {
	*x = GetEnvRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnvRequest) ProtoMessage() {}

func (x *GetEnvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnvRequest.ProtoReflect.Descriptor instead.
func (*GetEnvRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{13}
}

type CreateEnvRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *CreateEnvRequest) Reset() {
	*x = CreateEnvRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEnvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnvRequest) ProtoMessage() {}

func (x *CreateEnvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnvRequest.ProtoReflect.Descriptor instead.
func (*CreateEnvRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{14}
}

func (x *CreateEnvRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type UpdateEnvRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *UpdateEnvRequest) Reset() {
	*x = UpdateEnvRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEnvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnvRequest) ProtoMessage() {}

func (x *UpdateEnvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnvRequest.ProtoReflect.Descriptor instead.
func (*UpdateEnvRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateEnvRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateEnvRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type DeleteEnvRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteEnvRequest) Reset() {
	*x = DeleteEnvRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEnvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEnvRequest) ProtoMessage() {}

func (x *DeleteEnvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEnvRequest.ProtoReflect.Descriptor instead.
func (*DeleteEnvRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteEnvRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type EnvResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env []*gasket_model.Env `protobuf:"bytes,1,rep,name=env,proto3" json:"env,omitempty"`
}

func (x *EnvResponse) Reset() {
	*x = EnvResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvResponse) ProtoMessage() {}

func (x *EnvResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvResponse.ProtoReflect.Descriptor instead.
func (*EnvResponse) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{17}
}

func (x *EnvResponse) GetEnv() []*gasket_model.Env {
	if x != nil {
		return x.Env
	}
	return nil
}

type CreateManyEnvDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasketId string                           `protobuf:"bytes,1,opt,name=gasketId,proto3" json:"gasketId,omitempty"`
	Data     []*CreateManyEnvDataRequest_Data `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateManyEnvDataRequest) Reset() {
	*x = CreateManyEnvDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateManyEnvDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateManyEnvDataRequest) ProtoMessage() {}

func (x *CreateManyEnvDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateManyEnvDataRequest.ProtoReflect.Descriptor instead.
func (*CreateManyEnvDataRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{18}
}

func (x *CreateManyEnvDataRequest) GetGasketId() string {
	if x != nil {
		return x.GasketId
	}
	return ""
}

func (x *CreateManyEnvDataRequest) GetData() []*CreateManyEnvDataRequest_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateEnvDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvId        string  `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	GasketId     string  `protobuf:"bytes,2,opt,name=gasketId,proto3" json:"gasketId,omitempty"`
	M            float64 `protobuf:"fixed64,3,opt,name=m,proto3" json:"m,omitempty"`
	SpecificPres float64 `protobuf:"fixed64,4,opt,name=specificPres,proto3" json:"specificPres,omitempty"`
}

func (x *CreateEnvDataRequest) Reset() {
	*x = CreateEnvDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEnvDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnvDataRequest) ProtoMessage() {}

func (x *CreateEnvDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnvDataRequest.ProtoReflect.Descriptor instead.
func (*CreateEnvDataRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{19}
}

func (x *CreateEnvDataRequest) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *CreateEnvDataRequest) GetGasketId() string {
	if x != nil {
		return x.GasketId
	}
	return ""
}

func (x *CreateEnvDataRequest) GetM() float64 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *CreateEnvDataRequest) GetSpecificPres() float64 {
	if x != nil {
		return x.SpecificPres
	}
	return 0
}

type UpdateEnvDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EnvId        string  `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	GasketId     string  `protobuf:"bytes,3,opt,name=gasketId,proto3" json:"gasketId,omitempty"`
	M            float64 `protobuf:"fixed64,4,opt,name=m,proto3" json:"m,omitempty"`
	SpecificPres float64 `protobuf:"fixed64,5,opt,name=specificPres,proto3" json:"specificPres,omitempty"`
}

func (x *UpdateEnvDataRequest) Reset() {
	*x = UpdateEnvDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEnvDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnvDataRequest) ProtoMessage() {}

func (x *UpdateEnvDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnvDataRequest.ProtoReflect.Descriptor instead.
func (*UpdateEnvDataRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateEnvDataRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateEnvDataRequest) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *UpdateEnvDataRequest) GetGasketId() string {
	if x != nil {
		return x.GasketId
	}
	return ""
}

func (x *UpdateEnvDataRequest) GetM() float64 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *UpdateEnvDataRequest) GetSpecificPres() float64 {
	if x != nil {
		return x.SpecificPres
	}
	return 0
}

type DeleteEnvDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteEnvDataRequest) Reset() {
	*x = DeleteEnvDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEnvDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEnvDataRequest) ProtoMessage() {}

func (x *DeleteEnvDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEnvDataRequest.ProtoReflect.Descriptor instead.
func (*DeleteEnvDataRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteEnvDataRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateManyGasketDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasketId string                              `protobuf:"bytes,1,opt,name=gasketId,proto3" json:"gasketId,omitempty"`
	TypeId   string                              `protobuf:"bytes,2,opt,name=typeId,proto3" json:"typeId,omitempty"`
	Data     []*CreateManyGasketDataRequest_Data `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateManyGasketDataRequest) Reset() {
	*x = CreateManyGasketDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateManyGasketDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateManyGasketDataRequest) ProtoMessage() {}

func (x *CreateManyGasketDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateManyGasketDataRequest.ProtoReflect.Descriptor instead.
func (*CreateManyGasketDataRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{22}
}

func (x *CreateManyGasketDataRequest) GetGasketId() string {
	if x != nil {
		return x.GasketId
	}
	return ""
}

func (x *CreateManyGasketDataRequest) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

func (x *CreateManyGasketDataRequest) GetData() []*CreateManyGasketDataRequest_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateGasketDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasketId        string  `protobuf:"bytes,1,opt,name=gasketId,proto3" json:"gasketId,omitempty"`
	PermissiblePres float64 `protobuf:"fixed64,2,opt,name=permissiblePres,proto3" json:"permissiblePres,omitempty"`
	Compression     float64 `protobuf:"fixed64,3,opt,name=compression,proto3" json:"compression,omitempty"`
	Epsilon         float64 `protobuf:"fixed64,4,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	Thickness       float64 `protobuf:"fixed64,5,opt,name=thickness,proto3" json:"thickness,omitempty"`
	TypeId          string  `protobuf:"bytes,6,opt,name=typeId,proto3" json:"typeId,omitempty"`
}

func (x *CreateGasketDataRequest) Reset() {
	*x = CreateGasketDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGasketDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGasketDataRequest) ProtoMessage() {}

func (x *CreateGasketDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGasketDataRequest.ProtoReflect.Descriptor instead.
func (*CreateGasketDataRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{23}
}

func (x *CreateGasketDataRequest) GetGasketId() string {
	if x != nil {
		return x.GasketId
	}
	return ""
}

func (x *CreateGasketDataRequest) GetPermissiblePres() float64 {
	if x != nil {
		return x.PermissiblePres
	}
	return 0
}

func (x *CreateGasketDataRequest) GetCompression() float64 {
	if x != nil {
		return x.Compression
	}
	return 0
}

func (x *CreateGasketDataRequest) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *CreateGasketDataRequest) GetThickness() float64 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

func (x *CreateGasketDataRequest) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

type UpdateGasketDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GasketId        string  `protobuf:"bytes,2,opt,name=gasketId,proto3" json:"gasketId,omitempty"`
	PermissiblePres float64 `protobuf:"fixed64,3,opt,name=permissiblePres,proto3" json:"permissiblePres,omitempty"`
	Compression     float64 `protobuf:"fixed64,4,opt,name=compression,proto3" json:"compression,omitempty"`
	Epsilon         float64 `protobuf:"fixed64,5,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	Thickness       float64 `protobuf:"fixed64,6,opt,name=thickness,proto3" json:"thickness,omitempty"`
	TypeId          string  `protobuf:"bytes,7,opt,name=typeId,proto3" json:"typeId,omitempty"`
}

func (x *UpdateGasketDataRequest) Reset() {
	*x = UpdateGasketDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGasketDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGasketDataRequest) ProtoMessage() {}

func (x *UpdateGasketDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGasketDataRequest.ProtoReflect.Descriptor instead.
func (*UpdateGasketDataRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateGasketDataRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateGasketDataRequest) GetGasketId() string {
	if x != nil {
		return x.GasketId
	}
	return ""
}

func (x *UpdateGasketDataRequest) GetPermissiblePres() float64 {
	if x != nil {
		return x.PermissiblePres
	}
	return 0
}

func (x *UpdateGasketDataRequest) GetCompression() float64 {
	if x != nil {
		return x.Compression
	}
	return 0
}

func (x *UpdateGasketDataRequest) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *UpdateGasketDataRequest) GetThickness() float64 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

func (x *UpdateGasketDataRequest) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

type UpdateGasketTypeIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasketId string `protobuf:"bytes,1,opt,name=gasketId,proto3" json:"gasketId,omitempty"`
	TypeId   string `protobuf:"bytes,2,opt,name=typeId,proto3" json:"typeId,omitempty"`
}

func (x *UpdateGasketTypeIdRequest) Reset() {
	*x = UpdateGasketTypeIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGasketTypeIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGasketTypeIdRequest) ProtoMessage() {}

func (x *UpdateGasketTypeIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGasketTypeIdRequest.ProtoReflect.Descriptor instead.
func (*UpdateGasketTypeIdRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateGasketTypeIdRequest) GetGasketId() string {
	if x != nil {
		return x.GasketId
	}
	return ""
}

func (x *UpdateGasketTypeIdRequest) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

type DeleteGasketDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteGasketDataRequest) Reset() {
	*x = DeleteGasketDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGasketDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGasketDataRequest) ProtoMessage() {}

func (x *DeleteGasketDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGasketDataRequest.ProtoReflect.Descriptor instead.
func (*DeleteGasketDataRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteGasketDataRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetFullDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasketId string `protobuf:"bytes,1,opt,name=gasketId,proto3" json:"gasketId,omitempty"`
}

func (x *GetFullDataRequest) Reset() {
	*x = GetFullDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullDataRequest) ProtoMessage() {}

func (x *GetFullDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullDataRequest.ProtoReflect.Descriptor instead.
func (*GetFullDataRequest) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{27}
}

func (x *GetFullDataRequest) GetGasketId() string {
	if x != nil {
		return x.GasketId
	}
	return ""
}

type FullDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasketData []*gasket_model.Full_GasketData `protobuf:"bytes,1,rep,name=gasketData,proto3" json:"gasketData,omitempty"`
	GasketType []*gasket_model.GasketType      `protobuf:"bytes,2,rep,name=gasketType,proto3" json:"gasketType,omitempty"`
	EnvData    []*gasket_model.Full_EnvData    `protobuf:"bytes,3,rep,name=envData,proto3" json:"envData,omitempty"`
	EnvType    []*gasket_model.Env             `protobuf:"bytes,4,rep,name=envType,proto3" json:"envType,omitempty"`
}

func (x *FullDataResponse) Reset() {
	*x = FullDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullDataResponse) ProtoMessage() {}

func (x *FullDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullDataResponse.ProtoReflect.Descriptor instead.
func (*FullDataResponse) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{28}
}

func (x *FullDataResponse) GetGasketData() []*gasket_model.Full_GasketData {
	if x != nil {
		return x.GasketData
	}
	return nil
}

func (x *FullDataResponse) GetGasketType() []*gasket_model.GasketType {
	if x != nil {
		return x.GasketType
	}
	return nil
}

func (x *FullDataResponse) GetEnvData() []*gasket_model.Full_EnvData {
	if x != nil {
		return x.EnvData
	}
	return nil
}

func (x *FullDataResponse) GetEnvType() []*gasket_model.Env {
	if x != nil {
		return x.EnvType
	}
	return nil
}

type CreateManyEnvDataRequest_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvId        string  `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	M            float64 `protobuf:"fixed64,2,opt,name=m,proto3" json:"m,omitempty"`
	SpecificPres float64 `protobuf:"fixed64,3,opt,name=specificPres,proto3" json:"specificPres,omitempty"`
}

func (x *CreateManyEnvDataRequest_Data) Reset() {
	*x = CreateManyEnvDataRequest_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateManyEnvDataRequest_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateManyEnvDataRequest_Data) ProtoMessage() {}

func (x *CreateManyEnvDataRequest_Data) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateManyEnvDataRequest_Data.ProtoReflect.Descriptor instead.
func (*CreateManyEnvDataRequest_Data) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{18, 0}
}

func (x *CreateManyEnvDataRequest_Data) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *CreateManyEnvDataRequest_Data) GetM() float64 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *CreateManyEnvDataRequest_Data) GetSpecificPres() float64 {
	if x != nil {
		return x.SpecificPres
	}
	return 0
}

type CreateManyGasketDataRequest_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermissiblePres float64 `protobuf:"fixed64,1,opt,name=permissiblePres,proto3" json:"permissiblePres,omitempty"`
	Compression     float64 `protobuf:"fixed64,2,opt,name=compression,proto3" json:"compression,omitempty"`
	Epsilon         float64 `protobuf:"fixed64,3,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	Thickness       float64 `protobuf:"fixed64,4,opt,name=thickness,proto3" json:"thickness,omitempty"`
}

func (x *CreateManyGasketDataRequest_Data) Reset() {
	*x = CreateManyGasketDataRequest_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moment_gasket_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateManyGasketDataRequest_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateManyGasketDataRequest_Data) ProtoMessage() {}

func (x *CreateManyGasketDataRequest_Data) ProtoReflect() protoreflect.Message {
	mi := &file_moment_gasket_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateManyGasketDataRequest_Data.ProtoReflect.Descriptor instead.
func (*CreateManyGasketDataRequest_Data) Descriptor() ([]byte, []int) {
	return file_moment_gasket_api_proto_rawDescGZIP(), []int{22, 0}
}

func (x *CreateManyGasketDataRequest_Data) GetPermissiblePres() float64 {
	if x != nil {
		return x.PermissiblePres
	}
	return 0
}

func (x *CreateManyGasketDataRequest_Data) GetCompression() float64 {
	if x != nil {
		return x.Compression
	}
	return 0
}

func (x *CreateManyGasketDataRequest_Data) GetEpsilon() float64 {
	if x != nil {
		return x.Epsilon
	}
	return 0
}

func (x *CreateManyGasketDataRequest_Data) GetThickness() float64 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

var File_moment_gasket_api_proto protoreflect.FileDescriptor

var file_moment_gasket_api_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x67, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x1a, 0x20, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1c, 0x0a, 0x0a, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x47, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x22, 0x2b, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3b, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3e,
	0x0a, 0x0e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x22, 0x50,
	0x0a, 0x17, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x68, 0x69, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x67, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x52, 0x06, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x22, 0x4e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65,
	0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x47, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x22, 0x45, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x55, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x29,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x12, 0x47, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x0a, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x67,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x28, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x22, 0x38, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x22,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x32, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6e,
	0x76, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x22, 0xc5, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x6e, 0x79, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x6e, 0x79, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4e,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x50, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x50, 0x72, 0x65, 0x73, 0x22, 0x7a,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x01, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x50, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x50, 0x72, 0x65, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x01, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x50,
	0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x50, 0x72, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xa0, 0x02, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x47, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x8a, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28,
	0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70,
	0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x70, 0x73,
	0x69, 0x6c, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65,
	0x73, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70,
	0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x70, 0x73,
	0x69, 0x6c, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x10, 0x46, 0x75, 0x6c,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x0a, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x5f, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0a,
	0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x67, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x5f, 0x45, 0x6e, 0x76, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x07,
	0x65, 0x6e, 0x76, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x76,
	0x52, 0x07, 0x65, 0x6e, 0x76, 0x54, 0x79, 0x70, 0x65, 0x2a, 0x34, 0x0a, 0x0a, 0x54, 0x79, 0x70,
	0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x6f, 0x66, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x76,
	0x61, 0x6c, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x10, 0x03, 0x32,
	0xdb, 0x0d, 0x0a, 0x0d, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1e, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x75,
	0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x67, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x12, 0x1c, 0x2e, 0x67, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x1f,
	0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x1f,
	0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x47, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x2e, 0x67,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x2e,
	0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x2e, 0x67,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x45, 0x6e,
	0x76, 0x12, 0x19, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x76, 0x12, 0x1c, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x1c, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x1c, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x24, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x2e, 0x67,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x76, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20,
	0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x6e, 0x79, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27,
	0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x23, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x25, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x23, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x23, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3c, 0x5a,
	0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x6c, 0x65, 0x78,
	0x61, 0x6e, 0x64, 0x65, 0x72, 0x32, 0x37, 0x32, 0x2f, 0x73, 0x65, 0x61, 0x6c, 0x75, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x67, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_moment_gasket_api_proto_rawDescOnce sync.Once
	file_moment_gasket_api_proto_rawDescData = file_moment_gasket_api_proto_rawDesc
)

func file_moment_gasket_api_proto_rawDescGZIP() []byte {
	file_moment_gasket_api_proto_rawDescOnce.Do(func() {
		file_moment_gasket_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_moment_gasket_api_proto_rawDescData)
	})
	return file_moment_gasket_api_proto_rawDescData
}

var file_moment_gasket_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_moment_gasket_api_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_moment_gasket_api_proto_goTypes = []interface{}{
	(TypeGasket)(0),                          // 0: gasket_api.TypeGasket
	(*IdResponse)(nil),                       // 1: gasket_api.IdResponse
	(*Response)(nil),                         // 2: gasket_api.Response
	(*GetGasketRequest)(nil),                 // 3: gasket_api.GetGasketRequest
	(*CreateGasketRequest)(nil),              // 4: gasket_api.CreateGasketRequest
	(*UpdateGasketRequest)(nil),              // 5: gasket_api.UpdateGasketRequest
	(*DeleteGasketRequest)(nil),              // 6: gasket_api.DeleteGasketRequest
	(*GasketResponse)(nil),                   // 7: gasket_api.GasketResponse
	(*GasketWithThickResponse)(nil),          // 8: gasket_api.GasketWithThickResponse
	(*GetGasketTypeRequest)(nil),             // 9: gasket_api.GetGasketTypeRequest
	(*CreateGasketTypeRequest)(nil),          // 10: gasket_api.CreateGasketTypeRequest
	(*UpdateGasketTypeRequest)(nil),          // 11: gasket_api.UpdateGasketTypeRequest
	(*DeleteGasketTypeRequest)(nil),          // 12: gasket_api.DeleteGasketTypeRequest
	(*GasketTypeResponse)(nil),               // 13: gasket_api.GasketTypeResponse
	(*GetEnvRequest)(nil),                    // 14: gasket_api.GetEnvRequest
	(*CreateEnvRequest)(nil),                 // 15: gasket_api.CreateEnvRequest
	(*UpdateEnvRequest)(nil),                 // 16: gasket_api.UpdateEnvRequest
	(*DeleteEnvRequest)(nil),                 // 17: gasket_api.DeleteEnvRequest
	(*EnvResponse)(nil),                      // 18: gasket_api.EnvResponse
	(*CreateManyEnvDataRequest)(nil),         // 19: gasket_api.CreateManyEnvDataRequest
	(*CreateEnvDataRequest)(nil),             // 20: gasket_api.CreateEnvDataRequest
	(*UpdateEnvDataRequest)(nil),             // 21: gasket_api.UpdateEnvDataRequest
	(*DeleteEnvDataRequest)(nil),             // 22: gasket_api.DeleteEnvDataRequest
	(*CreateManyGasketDataRequest)(nil),      // 23: gasket_api.CreateManyGasketDataRequest
	(*CreateGasketDataRequest)(nil),          // 24: gasket_api.CreateGasketDataRequest
	(*UpdateGasketDataRequest)(nil),          // 25: gasket_api.UpdateGasketDataRequest
	(*UpdateGasketTypeIdRequest)(nil),        // 26: gasket_api.UpdateGasketTypeIdRequest
	(*DeleteGasketDataRequest)(nil),          // 27: gasket_api.DeleteGasketDataRequest
	(*GetFullDataRequest)(nil),               // 28: gasket_api.GetFullDataRequest
	(*FullDataResponse)(nil),                 // 29: gasket_api.FullDataResponse
	(*CreateManyEnvDataRequest_Data)(nil),    // 30: gasket_api.CreateManyEnvDataRequest.Data
	(*CreateManyGasketDataRequest_Data)(nil), // 31: gasket_api.CreateManyGasketDataRequest.Data
	(*gasket_model.Gasket)(nil),              // 32: gasket_model.Gasket
	(*gasket_model.GasketWithThick)(nil),     // 33: gasket_model.GasketWithThick
	(*gasket_model.GasketType)(nil),          // 34: gasket_model.GasketType
	(*gasket_model.Env)(nil),                 // 35: gasket_model.Env
	(*gasket_model.Full_GasketData)(nil),     // 36: gasket_model.Full_GasketData
	(*gasket_model.Full_EnvData)(nil),        // 37: gasket_model.Full_EnvData
}
var file_moment_gasket_api_proto_depIdxs = []int32{
	0,  // 0: gasket_api.GetGasketRequest.typeGasket:type_name -> gasket_api.TypeGasket
	32, // 1: gasket_api.GasketResponse.gasket:type_name -> gasket_model.Gasket
	33, // 2: gasket_api.GasketWithThickResponse.gasket:type_name -> gasket_model.GasketWithThick
	0,  // 3: gasket_api.GetGasketTypeRequest.typeGasket:type_name -> gasket_api.TypeGasket
	34, // 4: gasket_api.GasketTypeResponse.gasketType:type_name -> gasket_model.GasketType
	35, // 5: gasket_api.EnvResponse.env:type_name -> gasket_model.Env
	30, // 6: gasket_api.CreateManyEnvDataRequest.data:type_name -> gasket_api.CreateManyEnvDataRequest.Data
	31, // 7: gasket_api.CreateManyGasketDataRequest.data:type_name -> gasket_api.CreateManyGasketDataRequest.Data
	36, // 8: gasket_api.FullDataResponse.gasketData:type_name -> gasket_model.Full_GasketData
	34, // 9: gasket_api.FullDataResponse.gasketType:type_name -> gasket_model.GasketType
	37, // 10: gasket_api.FullDataResponse.envData:type_name -> gasket_model.Full_EnvData
	35, // 11: gasket_api.FullDataResponse.envType:type_name -> gasket_model.Env
	28, // 12: gasket_api.GasketService.GetFullData:input_type -> gasket_api.GetFullDataRequest
	3,  // 13: gasket_api.GasketService.GetGasket:input_type -> gasket_api.GetGasketRequest
	3,  // 14: gasket_api.GasketService.GetGasketWithThick:input_type -> gasket_api.GetGasketRequest
	4,  // 15: gasket_api.GasketService.CreateGasket:input_type -> gasket_api.CreateGasketRequest
	5,  // 16: gasket_api.GasketService.UpdateGasket:input_type -> gasket_api.UpdateGasketRequest
	6,  // 17: gasket_api.GasketService.DeleteGasket:input_type -> gasket_api.DeleteGasketRequest
	9,  // 18: gasket_api.GasketService.GetGasketType:input_type -> gasket_api.GetGasketTypeRequest
	10, // 19: gasket_api.GasketService.CreateGasketType:input_type -> gasket_api.CreateGasketTypeRequest
	11, // 20: gasket_api.GasketService.UpdateGasketType:input_type -> gasket_api.UpdateGasketTypeRequest
	12, // 21: gasket_api.GasketService.DeleteGasketType:input_type -> gasket_api.DeleteGasketTypeRequest
	14, // 22: gasket_api.GasketService.GetEnv:input_type -> gasket_api.GetEnvRequest
	15, // 23: gasket_api.GasketService.CreateEnv:input_type -> gasket_api.CreateEnvRequest
	16, // 24: gasket_api.GasketService.UpdateEnv:input_type -> gasket_api.UpdateEnvRequest
	17, // 25: gasket_api.GasketService.DeleteEnv:input_type -> gasket_api.DeleteEnvRequest
	19, // 26: gasket_api.GasketService.CreateManyEnvData:input_type -> gasket_api.CreateManyEnvDataRequest
	20, // 27: gasket_api.GasketService.CreateEnvData:input_type -> gasket_api.CreateEnvDataRequest
	21, // 28: gasket_api.GasketService.UpdateEnvData:input_type -> gasket_api.UpdateEnvDataRequest
	22, // 29: gasket_api.GasketService.DeleteEnvData:input_type -> gasket_api.DeleteEnvDataRequest
	23, // 30: gasket_api.GasketService.CreateManyGasketData:input_type -> gasket_api.CreateManyGasketDataRequest
	24, // 31: gasket_api.GasketService.CreateGasketData:input_type -> gasket_api.CreateGasketDataRequest
	26, // 32: gasket_api.GasketService.UpdateGasketTypeId:input_type -> gasket_api.UpdateGasketTypeIdRequest
	25, // 33: gasket_api.GasketService.UpdateGasketData:input_type -> gasket_api.UpdateGasketDataRequest
	27, // 34: gasket_api.GasketService.DeleteGasketData:input_type -> gasket_api.DeleteGasketDataRequest
	29, // 35: gasket_api.GasketService.GetFullData:output_type -> gasket_api.FullDataResponse
	7,  // 36: gasket_api.GasketService.GetGasket:output_type -> gasket_api.GasketResponse
	8,  // 37: gasket_api.GasketService.GetGasketWithThick:output_type -> gasket_api.GasketWithThickResponse
	1,  // 38: gasket_api.GasketService.CreateGasket:output_type -> gasket_api.IdResponse
	2,  // 39: gasket_api.GasketService.UpdateGasket:output_type -> gasket_api.Response
	2,  // 40: gasket_api.GasketService.DeleteGasket:output_type -> gasket_api.Response
	13, // 41: gasket_api.GasketService.GetGasketType:output_type -> gasket_api.GasketTypeResponse
	1,  // 42: gasket_api.GasketService.CreateGasketType:output_type -> gasket_api.IdResponse
	2,  // 43: gasket_api.GasketService.UpdateGasketType:output_type -> gasket_api.Response
	2,  // 44: gasket_api.GasketService.DeleteGasketType:output_type -> gasket_api.Response
	18, // 45: gasket_api.GasketService.GetEnv:output_type -> gasket_api.EnvResponse
	1,  // 46: gasket_api.GasketService.CreateEnv:output_type -> gasket_api.IdResponse
	2,  // 47: gasket_api.GasketService.UpdateEnv:output_type -> gasket_api.Response
	2,  // 48: gasket_api.GasketService.DeleteEnv:output_type -> gasket_api.Response
	2,  // 49: gasket_api.GasketService.CreateManyEnvData:output_type -> gasket_api.Response
	2,  // 50: gasket_api.GasketService.CreateEnvData:output_type -> gasket_api.Response
	2,  // 51: gasket_api.GasketService.UpdateEnvData:output_type -> gasket_api.Response
	2,  // 52: gasket_api.GasketService.DeleteEnvData:output_type -> gasket_api.Response
	2,  // 53: gasket_api.GasketService.CreateManyGasketData:output_type -> gasket_api.Response
	2,  // 54: gasket_api.GasketService.CreateGasketData:output_type -> gasket_api.Response
	2,  // 55: gasket_api.GasketService.UpdateGasketTypeId:output_type -> gasket_api.Response
	2,  // 56: gasket_api.GasketService.UpdateGasketData:output_type -> gasket_api.Response
	2,  // 57: gasket_api.GasketService.DeleteGasketData:output_type -> gasket_api.Response
	35, // [35:58] is the sub-list for method output_type
	12, // [12:35] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_moment_gasket_api_proto_init() }
func file_moment_gasket_api_proto_init() {
	if File_moment_gasket_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_moment_gasket_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGasketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGasketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGasketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGasketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasketWithThickResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGasketTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGasketTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGasketTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGasketTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasketTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEnvRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEnvRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEnvRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEnvRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateManyEnvDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEnvDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEnvDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEnvDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateManyGasketDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGasketDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGasketDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGasketTypeIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGasketDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateManyEnvDataRequest_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moment_gasket_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateManyGasketDataRequest_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_moment_gasket_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_moment_gasket_api_proto_goTypes,
		DependencyIndexes: file_moment_gasket_api_proto_depIdxs,
		EnumInfos:         file_moment_gasket_api_proto_enumTypes,
		MessageInfos:      file_moment_gasket_api_proto_msgTypes,
	}.Build()
	File_moment_gasket_api_proto = out.File
	file_moment_gasket_api_proto_rawDesc = nil
	file_moment_gasket_api_proto_goTypes = nil
	file_moment_gasket_api_proto_depIdxs = nil
}
