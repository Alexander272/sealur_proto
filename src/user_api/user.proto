syntax = "proto3";

package user_api;
option go_package = "github.com/Alexander272/sealur_proto/api/user_api";

message IdResponse {
    string id = 1;
}
message SuccessResponse {
    bool success = 1;
}

message PingRequest {}
message PingResponse {
    string ping = 1;
}

// User Service ----------------------------------------------------------------------
message GetUserRequest {
    string login = 1;
    string id = 2;
    string password = 3;
}

message GetAllUserRequest {
    enum SearchField {
        organization = 0;
        city = 1;
        login = 2;
        name = 3;
        email = 4;
    }

    message Search {
        repeated SearchField field = 1;
        string value = 2;
    }

    int32 limit = 1;
    int32 offset = 2;
    Search search = 3;
}
message GetNewUserRequest {}

message CreateUserRequest {
    string organization = 1;
    string name = 2;
    string email = 3;
    string city = 4;
    string position = 5;
    string phone = 6;
}

message UpdateUserRequest {
    string id = 1;
    string name = 2;
    string email = 3;
    string position = 4;
    string phone = 5;
    string login = 6;
    string password = 7;
}

message DeleteUserRequest {
    string id = 1;
}

message ConfirmUserRequest {
    string id = 1;
    string login = 2;
    string password = 3;
    repeated Role roles = 4;
}

message User {
    string id = 1;
    string organization = 2;
    string name = 3;
    string email = 4;
    string city = 5;
    string position = 6;
    string phone = 7;
    string login = 8;
    repeated Role roles = 9;
    repeated Ip ip = 10;
}

message UserResponse {
    User user = 1;
}
message UsersResponse {
    repeated User users = 1;
    int32 count = 2;
}

// Role Service ----------------------------------------------------------------------
message GetRolesRequest {
    string userId = 1;
}

message GetAllRolesRequest {}

message CreateRoleRequest {
    string userId = 1;
    string service = 2;
    string role = 3;
}

message UpdateRoleRequest {
    string id = 1;
    string service = 2;
    string role = 3;
}

message DeleteRoleRequest {
    string id = 1;
}

message Role {
    string id = 1;
    string service = 2;
    string role = 3;
}

message RolesResponse {
    repeated Role roles = 1;
}

// IP service ------------------------------------------------------------
message GetAllIpRequest {}

message AddIpRequest {
    string userId = 1;
    string ip = 2;
}

message Ip {
    string ip = 1;
    string date = 2;
}

message IpResponse {
    repeated Ip ip = 1;
}

service UserServiceOld {
    rpc Ping (PingRequest) returns (PingResponse);

    // User Service ----------------------------------------------------------------------
    rpc GetUser (GetUserRequest) returns (UserResponse);
    rpc GetAllUsers (GetAllUserRequest) returns (UsersResponse);
    rpc GetNewUsers (GetNewUserRequest) returns (UsersResponse);
    rpc CreateUser (CreateUserRequest) returns (SuccessResponse);
    rpc ConfirmUser (ConfirmUserRequest) returns (SuccessResponse);
    rpc UpdateUser (UpdateUserRequest) returns (IdResponse);
    rpc DeleteUser (DeleteUserRequest) returns (IdResponse);
    rpc RejectUser (DeleteUserRequest) returns (IdResponse);

    // Role Service ----------------------------------------------------------------------
    rpc GetRoles (GetRolesRequest) returns (RolesResponse);
    rpc CreateRole (CreateRoleRequest) returns (SuccessResponse);
    rpc UpdateRole (UpdateRoleRequest) returns (IdResponse);
    rpc DeleteRole (DeleteRoleRequest) returns (IdResponse);

    // IP service ------------------------------------------------------------
    rpc AddIp (AddIpRequest) returns (SuccessResponse);
}