syntax = "proto3";

package calc_api;
option go_package = "github.com/Alexander272/sealur_proto/api/moment/calc_api";

import "moment/calc_api/flange_model.proto";
import "moment/calc_api/cap_model.proto";
import "moment/calc_api/float_model.proto";
import "moment/calc_api/dev_cooling_model.proto";
import "moment/calc_api/express_circle_model.proto";
import "moment/calc_api/express_rectangle_model.proto";
import "moment/calc_api/gas_cooling_model.proto";

message FlangeRequest {
    enum Flanges {
        // Изолированные фланцы
        isolated = 0;
        // Неизолированные фланцы
        nonIsolated = 1;
        // Задается вручную
        manually = 2;
    }

    enum Type {
        // Болт
        bolt = 0;
        // Шпилька
        pin = 1;
    }

    enum Condition {
        // Неконтролируемая затяжка
        uncontrollable = 0;
        // Контроль по крутящему моменту
        controllable = 1;
        // Контроль по вытяжке шпилек
        controllablePin = 2;
    }

    enum Calcutation {
        // Расчет основных величин
        basis = 0;
        // Прочностной
        strength = 1;
    }

    // Расчетное давление
    double pressure = 1;
    // Внешняя осевая сила
    int32 axialForce = 2;
    // Внешний изгибающий момент
    int32 bendingMoment = 3;
    // Расчетная температура
    double temp = 4;
    // Условия работы (true - рабочие, false - испытания)
    bool isWork = 5;
    // Температура элементов фланцевого соединения
    Flanges flanges = 6;
    // Одинаковые фланцы
    bool isSameFlange = 7;
    // Закладная деталь
    bool isEmbedded = 8;
    // Тип соединения
    Type type = 9;
    // Условие затяжки
    Condition condition = 10;
    // Расчет
    Calcutation calculation = 11;

    // Исходные данные для первого фланца
    repeated flange_model.FlangeData flangesData = 12;
    // Исходные данные для болт/шпилька
    flange_model.BoltData bolts = 13;
    // Исходные данные прокладки
    flange_model.GasketData gasket = 14;
    // Исходные данные для закладной детали
    flange_model.EmbedData embed = 15;
    // Наличие шайб
    bool isUseWasher = 16;
    // Исходные данные для шайб
    repeated flange_model.WasherData washer = 17; 

    // Выводить ли формулы
    bool isNeedFormulas = 18;

    // Коэффициент трения
    double friction = 19;
}

message FlangeResponse {
    // Исходные данные для расчета
    flange_model.DataResult data = 1;
    // Исходные данные для фланцев
    repeated flange_model.FlangeResult flanges = 2;
    // Исходные данные для болт/шпилька
    flange_model.BoltResult bolt = 3;
    // Исходные данные прокладки
    flange_model.GasketResult gasket = 4;
    // Исходные данные для закладной детали
    flange_model.EmbedResult embed = 5;
    // Исходные данные для шайб
    repeated flange_model.WasherResult washers = 6;
    // Расчеты
    flange_model.Calculated calc = 7;
    // Формулы
    flange_model.Formulas formulas = 8;
}

message CapRequestOld {
    enum Flanges {
        isolated = 0;
        nonIsolated = 1;
        manually = 2;
    }

    enum Type {
        bolt = 0;
        pin = 1;
    }

    enum Condition {
        uncontrollable = 0;
        controllable = 1;
        controllablePin = 2;
    }

    enum Calcutation {
        basis = 0;
        strength = 1;
    }

    double pressure = 1;
    int32 axialForce = 2;
    double temp = 3;
    bool isWork = 4;
    Flanges flanges = 5;
    bool isEmbedded = 6;
    Type type = 7;
    Condition condition = 8;
    Calcutation calculation = 9;

    cap_model.FlangeData flangeData = 10;
    cap_model.CapData capData = 11;
    cap_model.BoltData bolts = 12;
    cap_model.GasketData gasket = 13;
    cap_model.EmbedData embed = 14;
    bool isUseWasher = 15;
    repeated cap_model.WasherData washer = 16; 

    bool isNeedFormulas = 17;

    // Коэффициент трения
    double friction = 18;
}

message CapResponseOld {
    cap_model.FlangeResultOld flange = 1;
    cap_model.CapResultOld cap = 2;
    cap_model.BoltResult bolt = 3;
    cap_model.GasketResult gasket = 4;
    cap_model.EmbedResult embed = 5;
    cap_model.CalculatedCap calc = 6;
    cap_model.CalcCapFormulas formulas = 7;
    cap_model.DataResult data = 8;
    repeated cap_model.WasherResult washers = 9;
}

message CapRequest {
    // Исходные данные для расчета
    cap_model.MainData data = 1;
    // Исходные данные для фланца
    cap_model.FlangeData flangeData = 2;
    //  Исходные данные для крышки
    cap_model.CapData capData = 3;
    // Исходные данные для болт/шпилька
    cap_model.BoltData bolts = 4;
    // Исходные данные прокладки
    cap_model.GasketData gasket = 5;
    // Исходные данные для закладной детали
    cap_model.EmbedData embed = 6;
    // Наличие шайб
    bool isUseWasher = 7;
    // Исходные данные для шайб
    repeated cap_model.WasherData washer = 8; 
    // Наличие формул
    bool isNeedFormulas = 9;
}

message CapResponse {
    // Исходные данные для расчета
    cap_model.DataResult data = 1;
    // Исходные данные для фланца
    cap_model.FlangeResult flange = 2;
    //  Исходные данные для крышки
    cap_model.CapResult cap = 3;
    // Исходные данные для болт/шпилька
    cap_model.BoltResult bolt = 4;
    // Исходные данные прокладки
    cap_model.GasketResult gasket = 5;
    // Исходные данные для закладной детали
    cap_model.EmbedResult embed = 6;
    // Исходные данные для шайб
    repeated cap_model.WasherResult washers = 7;
    // Расчеты
    cap_model.Calculated calc = 8;
    // Формулы
    cap_model.Formulas formulas = 9;
}

message FloatRequest {
    enum Condition {
        uncontrollable = 0;
        controllable = 1;
        controllablePin = 2;
    }
    enum Type {
        bolt = 0;
        pin = 1;
    }

    double pressure = 1;
    bool isWork = 2;
    bool hasThorn = 3;
    Type type = 4;
    Condition condition = 5;

    float_model.FlangeData flangeData = 6;
    float_model.CapData capData = 7;
    float_model.BoltData bolts = 8;
    float_model.GasketData gasket = 9;

    bool isNeedFormulas = 10;

    // Коэффициент трения
    double friction = 11;
}

message FloatResponse {
    float_model.DataResult data = 1;
    float_model.FlangeResult flange = 2;
    float_model.CapResult cap = 3;
    float_model.BoltResult bolt = 4;
    float_model.GasketResult gasket = 5;
    float_model.Calculated calc = 6;
    float_model.Formulas formulas = 7;
}

message DevCoolingRequest {
    enum TypeBolt {
        bolt = 0;
        pin = 1;
    }

    enum MountingMethod {
        AllThickness = 0;
        PartThickness = 1;
        SteelSheet = 2;
    }

    enum Mounting {
        flaring = 0;
        welding = 1;
        rolling = 2;
    }

    enum TypeMounting {
        nothing = 0;
        flat = 1;
        groove = 2;
    }

    enum CameraDiagram {
        schema1 = 0;
        schema2 = 1;
        schema3 = 2;
        schema4 = 3;
        schema5 = 4;
    }

    enum Layout {
        lSchema1 = 0;
        lSchema2 = 1;
    }

    // Расчетное давление
    double pressure = 1;
    // Расчетная температура
    double temp = 2;
    // Способ крепления труб
    MountingMethod method = 3;
    // Тип соединения
    TypeBolt typeBolt = 4;
    // Способ крепления труб в трубной решетке
    Mounting mounting = 5;
    // Тип крепления труб в трубной решетке
    TypeMounting typeMounting = 6;
    // Схема камеры аппарата воздушного охлаждения
    CameraDiagram cameraDiagram = 7;
    // Схема размещения отверстий
    Layout layout = 8;

    dev_cooling_model.CapData cap = 9;
    dev_cooling_model.TubeSheetData tubeSheet = 10;
    dev_cooling_model.TubeData tube = 11;
    dev_cooling_model.BoltData bolts = 12;
    dev_cooling_model.GasketData gasket = 13;

    bool isNeedFormulas = 14;

    // Коэффициент трения
    double friction = 15;
}

message DevCoolingResponse {
    dev_cooling_model.DataResult data = 1;
    dev_cooling_model.CapResult cap = 2;
    dev_cooling_model.TubeSheetResult tubeSheet = 3;
    dev_cooling_model.TubeResult tube = 4;
    dev_cooling_model.BoltResult bolts = 5;
    dev_cooling_model.GasketResult gasket = 6;
    dev_cooling_model.Calculated calc = 7;
    dev_cooling_model.Formulas formulas = 8;
}

message GasCoolingRequest {
    gas_cooling_model.MainData data = 1;
    gas_cooling_model.BoltData bolts = 2;
    gas_cooling_model.GasketData gasket = 3;
    bool isNeedFormulas = 4;
}

message GasCoolingResponse {
    gas_cooling_model.DataResult data = 1;
    gas_cooling_model.BoltResult bolts = 2;
    gas_cooling_model.GasketResult gasket = 3;
    gas_cooling_model.Calculated calc = 4;
    gas_cooling_model.Formulas formulas = 5;
}

message ExpressCircleRequest {
    enum TypeBolt {
        bolt = 0;
        pin = 1;
    }
    enum Condition {
        uncontrollable = 0;
        controllable = 1;
        controllablePin = 2;
    }

    // Расчетное давление 
    double pressure = 1;
    // Тип соединения
    TypeBolt typeBolt = 2;
    // Условие затяжки
    Condition condition = 3;
    express_circle_model.BoltData bolts = 4;
    express_circle_model.GasketData gasket = 5;

    bool isNeedFormulas = 6;

    // Коэффициент трения
    double friction = 7;
}

message ExpressCircleResponse {
    express_circle_model.DataResult data = 1;
    express_circle_model.BoltResult bolts = 2;
    express_circle_model.GasketResult gasket = 3;
    express_circle_model.Calculated calc = 4;
    express_circle_model.Formulas formulas = 5;
}

message ExpressRectangleRequest {
    enum TypeBolt {
        bolt = 0;
        pin = 1;
    }
    enum Condition {
        uncontrollable = 0;
        controllable = 1;
        controllablePin = 2;
    }

    // Расчетное давление 
    double pressure = 1;
    // Пробное давление
    double testPressure = 2;
    // Тип соединения
    TypeBolt typeBolt = 3;
    // Условие затяжки
    Condition condition = 4;
    express_rectangle_model.BoltData bolts = 5;
    express_rectangle_model.GasketData gasket = 6;

    bool isNeedFormulas = 7;

    // Коэффициент трения
    double friction = 8;
}

message ExpressRectangleResponse {
    express_rectangle_model.DataResult data = 1;
    express_rectangle_model.BoltResult bolts = 2;
    express_rectangle_model.GasketResult gasket = 3;
    express_rectangle_model.Calculated calc = 4;
    express_rectangle_model.Formulas formulas = 5;
}

service CalcService {
    rpc CalculateFlange (FlangeRequest) returns (FlangeResponse);
    rpc CalculateCap (CapRequest) returns (CapResponse);
    rpc CalculateCapOld (CapRequestOld) returns (CapResponseOld);
    rpc CalculateFloat (FloatRequest) returns (FloatResponse);
    rpc CalculateDevCooling (DevCoolingRequest) returns (DevCoolingResponse);
    rpc CalculateGasCooling (GasCoolingRequest) returns (GasCoolingResponse);
    rpc CalculateExCircle (ExpressCircleRequest) returns (ExpressCircleResponse);
    rpc CalculateExRectangle (ExpressRectangleRequest) returns (ExpressRectangleResponse);
}
