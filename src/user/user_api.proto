syntax = "proto3";

package user_api;
option go_package = "github.com/Alexander272/sealur_proto/api/user/user_api";

import "pro/models/response_model.proto";
import "user/models/user_model.proto";

message GetUser {
    string id = 1;
}

message GetUserByEmail {
    string email = 1;
    string password = 2;
}

message GetAllUser {
    enum SearchField {
        organization = 0;
        city = 1;
        login = 2;
        name = 3;
        email = 4;
    }

    message Search {
        repeated SearchField field = 1;
        string value = 2;
    }

    int32 limit = 1;
    int32 offset = 2;
    Search search = 3;
}
message GetNewUser {}

message GetUsersByParam {
    bool empty = 1;
    string periodAt = 2;
    string periodEnd = 3;
    bool useLink = 4;
    bool hasOrder = 5;
}

message GetUserAnalytics {
    string periodAt = 1;
    string periodEnd = 2;
}

message CreateUser {
    string company = 1;
    string address = 2;
    string inn = 3;
    string kpp = 4;
    string region = 5;
    string city = 6;
    string name = 7;
    string position = 8;
    string email = 9;
    string phone = 10;
    string password = 11;
    string managerId = 12;
    bool useLink = 13;
}

message UpdateUser {
    string id = 1;
    string company = 2;
    string address = 3;
    string inn = 4;
    string kpp = 5;
    string region = 6;
    string city = 7;
    string name = 8;
    string position = 9;
    string email = 10;
    string phone = 11;
    string password = 12;
}

message UserManager {
    string id = 1;
    string managerId = 2;
}

message DeleteUser {
    string id = 1;
}

message ConfirmUser {
    string id = 1;
}

message ChangeManager {
    string managerId = 1;
}

message Users {
    repeated user_model.User users = 1;
    int32 count = 2;
}

message Manager {
    string email = 1;
    user_model.User user = 2;
}

message Analytics {
    int64 usersCountRegister = 1;
    int64 userCountLink = 2;
    int64 newUserCount = 3;
    int64 newUserCountLink = 4;
}

message AnalyticsUsers {
    repeated user_model.AnalyticUsers users = 1;
}

service UserService {
    rpc Get (GetUser) returns (user_model.User);
    rpc GetByEmail (GetUserByEmail) returns (user_model.User);
    rpc GetByParam (GetUsersByParam) returns (AnalyticsUsers);
    rpc GetAll (GetAllUser) returns (Users);
    rpc GetNew (GetNewUser) returns (Users);
    rpc GetManagers (GetNewUser) returns (Users);
    rpc GetManagerEmail (GetUser) returns (Manager);
    rpc GetAnalytics (GetUserAnalytics) returns (Analytics);
    rpc Create (CreateUser) returns (response_model.IdResponse);
    rpc Confirm (ConfirmUser) returns (user_model.User);
    rpc Update (UpdateUser) returns (response_model.Response);
    rpc SetManager (UserManager) returns (response_model.Response);
    rpc Delete (DeleteUser) returns (response_model.Response);
}