syntax = "proto3";

package email_api;
option go_package = "/email_api";

message IdResponse {
    string id = 1;
}
message SuccessResponse {
    bool success = 1;
}

message PingRequest {}
message PingResponse {
    string ping = 1;
}

// Interview --------------------------------------------------
message File {
    bytes content = 1;
}

message FileData {
    repeated string name = 1;
    string type = 2;
    int64 size = 3;
}

message User {
    string organization = 1;
	string name = 2;
	string email = 3;
	string city = 4;
	string position = 5;
	string phone = 6;
}

message InterviewData {
    User user = 1;
    FileData file = 2;
}

message SendInterviewRequest {
    oneof request {
        InterviewData data = 2;
        File file = 1;
    }
}

// Order --------------------------------------------------
message OrderData {
    User user = 1;
    FileData file = 2;
}

message SendOrderRequest {
    oneof request {
        OrderData data = 2;
        File file = 1;
    }
}

// Confirm --------------------------------------------------
message ConfirmUserRequest {
    string organization = 1;
	string name = 2;
    string position = 3;
}

// Reject --------------------------------------------------
message RejectUserRequest {
    string name = 1;
    string email = 2;
}

// Join --------------------------------------------------
message JoinUserRequest {
    string name = 1;
    string login = 2;
    string password = 3;
    string email = 4;
    repeated string services = 5;
}

// Blocked ------------------------------------------------
message BlockedUserRequest {
    string ip = 1;
    string login = 2;
}

// TEST ---------------------------------------------------
message SendTestRequest {
    enum Type {
        join = 0;
        confirm = 1;
        interview = 2;
        order = 3;
        reject = 4;
        blocked = 5;
    }

    Type type = 1;
}


service EmailService {
    rpc Ping (PingRequest) returns (PingResponse);

    // Interview --------------------------------------------------
    rpc SendInterview (stream SendInterviewRequest) returns (SuccessResponse);

    // Order --------------------------------------------------
    rpc SendOrder (stream SendOrderRequest) returns (SuccessResponse);
    
    // Confirm --------------------------------------------------
    rpc SendConfirm (ConfirmUserRequest) returns (SuccessResponse);
    
    // Reject --------------------------------------------------
    rpc SendReject (RejectUserRequest) returns (SuccessResponse);
    
    // Join --------------------------------------------------
    rpc SendJoin (JoinUserRequest) returns (SuccessResponse);

    // Blocked ------------------------------------------------
    rpc SendBlocked (BlockedUserRequest) returns (SuccessResponse);

    // TEST ---------------------------------------------------
    rpc SendTest (SendTestRequest) returns (SuccessResponse);
}