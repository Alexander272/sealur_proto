syntax = "proto3";

package order_api;
option go_package = "api/pro/order_api";

import "pro/models/response_model.proto";
import "pro/models/order_model.proto";
import "pro/models/position_model.proto";
import "user/models/user_model.proto";

message GetOrder {
    string id = 1;
}

message GetCurrentOrder {
    string userId = 1;
    string managerId = 2;
}

message GetAllOrders {
    string userId = 1;
}

message GetManagerOrders {
    string managerId = 1;
}
message GetAllManagerOrders {
    
}

message CreateOrder {
    string id = 1;
    string userId = 2;
    int64 count = 3;
    repeated position_model.FullPosition positions = 4;
    string managerId = 5;
}

message DeleteOrder {
    string id = 1;
}

message CopyOrder {
    string targetId = 1;
    string fromId = 2;
    int64 count = 3;
}

message Status {
    order_model.OrderStatus status = 1;
    string orderId = 2;
    string date = 3;
}

message Manager {
    string orderId = 1;
    string managerId = 2;
}

message Order {
    user_model.User user = 1;
    order_model.CurrentOrder order = 2;
}

message Orders {
    repeated order_model.Order orders = 1;
}

message Positions {
    repeated position_model.Position positions = 1;
}

message OrderNumber {
    int64 number = 1;
}

message ManagerOrders {
    repeated order_model.ManagerOrder orders = 1;
}

service OrderService {
    rpc Get (GetOrder) returns (Order);
    rpc GetCurrent (GetCurrentOrder) returns (order_model.CurrentOrder);
    rpc GetAll (GetAllOrders) returns (Orders);
    rpc GetFile (GetOrder) returns (stream response_model.FileResponse);
    rpc GetOpen (GetManagerOrders) returns (ManagerOrders);
    rpc GetAllOpen (GetAllManagerOrders) returns (ManagerOrders);
    rpc Save (CreateOrder) returns (OrderNumber);
    rpc Create (CreateOrder) returns (response_model.IdResponse);
    rpc Copy (CopyOrder) returns (response_model.Response);
    rpc SetStatus (Status) returns (response_model.Response);
    rpc SetManager (Manager) returns (response_model.Response);
    rpc Delete (DeleteOrder) returns (response_model.Response);
}