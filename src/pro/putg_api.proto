syntax = "proto3";

package putg_api;
option go_package = "api/pro/putg_api";

// import "pro/models/snp_data_model.proto";
// import "pro/models/snp_size_model.proto";
// import "pro/models/snp_model.proto";
import "pro/models/putg_configuration_model.proto";
import "pro/models/putg_standard_model.proto";
import "pro/models/putg_flange_type_model.proto";
import "pro/models/putg_filler_model.proto";
import "pro/models/putg_construction_type_model.proto";

message GetPutg {
    // string snpTypeId = 1;
    // bool hasD2 = 2;
}

message GetPutgData {
    string standardId = 1;
    // string snpStandardId = 2;
}

message GetPutgBase {

}

message Putg {
    // // snp_data
    // snp_data_model.SnpData snp = 1;
    // // sizes
    // repeated snp_size_model.SnpSize sizes = 2;
}

message PutgData {
    // flange_type & snp_type
    // snp_material
    //* если стандарт не определен, то еще
    // snp_filler
    // mounting
    // snp_model.SnpData snpData = 1;
   
    // если задан standardId
    repeated putg_filler_model.PutgFiller fillers = 1;
    repeated putg_flange_type_model.PutgFlangeType flangeTypes = 5;
}

message PutgBase {
    repeated putg_configuration_model.PutgConfiguration configurations = 1;
    repeated putg_standard_model.PutgStandard standards = 2;
    repeated putg_construction_type_model.PutgConstruction constructions = 3;
}

service PutgDataService {
    // rpc Get (GetPutg) returns (Putg);
    // rpc GetData (GetPutgData) returns (PutgData);
    rpc GetBase (GetPutgBase) returns (PutgBase);
}